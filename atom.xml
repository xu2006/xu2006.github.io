<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhisheng的博客</title>
  
  <subtitle>坑要一个个填，路要一步步走！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.54tianzhisheng.cn/"/>
  <updated>2018-11-07T14:38:01.000Z</updated>
  <id>http://www.54tianzhisheng.cn/</id>
  
  <author>
    <name>zhisheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>百度、阿里、腾讯等一线互联网架构师都在用的技术体系</title>
    <link href="http://www.54tianzhisheng.cn/2018/12/08/zhisheng-ads01/"/>
    <id>http://www.54tianzhisheng.cn/2018/12/08/zhisheng-ads01/</id>
    <published>2018-12-07T16:00:00.000Z</published>
    <updated>2018-11-07T14:38:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Web应用</strong>，最常见的研发语言是Java和PHP。</p><p><strong>后端服务</strong>，最常见的研发语言是Java和C/C++。</p><p><strong>大数据</strong>，最常见的研发语言是Java和Python。<br><a id="more"></a><br>可以说，Java是现阶段中国互联网公司中，覆盖度最广的研发语言，掌握了Java技术体系，不管在成熟的大公司，快速发展的公司，还是创业阶段的公司，都能有立足之地。</p></blockquote><p>有不少朋友问，除了掌握Java语法，还要系统学习哪些Java相关的技术，今天分享一个，互联网Java技术学习路线图。</p><p>有不少朋友问，除了掌握Java语法，还要系统学习哪些Java相关的技术，今天分享一个，互联网Java技术学习路线图。</p><h3 id="常见模式与工具"><a href="#常见模式与工具" class="headerlink" title="常见模式与工具"></a>常见模式与工具</h3><p>学习Java技术体系，设计模式，流行的框架与组件是必不可少的：</p><blockquote><ul><li><strong>常见的设计模式</strong>，编码必备</li><li><strong>Spring5</strong>，做应用必不可少的最新框架</li><li><strong>MyBatis</strong>，玩数据库必不可少的组件</li></ul></blockquote><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwzv0rcsc4j30u00d3q53.jpg" alt="img"></p><h3 id="工程化与工具"><a href="#工程化与工具" class="headerlink" title="工程化与工具"></a>工程化与工具</h3><p>工欲善其事必先利其器，不管是小白，还是资深开发，玩Java技术体系，选择好的工具，提升开发效率和团队协作效率，是必不可少的：</p><blockquote><ul><li><strong>Maven</strong>，项目管理</li><li><strong>Jenkins</strong>，持续集成</li><li><strong>Sonar</strong>，代码质量管理</li><li><strong>Git</strong>，版本管理</li></ul></blockquote><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fwzv18e0toj30tr0fztbl.jpg" alt="img"></p><h3 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h3><p>高并发，高可用，海量数据，没有分布式的架构知识肯定是玩不转的：</p><blockquote><ul><li><strong>分布式架构原理</strong></li><li><strong>分布式架构策略</strong></li><li><strong>分布式中间件</strong></li><li><strong>分布式架构实战</strong></li></ul></blockquote><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwzv1onk17j30u00n778h.jpg" alt="img"></p><h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><p>业务越来越复杂，服务分层，微服务架构是架构升级的必由之路，Java技术体系，和微服务相关的技术有哪些呢？</p><blockquote><ul><li><strong>微服务框架</strong></li><li><strong>Spring Cloud</strong></li><li><strong>Docker与虚拟化</strong></li><li><strong>微服务架构</strong></li></ul></blockquote><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwzv28ysurj30u00jc41v.jpg" alt="img"></p><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>任何脱离细节的ppt架构师都是耍流氓，向上能运筹帷幄，向下能解决一线性能问题，Java技术体系，需要了解：</p><blockquote><ul><li><strong>性能指标体系</strong></li><li><strong>JVM调优</strong></li><li><strong>Web调优</strong></li><li><strong>DB调优</strong></li></ul></blockquote><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwzv3cvm85j30u00hgmza.jpg" alt="img"></p><h3 id="底层知识"><a href="#底层知识" class="headerlink" title="底层知识"></a>底层知识</h3><p>从架构设计，到应用层调优，再深入了解底层原理，扎实的Java基本功才能让自己变为扫地神僧：</p><blockquote><ul><li><strong>内存模型</strong></li><li><strong>并发模式</strong></li><li><strong>线程模型</strong></li><li><strong>锁细节</strong></li></ul></blockquote><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwzv3qkm60j30mv0lcwgu.jpg" alt="img"></p><p>以上是自己收集总结的Java架构技术图谱，自己因为比较喜欢技术，所以收集了一些Java高并发、分布式、JVM、spring、源码分析和kafka等架构技术资料，如果你也对技术感兴趣可以来我的Java后端社区（<strong>867924282</strong>），可以到群里来下载这些资料，这段时间正值面试期，欢迎大家进群讨论与学习。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fwzv46jkwsj30u018z11o.jpg" alt="img"></p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwzv5btkn4j30u01hc13a.jpg" alt="img"></p><p><strong>扫描下方二维码，免费领取资料</strong></p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fwzv5oo3obj30f00kkad3.jpg" alt="img"></p><p><strong>长按扫码加群：867924282，免费领取资料</strong></p><p>分享给喜欢Java，喜欢编程，有梦想成为架构师的程序员们，希望能够帮助到你们。</p><p>不是Java程序员也没关系，帮忙转发给更多朋友！谢谢。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Web应用&lt;/strong&gt;，最常见的研发语言是Java和PHP。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后端服务&lt;/strong&gt;，最常见的研发语言是Java和C/C++。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大数据&lt;/strong&gt;，最常见的研发语言是Java和Python。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.54tianzhisheng.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>《从0到1学习Flink》—— Flink Data transformation(转换)</title>
    <link href="http://www.54tianzhisheng.cn/2018/11/04/Flink-Data-transformation/"/>
    <id>http://www.54tianzhisheng.cn/2018/11/04/Flink-Data-transformation/</id>
    <published>2018-11-03T16:00:00.000Z</published>
    <updated>2018-11-13T15:37:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fx6uzoige7j31hc0zbtjz.jpg" alt=""></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在第一篇介绍 Flink 的文章 <a href="http://www.54tianzhisheng.cn/2018/10/13/flink-introduction/#Flink-%E7%A8%8B%E5%BA%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%B5%81%E7%BB%93%E6%9E%84">《《从0到1学习Flink》—— Apache Flink 介绍》</a> 中就说过 Flink 程序的结构</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fw7ij4194jj31a00usq7o.jpg" alt=""></p><p>Flink 应用程序结构就是如上图所示：</p><p>1、Source: 数据源，Flink 在流处理和批处理上的 source 大概有 4 类：基于本地集合的 source、基于文件的 source、基于网络套接字的 source、自定义的 source。自定义的 source 常见的有 Apache kafka、Amazon Kinesis Streams、RabbitMQ、Twitter Streaming API、Apache NiFi 等，当然你也可以定义自己的 source。</p><p>2、Transformation：数据转换的各种操作，有 Map / FlatMap / Filter / KeyBy / Reduce / Fold / Aggregations / Window / WindowAll / Union / Window join / Split / Select / Project 等，操作很多，可以将数据转换计算成你想要的数据。</p><p>3、Sink：接收器，Flink 将转换计算后的数据发送的地点 ，你可能需要存储下来，Flink 常见的 Sink 大概有如下几类：写入文件、打印出来、写入 socket 、自定义的 sink 。自定义的 sink 常见的有 Apache kafka、RabbitMQ、MySQL、ElasticSearch、Apache Cassandra、Hadoop FileSystem 等，同理你也可以定义自己的 sink。</p><p>在上四篇文章介绍了 Source 和 Sink：</p><p>1、<a href="http://www.54tianzhisheng.cn/2018/10/28/flink-sources/">《从0到1学习Flink》—— Data Source 介绍</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/10/30/flink-create-source/">《从0到1学习Flink》—— 如何自定义 Data Source ？</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/10/29/flink-sink/">《从0到1学习Flink》—— Data Sink 介绍</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/10/31/flink-create-sink/">《从0到1学习Flink》—— 如何自定义 Data Sink ？</a></p><p>那么这篇文章我们就来看下 Flink Data Transformation 吧，数据转换操作还是蛮多的，需要好好讲讲！</p><h3 id="Transformation"><a href="#Transformation" class="headerlink" title="Transformation"></a>Transformation</h3><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p>这是最简单的转换之一，其中输入是一个数据流，输出的也是一个数据流：</p><p>还是拿上一篇文章的案例来将数据进行 map 转换操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SingleOutputStreamOperator&lt;Student&gt; map = student.map(<span class="keyword">new</span> MapFunction&lt;Student, Student&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">map</span><span class="params">(Student value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        s1.id = value.id;</span><br><span class="line">        s1.name = value.name;</span><br><span class="line">        s1.password = value.password;</span><br><span class="line">        s1.age = value.age + <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">return</span> s1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">map.print();</span><br></pre></td></tr></table></figure><p>将每个人的年龄都增加 5 岁，其他不变。</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwwfyjd5x0j31kw0zkqk9.jpg" alt=""></p><h4 id="FlatMap"><a href="#FlatMap" class="headerlink" title="FlatMap"></a>FlatMap</h4><p>FlatMap 采用一条记录并输出零个，一个或多个记录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SingleOutputStreamOperator&lt;Student&gt; flatMap = student.flatMap(<span class="keyword">new</span> FlatMapFunction&lt;Student, Student&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(Student value, Collector&lt;Student&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value.id % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            out.collect(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">flatMap.print();</span><br></pre></td></tr></table></figure><p>这里将 id 为偶数的聚集出来。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwwgjsk84vj31kw0zkh43.jpg" alt=""></p><h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><p>Filter 函数根据条件判断出结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SingleOutputStreamOperator&lt;Student&gt; filter = student.filter(<span class="keyword">new</span> FilterFunction&lt;Student&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(Student value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value.id &gt; <span class="number">95</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">filter.print();</span><br></pre></td></tr></table></figure><p>这里将 id 大于 95 的过滤出来，然后打印出来。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fwwgt9xud1j31kw0zktnh.jpg" alt=""></p><h4 id="KeyBy"><a href="#KeyBy" class="headerlink" title="KeyBy"></a>KeyBy</h4><p>KeyBy 在逻辑上是基于 key 对流进行分区。在内部，它使用 hash 函数对流进行分区。它返回 KeyedDataStream 数据流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">KeyedStream&lt;Student, Integer&gt; keyBy = student.keyBy(<span class="keyword">new</span> KeySelector&lt;Student, Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getKey</span><span class="params">(Student value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">keyBy.print();</span><br></pre></td></tr></table></figure><p>上面对 student 的 age 做 KeyBy 操作分区</p><h4 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h4><p>Reduce 返回单个的结果值，并且 reduce 操作每处理一个元素总是创建一个新值。常用的方法有 average, sum, min, max, count，使用 reduce 方法都可实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SingleOutputStreamOperator&lt;Student&gt; reduce = student.keyBy(<span class="keyword">new</span> KeySelector&lt;Student, Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getKey</span><span class="params">(Student value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).reduce(<span class="keyword">new</span> ReduceFunction&lt;Student&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">reduce</span><span class="params">(Student value1, Student value2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student student1 = <span class="keyword">new</span> Student();</span><br><span class="line">        student1.name = value1.name + value2.name;</span><br><span class="line">        student1.id = (value1.id + value2.id) / <span class="number">2</span>;</span><br><span class="line">        student1.password = value1.password + value2.password;</span><br><span class="line">        student1.age = (value1.age + value2.age) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> student1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">reduce.print();</span><br></pre></td></tr></table></figure><p>上面先将数据流进行 keyby 操作，因为执行 reduce 操作只能是 KeyedStream，然后将 student 对象的 age 做了一个求平均值的操作。</p><h4 id="Fold"><a href="#Fold" class="headerlink" title="Fold"></a>Fold</h4><p>Fold 通过将最后一个文件夹流与当前记录组合来推出 KeyedStream。 它会发回数据流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">KeyedStream.fold(<span class="string">"1"</span>, <span class="keyword">new</span> FoldFunction&lt;Integer, String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fold</span><span class="params">(String accumulator, Integer value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accumulator + <span class="string">"="</span> + value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Aggregations"><a href="#Aggregations" class="headerlink" title="Aggregations"></a>Aggregations</h4><p>DataStream API 支持各种聚合，例如 min，max，sum 等。 这些函数可以应用于 KeyedStream 以获得 Aggregations 聚合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">KeyedStream.sum(<span class="number">0</span>) </span><br><span class="line">KeyedStream.sum(<span class="string">"key"</span>) </span><br><span class="line">KeyedStream.min(<span class="number">0</span>) </span><br><span class="line">KeyedStream.min(<span class="string">"key"</span>) </span><br><span class="line">KeyedStream.max(<span class="number">0</span>) </span><br><span class="line">KeyedStream.max(<span class="string">"key"</span>) </span><br><span class="line">KeyedStream.minBy(<span class="number">0</span>) </span><br><span class="line">KeyedStream.minBy(<span class="string">"key"</span>) </span><br><span class="line">KeyedStream.maxBy(<span class="number">0</span>) </span><br><span class="line">KeyedStream.maxBy(<span class="string">"key"</span>)</span><br></pre></td></tr></table></figure><p>max 和 maxBy 之间的区别在于 max 返回流中的最大值，但 maxBy 返回具有最大值的键， min 和 minBy 同理。</p><h4 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h4><p>Window 函数允许按时间或其他条件对现有 KeyedStream 进行分组。 以下是以 10 秒的时间窗口聚合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inputStream.keyBy(<span class="number">0</span>).window(Time.seconds(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p>Flink 定义数据片段以便（可能）处理无限数据流。 这些切片称为窗口。 此切片有助于通过应用转换处理数据块。 要对流进行窗口化，我们需要分配一个可以进行分发的键和一个描述要对窗口化流执行哪些转换的函数</p><p>要将流切片到窗口，我们可以使用 Flink 自带的窗口分配器。 我们有选项，如 tumbling windows, sliding windows, global 和 session windows。 Flink 还允许您通过扩展 WindowAssginer 类来编写自定义窗口分配器。 这里先预留下篇文章来讲解这些不同的 windows 是如何工作的。</p><h4 id="WindowAll"><a href="#WindowAll" class="headerlink" title="WindowAll"></a>WindowAll</h4><p>windowAll 函数允许对常规数据流进行分组。 通常，这是非并行数据转换，因为它在非分区数据流上运行。</p><p>与常规数据流功能类似，我们也有窗口数据流功能。 唯一的区别是它们处理窗口数据流。 所以窗口缩小就像 Reduce 函数一样，Window fold 就像 Fold 函数一样，并且还有聚合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inputStream.keyBy(<span class="number">0</span>).windowAll(Time.seconds(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><h4 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h4><p>Union 函数将两个或多个数据流结合在一起。 这样就可以并行地组合数据流。 如果我们将一个流与自身组合，那么它会输出每个记录两次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inputStream.union(inputStream1, inputStream2, ...);</span><br></pre></td></tr></table></figure><h4 id="Window-join"><a href="#Window-join" class="headerlink" title="Window join"></a>Window join</h4><p>我们可以通过一些 key 将同一个 window 的两个数据流 join 起来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inputStream.join(inputStream1)</span><br><span class="line">           .where(<span class="number">0</span>).equalTo(<span class="number">1</span>)</span><br><span class="line">           .window(Time.seconds(<span class="number">5</span>))     </span><br><span class="line">           .apply (<span class="keyword">new</span> JoinFunction () &#123;...&#125;);</span><br></pre></td></tr></table></figure><p>以上示例是在 5 秒的窗口中连接两个流，其中第一个流的第一个属性的连接条件等于另一个流的第二个属性。</p><h4 id="Split"><a href="#Split" class="headerlink" title="Split"></a>Split</h4><p>此功能根据条件将流拆分为两个或多个流。 当您获得混合流并且您可能希望单独处理每个数据流时，可以使用此方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SplitStream&lt;Integer&gt; split = inputStream.split(<span class="keyword">new</span> OutputSelector&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;String&gt; <span class="title">select</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; output = <span class="keyword">new</span> ArrayList&lt;String&gt;(); </span><br><span class="line">        <span class="keyword">if</span> (value % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            output.add(<span class="string">"even"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            output.add(<span class="string">"odd"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h4><p>此功能允许您从拆分流中选择特定流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SplitStream&lt;Integer&gt; split;</span><br><span class="line">DataStream&lt;Integer&gt; even = split.select(<span class="string">"even"</span>); </span><br><span class="line">DataStream&lt;Integer&gt; odd = split.select(<span class="string">"odd"</span>); </span><br><span class="line">DataStream&lt;Integer&gt; all = split.select(<span class="string">"even"</span>,<span class="string">"odd"</span>);</span><br></pre></td></tr></table></figure><h4 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h4><p>Project 函数允许您从事件流中选择属性子集，并仅将所选元素发送到下一个处理流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataStream&lt;Tuple4&lt;Integer, Double, String, String&gt;&gt; in = <span class="comment">// [...] </span></span><br><span class="line">DataStream&lt;Tuple2&lt;String, String&gt;&gt; out = in.project(<span class="number">3</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>上述函数从给定记录中选择属性号 2 和 3。 以下是示例输入和输出记录：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">10.0</span>,A,B)=&gt; (B,A)</span><br><span class="line">(<span class="number">2</span>,<span class="number">20.0</span>,C,D)=&gt; (D,C)</span><br></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>本文主要介绍了 Flink Data 的常用转换方式：Map、FlatMap、Filter、KeyBy、Reduce、Fold、Aggregations、Window、WindowAll、Union、Window Join、Split、Select、Project 等。并用了点简单的 demo 介绍了如何使用，具体在项目中该如何将数据流转换成我们想要的格式，还需要根据实际情况对待。</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/11/04/Flink-Data-transformation/">http://www.54tianzhisheng.cn/2018/11/04/Flink-Data-transformation/</a></p><p>另外我自己整理了些 Flink 的学习资料，目前已经全部放到微信公众号了。你可以加我的微信：zhisheng_tian，然后回复关键字：Flink 即可无条件获取到。</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fww90wfw5fj30qj0z33zt.jpg" alt=""></p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/10/13/flink-introduction/">《从0到1学习Flink》—— Apache Flink 介绍</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/09/18/flink-install">《从0到1学习Flink》—— Mac 上搭建 Flink 1.6.0 环境并构建运行简单程序入门</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/10/27/flink-config/">《从0到1学习Flink》—— Flink 配置文件详解</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/10/28/flink-sources/">《从0到1学习Flink》—— Data Source 介绍</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2018/10/30/flink-create-source/">《从0到1学习Flink》—— 如何自定义 Data Source ？</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2018/10/29/flink-sink/">《从0到1学习Flink》—— Data Sink 介绍</a></p><p>7、<a href="http://www.54tianzhisheng.cn/2018/10/31/flink-create-sink/">《从0到1学习Flink》—— 如何自定义 Data Sink ？</a></p><p>8、<a href="http://www.54tianzhisheng.cn/2018/11/04/Flink-Data-transformation/">《从0到1学习Flink》—— Flink Data transformation(转换)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwly1fx6uzoige7j31hc0zbtjz.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flink" scheme="http://www.54tianzhisheng.cn/tags/Flink/"/>
    
      <category term="大数据" scheme="http://www.54tianzhisheng.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="流式计算" scheme="http://www.54tianzhisheng.cn/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>《从0到1学习Flink》—— 如何自定义 Data Sink ？</title>
    <link href="http://www.54tianzhisheng.cn/2018/10/31/flink-create-sink/"/>
    <id>http://www.54tianzhisheng.cn/2018/10/31/flink-create-sink/</id>
    <published>2018-10-30T16:00:00.000Z</published>
    <updated>2018-11-13T15:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwuyra5n0oj31hc0zl44z.jpg" alt=""></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前篇文章 <a href="http://www.54tianzhisheng.cn/2018/10/29/flink-sink/">《从0到1学习Flink》—— Data Sink 介绍</a> 介绍了 Flink Data Sink，也介绍了 Flink 自带的 Sink，那么如何自定义自己的 Sink 呢？这篇文章将写一个 demo 教大家将从 Kafka Source 的数据 Sink 到 MySQL 中去。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>我们先来看下 Flink 从 Kafka topic 中获取数据的 demo，首先你需要安装好了 FLink 和 Kafka 。</p><p>运行启动 Flink、Zookepeer、Kafka，</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwuuz88g2oj31kw0d5gt5.jpg" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fwuv1xdaq5j31kw08zq7u.jpg" alt=""></p><p>好了，都启动了！</p><h3 id="数据库建表"><a href="#数据库建表" class="headerlink" title="数据库建表"></a>数据库建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`student`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">25</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">25</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">5</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin;</span><br></pre></td></tr></table></figure><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhisheng.flink.model;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Desc:</span></span><br><span class="line"><span class="comment"> * weixin: zhisheng_tian</span></span><br><span class="line"><span class="comment"> * blog: http://www.54tianzhisheng.cn/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String password;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String name, String password, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><p>工具类往 kafka topic student 发送数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.zhisheng.flink.model.Metric;</span><br><span class="line"><span class="keyword">import</span> com.zhisheng.flink.model.Student;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 往kafka中写数据</span></span><br><span class="line"><span class="comment"> * 可以使用这个main函数进行测试一下</span></span><br><span class="line"><span class="comment"> * weixin: zhisheng_tian</span></span><br><span class="line"><span class="comment"> * blog: http://www.54tianzhisheng.cn/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaUtils2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String broker_list = <span class="string">"localhost:9092"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String topic = <span class="string">"student"</span>;  <span class="comment">//kafka topic 需要和 flink 程序用同一个 topic</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeToKafka</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(<span class="string">"bootstrap.servers"</span>, broker_list);</span><br><span class="line">        props.put(<span class="string">"key.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        props.put(<span class="string">"value.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        KafkaProducer producer = <span class="keyword">new</span> KafkaProducer&lt;String, String&gt;(props);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            Student student = <span class="keyword">new</span> Student(i, <span class="string">"zhisheng"</span> + i, <span class="string">"password"</span> + i, <span class="number">18</span> + i);</span><br><span class="line">            ProducerRecord record = <span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(topic, <span class="keyword">null</span>, <span class="keyword">null</span>, JSON.toJSONString(student));</span><br><span class="line">            producer.send(record);</span><br><span class="line">            System.out.println(<span class="string">"发送数据: "</span> + JSON.toJSONString(student));</span><br><span class="line">        &#125;</span><br><span class="line">        producer.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        writeToKafka();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SinkToMySQL"><a href="#SinkToMySQL" class="headerlink" title="SinkToMySQL"></a>SinkToMySQL</h3><p>该类就是 Sink Function，继承了 RichSinkFunction ，然后重写了里面的方法。在 invoke 方法中将数据插入到 MySQL 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhisheng.flink.sink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhisheng.flink.model.Student;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.sink.RichSinkFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Desc:</span></span><br><span class="line"><span class="comment"> * weixin: zhisheng_tian</span></span><br><span class="line"><span class="comment"> * blog: http://www.54tianzhisheng.cn/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinkToMySQL</span> <span class="keyword">extends</span> <span class="title">RichSinkFunction</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">    PreparedStatement ps;</span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * open() 方法中建立连接，这样不用每次 invoke 的时候都要建立连接和释放连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameters</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.open(parameters);</span><br><span class="line">        connection = getConnection();</span><br><span class="line">        String sql = <span class="string">"insert into Student(id, name, password, age) values(?, ?, ?, ?);"</span>;</span><br><span class="line">        ps = <span class="keyword">this</span>.connection.prepareStatement(sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.close();</span><br><span class="line">        <span class="comment">//关闭连接和释放资源</span></span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ps.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每条数据的插入都要调用一次 invoke() 方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Student value, Context context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//组装数据，执行插入操作</span></span><br><span class="line">        ps.setInt(<span class="number">1</span>, value.getId());</span><br><span class="line">        ps.setString(<span class="number">2</span>, value.getName());</span><br><span class="line">        ps.setString(<span class="number">3</span>, value.getPassword());</span><br><span class="line">        ps.setInt(<span class="number">4</span>, value.getAge());</span><br><span class="line">        ps.executeUpdate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            con = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8"</span>, <span class="string">"root"</span>, <span class="string">"root123456"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"-----------mysql get connection has exception , msg = "</span>+ e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> con;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flink-程序"><a href="#Flink-程序" class="headerlink" title="Flink 程序"></a>Flink 程序</h3><p>这里的 source 是从 kafka 读取数据的，然后 Flink 从 Kafka 读取到数据（JSON）后用阿里 fastjson 来解析成 student 对象，然后在 addSink 中使用我们创建的 SinkToMySQL，这样就可以把数据存储到 MySQL 了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhisheng.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.zhisheng.flink.model.Student;</span><br><span class="line"><span class="keyword">import</span> com.zhisheng.flink.sink.SinkToMySQL;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.serialization.SimpleStringSchema;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStreamSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.sink.PrintSinkFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer011;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.kafka.FlinkKafkaProducer011;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Desc:</span></span><br><span class="line"><span class="comment"> * weixin: zhisheng_tian</span></span><br><span class="line"><span class="comment"> * blog: http://www.54tianzhisheng.cn/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"localhost:9092"</span>);</span><br><span class="line">        props.put(<span class="string">"zookeeper.connect"</span>, <span class="string">"localhost:2181"</span>);</span><br><span class="line">        props.put(<span class="string">"group.id"</span>, <span class="string">"metric-group"</span>);</span><br><span class="line">        props.put(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        props.put(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        props.put(<span class="string">"auto.offset.reset"</span>, <span class="string">"latest"</span>);</span><br><span class="line"></span><br><span class="line">        SingleOutputStreamOperator&lt;Student&gt; student = env.addSource(<span class="keyword">new</span> FlinkKafkaConsumer011&lt;&gt;(</span><br><span class="line">                <span class="string">"student"</span>,   <span class="comment">//这个 kafka topic 需要和上面的工具类的 topic 一致</span></span><br><span class="line">                <span class="keyword">new</span> SimpleStringSchema(),</span><br><span class="line">                props)).setParallelism(<span class="number">1</span>)</span><br><span class="line">                .map(string -&gt; JSON.parseObject(string, Student.class)); <span class="comment">//Fastjson 解析字符串成 student 对象</span></span><br><span class="line"></span><br><span class="line">        student.addSink(<span class="keyword">new</span> SinkToMySQL()); <span class="comment">//数据 sink 到 mysql</span></span><br><span class="line"></span><br><span class="line">        env.execute(<span class="string">"Flink add sink"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>运行 Flink 程序，然后再运行 KafkaUtils2.java 工具类，这样就可以了。</p><p>如果数据插入成功了，那么我们查看下我们的数据库：</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwvy09fk5rj31kw0zktpo.jpg" alt=""></p><p>数据库中已经插入了 100 条我们从 Kafka 发送的数据了。证明我们的 SinkToMySQL 起作用了。是不是很简单？</p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>怕大家不知道我的项目结构，这里发个截图看下：</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwvy1f10vqj31kw0zkh2m.jpg" alt=""></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>本文主要利用一个 demo，告诉大家如何自定义 Sink Function，将从 Kafka 的数据 Sink 到 MySQL 中，如果你项目中有其他的数据来源，你也可以换成对应的 Source，也有可能你的 Sink 是到其他的地方或者其他不同的方式，那么依旧是这个套路：继承 RichSinkFunction 抽象类，重写 invoke 方法。</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/10/31/flink-create-sink/">http://www.54tianzhisheng.cn/2018/10/31/flink-create-sink/</a></p><p>另外我自己整理了些 Flink 的学习资料，目前已经全部放到微信公众号了。你可以加我的微信：zhisheng_tian，然后回复关键字：Flink 即可无条件获取到。</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fww90wfw5fj30qj0z33zt.jpg" alt=""></p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/10/13/flink-introduction/">《从0到1学习Flink》—— Apache Flink 介绍</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/09/18/flink-install">《从0到1学习Flink》—— Mac 上搭建 Flink 1.6.0 环境并构建运行简单程序入门</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/10/27/flink-config/">《从0到1学习Flink》—— Flink 配置文件详解</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/10/28/flink-sources/">《从0到1学习Flink》—— Data Source 介绍</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2018/10/30/flink-create-source/">《从0到1学习Flink》—— 如何自定义 Data Source ？</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2018/10/29/flink-sink/">《从0到1学习Flink》—— Data Sink 介绍</a></p><p>7、<a href="http://www.54tianzhisheng.cn/2018/10/31/flink-create-sink/">《从0到1学习Flink》—— 如何自定义 Data Sink ？</a></p><p>8、<a href="http://www.54tianzhisheng.cn/2018/11/04/Flink-Data-transformation/">《从0到1学习Flink》—— Flink Data transformation(转换)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwly1fwuyra5n0oj31hc0zl44z.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flink" scheme="http://www.54tianzhisheng.cn/tags/Flink/"/>
    
      <category term="大数据" scheme="http://www.54tianzhisheng.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="流式计算" scheme="http://www.54tianzhisheng.cn/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>《从0到1学习Flink》—— 如何自定义 Data Source ？</title>
    <link href="http://www.54tianzhisheng.cn/2018/10/30/flink-create-source/"/>
    <id>http://www.54tianzhisheng.cn/2018/10/30/flink-create-source/</id>
    <published>2018-10-29T16:00:00.000Z</published>
    <updated>2018-11-13T15:39:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwuyqgvyqnj31hc19lk79.jpg" alt=""></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 <a href="http://www.54tianzhisheng.cn/2018/10/28/flink-sources/">《从0到1学习Flink》—— Data Source 介绍</a> 文章中，我给大家介绍了 Flink Data Source 以及简短的介绍了一下自定义 Data Source，这篇文章更详细的介绍下，并写一个 demo 出来让大家理解。</p><h3 id="Flink-Kafka-source"><a href="#Flink-Kafka-source" class="headerlink" title="Flink Kafka source"></a>Flink Kafka source</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>我们先来看下 Flink 从 Kafka topic 中获取数据的 demo，首先你需要安装好了 FLink 和 Kafka 。</p><p>运行启动 Flink、Zookepeer、Kafka，</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwuuz88g2oj31kw0d5gt5.jpg" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fwuv1xdaq5j31kw08zq7u.jpg" alt=""></p><p>好了，都启动了！</p><h4 id="maven-依赖"><a href="#maven-依赖" class="headerlink" title="maven 依赖"></a>maven 依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--flink java--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-streaming-java_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--flink kafka connector--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-kafka-0.11_$&#123;scala.binary.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--alibaba fastjson--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.51<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试发送数据到-kafka-topic"><a href="#测试发送数据到-kafka-topic" class="headerlink" title="测试发送数据到 kafka topic"></a>测试发送数据到 kafka topic</h4><p>实体类，Metric.java </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhisheng.flink.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Desc:</span></span><br><span class="line"><span class="comment"> * weixi: zhisheng_tian</span></span><br><span class="line"><span class="comment"> * blog: http://www.54tianzhisheng.cn/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Metric</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> timestamp;</span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; fields;</span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; tags;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Metric</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Metric</span><span class="params">(String name, <span class="keyword">long</span> timestamp, Map&lt;String, Object&gt; fields, Map&lt;String, String&gt; tags)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.timestamp = timestamp;</span><br><span class="line">        <span class="keyword">this</span>.fields = fields;</span><br><span class="line">        <span class="keyword">this</span>.tags = tags;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Metric&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", timestamp='"</span> + timestamp + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", fields="</span> + fields +</span><br><span class="line">                <span class="string">", tags="</span> + tags +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTimestamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimestamp</span><span class="params">(<span class="keyword">long</span> timestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timestamp = timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getFields</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fields;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFields</span><span class="params">(Map&lt;String, Object&gt; fields)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fields = fields;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getTags</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tags;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTags</span><span class="params">(Map&lt;String, String&gt; tags)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tags = tags;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>往 kafka 中写数据工具类：KafkaUtils.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.zhisheng.flink.model.Metric;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 往kafka中写数据</span></span><br><span class="line"><span class="comment"> * 可以使用这个main函数进行测试一下</span></span><br><span class="line"><span class="comment"> * weixin: zhisheng_tian </span></span><br><span class="line"><span class="comment"> * blog: http://www.54tianzhisheng.cn/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String broker_list = <span class="string">"localhost:9092"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String topic = <span class="string">"metric"</span>;  <span class="comment">// kafka topic，Flink 程序中需要和这个统一 </span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeToKafka</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(<span class="string">"bootstrap.servers"</span>, broker_list);</span><br><span class="line">        props.put(<span class="string">"key.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>); <span class="comment">//key 序列化</span></span><br><span class="line">        props.put(<span class="string">"value.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>); <span class="comment">//value 序列化</span></span><br><span class="line">        KafkaProducer producer = <span class="keyword">new</span> KafkaProducer&lt;String, String&gt;(props);</span><br><span class="line"></span><br><span class="line">        Metric metric = <span class="keyword">new</span> Metric();</span><br><span class="line">        metric.setTimestamp(System.currentTimeMillis());</span><br><span class="line">        metric.setName(<span class="string">"mem"</span>);</span><br><span class="line">        Map&lt;String, String&gt; tags = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Map&lt;String, Object&gt; fields = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        tags.put(<span class="string">"cluster"</span>, <span class="string">"zhisheng"</span>);</span><br><span class="line">        tags.put(<span class="string">"host_ip"</span>, <span class="string">"101.147.022.106"</span>);</span><br><span class="line"></span><br><span class="line">        fields.put(<span class="string">"used_percent"</span>, <span class="number">90</span>d);</span><br><span class="line">        fields.put(<span class="string">"max"</span>, <span class="number">27244873</span>d);</span><br><span class="line">        fields.put(<span class="string">"used"</span>, <span class="number">17244873</span>d);</span><br><span class="line">        fields.put(<span class="string">"init"</span>, <span class="number">27244873</span>d);</span><br><span class="line"></span><br><span class="line">        metric.setTags(tags);</span><br><span class="line">        metric.setFields(fields);</span><br><span class="line"></span><br><span class="line">        ProducerRecord record = <span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(topic, <span class="keyword">null</span>, <span class="keyword">null</span>, JSON.toJSONString(metric));</span><br><span class="line">        producer.send(record);</span><br><span class="line">        System.out.println(<span class="string">"发送数据: "</span> + JSON.toJSONString(metric));</span><br><span class="line"></span><br><span class="line">        producer.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">300</span>);</span><br><span class="line">            writeToKafka();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwuv8pz2dmj31kw0zk7lu.jpg" alt=""></p><p>如果出现如上图标记的，即代表能够不断的往 kafka 发送数据的。</p><h4 id="Flink-程序"><a href="#Flink-程序" class="headerlink" title="Flink 程序"></a>Flink 程序</h4><p>Main.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhisheng.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.serialization.SimpleStringSchema;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStreamSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer011;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Desc:</span></span><br><span class="line"><span class="comment"> * weixi: zhisheng_tian</span></span><br><span class="line"><span class="comment"> * blog: http://www.54tianzhisheng.cn/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"localhost:9092"</span>);</span><br><span class="line">        props.put(<span class="string">"zookeeper.connect"</span>, <span class="string">"localhost:2181"</span>);</span><br><span class="line">        props.put(<span class="string">"group.id"</span>, <span class="string">"metric-group"</span>);</span><br><span class="line">        props.put(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);  <span class="comment">//key 反序列化</span></span><br><span class="line">        props.put(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        props.put(<span class="string">"auto.offset.reset"</span>, <span class="string">"latest"</span>); <span class="comment">//value 反序列化</span></span><br><span class="line"></span><br><span class="line">        DataStreamSource&lt;String&gt; dataStreamSource = env.addSource(<span class="keyword">new</span> FlinkKafkaConsumer011&lt;&gt;(</span><br><span class="line">                <span class="string">"metric"</span>,  <span class="comment">//kafka topic</span></span><br><span class="line">                <span class="keyword">new</span> SimpleStringSchema(),  <span class="comment">// String 序列化</span></span><br><span class="line">                props)).setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        dataStreamSource.print(); <span class="comment">//把从 kafka 读取到的数据打印在控制台</span></span><br><span class="line"></span><br><span class="line">        env.execute(<span class="string">"Flink add data source"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行起来：</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwuvbauvvgj31kw0zkqso.jpg" alt=""></p><p>看到没程序，Flink 程序控制台能够源源不断的打印数据呢。</p><h3 id="自定义-Source"><a href="#自定义-Source" class="headerlink" title="自定义 Source"></a>自定义 Source</h3><p>上面就是 Flink 自带的 Kafka source，那么接下来就模仿着写一个从 MySQL 中读取数据的 Source。</p><p>首先 pom.xml 中<strong>添加 MySQL 依赖</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.34<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>数据库建表</strong>如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`student`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">25</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">25</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">5</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin;</span><br></pre></td></tr></table></figure><p><strong>插入数据</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'zhisheng01'</span>, <span class="string">'123456'</span>, <span class="string">'18'</span>), (<span class="string">'2'</span>, <span class="string">'zhisheng02'</span>, <span class="string">'123'</span>, <span class="string">'17'</span>), (<span class="string">'3'</span>, <span class="string">'zhisheng03'</span>, <span class="string">'1234'</span>, <span class="string">'18'</span>), (<span class="string">'4'</span>, <span class="string">'zhisheng04'</span>, <span class="string">'12345'</span>, <span class="string">'16'</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p><strong>新建实体类</strong>：Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhisheng.flink.model;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Desc:</span></span><br><span class="line"><span class="comment"> * weixi: zhisheng_tian</span></span><br><span class="line"><span class="comment"> * blog: http://www.54tianzhisheng.cn/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String password;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String name, String password, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>新建 Source 类</strong> SourceFromMySQL.java，该类继承 RichSourceFunction ，实现里面的 open、close、run、cancel 方法：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.zhisheng.flink.source;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhisheng.flink.model.Student;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.source.RichSourceFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Desc:</span></span><br><span class="line"><span class="comment"> * weixi: zhisheng_tian</span></span><br><span class="line"><span class="comment"> * blog: http://www.54tianzhisheng.cn/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceFromMySQL</span> <span class="keyword">extends</span> <span class="title">RichSourceFunction</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    PreparedStatement ps;</span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * open() 方法中建立连接，这样不用每次 invoke 的时候都要建立连接和释放连接。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameters</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.open(parameters);</span><br><span class="line">        connection = getConnection();</span><br><span class="line">        String sql = <span class="string">"select * from Student;"</span>;</span><br><span class="line">        ps = <span class="keyword">this</span>.connection.prepareStatement(sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 程序执行完毕就可以进行，关闭连接和释放资源的动作了</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.close();</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123; <span class="comment">//关闭连接和释放资源</span></span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ps.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DataStream 调用一次 run() 方法用来获取数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(SourceContext&lt;Student&gt; ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ResultSet resultSet = ps.executeQuery();</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">            Student student = <span class="keyword">new</span> Student(</span><br><span class="line">                    resultSet.getInt(<span class="string">"id"</span>),</span><br><span class="line">                    resultSet.getString(<span class="string">"name"</span>).trim(),</span><br><span class="line">                    resultSet.getString(<span class="string">"password"</span>).trim(),</span><br><span class="line">                    resultSet.getInt(<span class="string">"age"</span>));</span><br><span class="line">            ctx.collect(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">                con = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8"</span>, <span class="string">"root"</span>, <span class="string">"root123456"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"-----------mysql get connection has exception , msg = "</span>+ e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> con;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Flink 程序</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhisheng.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhisheng.flink.source.SourceFromMySQL;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Desc:</span></span><br><span class="line"><span class="comment"> * weixi: zhisheng_tian</span></span><br><span class="line"><span class="comment"> * blog: http://www.54tianzhisheng.cn/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        env.addSource(<span class="keyword">new</span> SourceFromMySQL()).print();</span><br><span class="line"></span><br><span class="line">        env.execute(<span class="string">"Flink add data sourc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 Flink 程序，控制台日志中可以看见打印的 student 信息。</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwuxfzfmvyj31kw0zknll.jpg" alt=""></p><h3 id="RichSourceFunction"><a href="#RichSourceFunction" class="headerlink" title="RichSourceFunction"></a>RichSourceFunction</h3><p>从上面自定义的 Source 可以看到我们继承的就是这个 RichSourceFunction 类，那么来了解一下：</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fwuxklp906j31ki122n3n.jpg" alt=""></p><p>一个抽象类，继承自 AbstractRichFunction。为实现一个 Rich SourceFunction 提供基础能力。该类的子类有三个，两个是抽象类，在此基础上提供了更具体的实现，另一个是 ContinuousFileMonitoringFunction。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fwuy2kb4w1j31kw0tcdpj.jpg" alt=""></p><ul><li>MessageAcknowledgingSourceBase ：它针对的是数据源是消息队列的场景并且提供了基于 ID 的应答机制。</li><li>MultipleIdsMessageAcknowledgingSourceBase ： 在 MessageAcknowledgingSourceBase 的基础上针对 ID 应答机制进行了更为细分的处理，支持两种 ID 应答模型：session id 和 unique message id。</li><li>ContinuousFileMonitoringFunction：这是单个（非并行）监视任务，它接受 FileInputFormat，并且根据 FileProcessingMode 和 FilePathFilter，它负责监视用户提供的路径；决定应该进一步读取和处理哪些文件；创建与这些文件对应的 FileInputSplit 拆分，将它们分配给下游任务以进行进一步处理。</li></ul><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>本文主要讲了下 Flink 使用 Kafka Source 的使用，并提供了一个 demo 教大家如何自定义 Source，从 MySQL 中读取数据，当然你也可以从其他地方读取，实现自己的数据源 source。可能平时工作会比这个更复杂，需要大家灵活应对！</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/10/30/flink-create-source/">http://www.54tianzhisheng.cn/2018/10/30/flink-create-source/</a></p><p>另外我自己整理了些 Flink 的学习资料，目前已经全部放到微信公众号了。你可以加我的微信：zhisheng_tian，然后回复关键字：Flink 即可无条件获取到。</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fww90wfw5fj30qj0z33zt.jpg" alt=""></p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/10/13/flink-introduction/">《从0到1学习Flink》—— Apache Flink 介绍</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/09/18/flink-install">《从0到1学习Flink》—— Mac 上搭建 Flink 1.6.0 环境并构建运行简单程序入门</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/10/27/flink-config/">《从0到1学习Flink》—— Flink 配置文件详解</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/10/28/flink-sources/">《从0到1学习Flink》—— Data Source 介绍</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2018/10/30/flink-create-source/">《从0到1学习Flink》—— 如何自定义 Data Source ？</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2018/10/29/flink-sink/">《从0到1学习Flink》—— Data Sink 介绍</a></p><p>7、<a href="http://www.54tianzhisheng.cn/2018/10/31/flink-create-sink/">《从0到1学习Flink》—— 如何自定义 Data Sink ？</a></p><p>8、<a href="http://www.54tianzhisheng.cn/2018/11/04/Flink-Data-transformation/">《从0到1学习Flink》—— Flink Data transformation(转换)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwly1fwuyqgvyqnj31hc19lk79.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flink" scheme="http://www.54tianzhisheng.cn/tags/Flink/"/>
    
      <category term="大数据" scheme="http://www.54tianzhisheng.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="流式计算" scheme="http://www.54tianzhisheng.cn/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>《从0到1学习Flink》—— Data Sink 介绍</title>
    <link href="http://www.54tianzhisheng.cn/2018/10/29/flink-sink/"/>
    <id>http://www.54tianzhisheng.cn/2018/10/29/flink-sink/</id>
    <published>2018-10-28T16:00:00.000Z</published>
    <updated>2018-11-13T15:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwuyp39rdsj31hc0zkdm5.jpg" alt=""></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>再上一篇文章中 <a href="http://www.54tianzhisheng.cn/2018/10/28/flink-sources/">《从0到1学习Flink》—— Data Source 介绍</a> 讲解了 Flink Data Source ，那么这里就来讲讲 Flink Data Sink 吧。</p><p>首先 Sink 的意思是：</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fwup3gne27j30w20ridk6.jpg" alt=""></p><p>大概可以猜到了吧！Data sink 有点把数据存储下来（落库）的意思。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwup8qbbsxj31580fw0sy.jpg" alt=""></p><p>如上图，Source 就是数据的来源，中间的 Compute 其实就是 Flink 干的事情，可以做一系列的操作，操作完后就把计算后的数据结果 Sink 到某个地方。（可以是 MySQL、ElasticSearch、Kafka、Cassandra 等）。这里我说下自己目前做告警这块就是把 Compute 计算后的结果 Sink 直接告警出来了（发送告警消息到钉钉群、邮件、短信等），这个 sink 的意思也不一定非得说成要把数据存储到某个地方去。其实官网用的 Connector 来形容要去的地方更合适，这个 Connector 可以有 MySQL、ElasticSearch、Kafka、Cassandra RabbitMQ 等。 </p><h3 id="Flink-Data-Sink"><a href="#Flink-Data-Sink" class="headerlink" title="Flink Data Sink"></a>Flink Data Sink</h3><p>前面文章 <a href="http://www.54tianzhisheng.cn/2018/10/28/flink-sources/">《从0到1学习Flink》—— Data Source 介绍</a> 介绍了 Flink Data Source 有哪些，这里也看看 Flink Data Sink 支持的有哪些。</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwvrzt3qvhj31kw0xgtol.jpg" alt=""></p><p>看下源码有哪些呢？</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwvsf507rtj31kw076diy.jpg" alt=""></p><p>可以看到有 Kafka、ElasticSearch、Socket、RabbitMQ、JDBC、Cassandra POJO、File、Print 等 Sink 的方式。</p><h3 id="SinkFunction"><a href="#SinkFunction" class="headerlink" title="SinkFunction"></a>SinkFunction</h3><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwvtgc8sfmj31060mqwfo.jpg" alt=""></p><p>从上图可以看到 SinkFunction 接口有 invoke 方法，它有一个 RichSinkFunction 抽象类。</p><p>上面的那些自带的 Sink 可以看到都是继承了 RichSinkFunction 抽象类，实现了其中的方法，那么我们要是自己定义自己的 Sink 的话其实也是要按照这个套路来做的。</p><p>这里就拿个较为简单的 PrintSinkFunction 源码来讲下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PublicEvolving</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintSinkFunction</span>&lt;<span class="title">IN</span>&gt; <span class="keyword">extends</span> <span class="title">RichSinkFunction</span>&lt;<span class="title">IN</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> STD_OUT = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> STD_ERR = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> target;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> PrintStream stream;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> String prefix;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Instantiates a print sink function that prints to standard out.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PrintSinkFunction</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Instantiates a print sink function that prints to standard out.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stdErr True, if the format should print to standard error instead of standard out.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PrintSinkFunction</span><span class="params">(<span class="keyword">boolean</span> stdErr)</span> </span>&#123;</span><br><span class="line">target = stdErr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTargetToStandardOut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">target = STD_OUT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTargetToStandardErr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">target = STD_ERR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.open(parameters);</span><br><span class="line">StreamingRuntimeContext context = (StreamingRuntimeContext) getRuntimeContext();</span><br><span class="line"><span class="comment">// get the target stream</span></span><br><span class="line">stream = target == STD_OUT ? System.out : System.err;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set the prefix if we have a &gt;1 parallelism</span></span><br><span class="line">prefix = (context.getNumberOfParallelSubtasks() &gt; <span class="number">1</span>) ?</span><br><span class="line">((context.getIndexOfThisSubtask() + <span class="number">1</span>) + <span class="string">"&gt; "</span>) : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(IN record)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (prefix != <span class="keyword">null</span>) &#123;</span><br><span class="line">stream.println(prefix + record.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">stream.println(record.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.stream = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">this</span>.prefix = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Print to "</span> + (target == STD_OUT ? <span class="string">"System.out"</span> : <span class="string">"System.err"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到它就是实现了 RichSinkFunction 抽象类，然后实现了 invoke 方法，这里 invoke 方法就是把记录打印出来了就是，没做其他的额外操作。</p><h3 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SingleOutputStreamOperator.addSink(<span class="keyword">new</span> PrintSinkFunction&lt;&gt;();</span><br></pre></td></tr></table></figure><p>这样就可以了，如果是其他的 Sink Function 的话需要换成对应的。</p><p>使用这个 Function 其效果就是打印从 Source 过来的数据，和直接 Source.print() 效果一样。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fwvu5uahrwj31kw0xdaph.jpg" alt=""></p><p>下篇文章我们将讲解下如何自定义自己的 Sink Function，并使用一个 demo 来教大家，让大家知道这个套路，且能够在自己工作中自定义自己需要的 Sink Function，来完成自己的工作需求。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>本文主要讲了下 Flink 的 Data Sink，并介绍了常见的 Data Sink，也看了下源码的 SinkFunction，介绍了一个简单的 Function 使用, 告诉了大家自定义 Sink Function 的套路，下篇文章带大家写个。</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/10/29/flink-sink/">http://www.54tianzhisheng.cn/2018/10/29/flink-sink/</a></p><p>另外我自己整理了些 Flink 的学习资料，目前已经全部放到微信公众号了。你可以加我的微信：zhisheng_tian，然后回复关键字：Flink 即可无条件获取到。</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fww90wfw5fj30qj0z33zt.jpg" alt=""></p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/10/13/flink-introduction/">《从0到1学习Flink》—— Apache Flink 介绍</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/09/18/flink-install">《从0到1学习Flink》—— Mac 上搭建 Flink 1.6.0 环境并构建运行简单程序入门</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/10/27/flink-config/">《从0到1学习Flink》—— Flink 配置文件详解</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/10/28/flink-sources/">《从0到1学习Flink》—— Data Source 介绍</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2018/10/30/flink-create-source/">《从0到1学习Flink》—— 如何自定义 Data Source ？</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2018/10/29/flink-sink/">《从0到1学习Flink》—— Data Sink 介绍</a></p><p>7、<a href="http://www.54tianzhisheng.cn/2018/10/31/flink-create-sink/">《从0到1学习Flink》—— 如何自定义 Data Sink ？</a></p><p>8、<a href="http://www.54tianzhisheng.cn/2018/11/04/Flink-Data-transformation/">《从0到1学习Flink》—— Flink Data transformation(转换)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwly1fwuyp39rdsj31hc0zkdm5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flink" scheme="http://www.54tianzhisheng.cn/tags/Flink/"/>
    
      <category term="大数据" scheme="http://www.54tianzhisheng.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="流式计算" scheme="http://www.54tianzhisheng.cn/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>《从0到1学习Flink》—— Data Source 介绍</title>
    <link href="http://www.54tianzhisheng.cn/2018/10/28/flink-sources/"/>
    <id>http://www.54tianzhisheng.cn/2018/10/28/flink-sources/</id>
    <published>2018-10-27T16:00:00.000Z</published>
    <updated>2018-11-13T15:40:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwo9x3xvavj31hc0zkalc.jpg" alt=""></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Data Sources 是什么呢？就字面意思其实就可以知道：数据来源。</p><p>Flink 做为一款流式计算框架，它可用来做批处理，即处理静态的数据集、历史的数据集；也可以用来做流处理，即实时的处理些实时数据流，实时的产生数据流结果，只要数据源源不断的过来，Flink 就能够一直计算下去，这个 Data Sources 就是数据的来源地。</p><p>Flink 中你可以使用 <code>StreamExecutionEnvironment.addSource(sourceFunction)</code> 来为你的程序添加数据来源。</p><p>Flink 已经提供了若干实现好了的 source functions，当然你也可以通过实现 SourceFunction 来自定义非并行的 source 或者实现 ParallelSourceFunction 接口或者扩展 RichParallelSourceFunction 来自定义并行的 source，</p><h3 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a>Flink</h3><p>StreamExecutionEnvironment 中可以使用以下几个已实现的 stream sources，</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwunb07b35j31kw16px6q.jpg" alt=""></p><p>总的来说可以分为下面几大类：</p><h4 id="基于集合"><a href="#基于集合" class="headerlink" title="基于集合"></a>基于集合</h4><p>1、fromCollection(Collection) - 从 Java 的 Java.util.Collection 创建数据流。集合中的所有元素类型必须相同。</p><p>2、fromCollection(Iterator, Class) - 从一个迭代器中创建数据流。Class 指定了该迭代器返回元素的类型。</p><p>3、fromElements(T …) - 从给定的对象序列中创建数据流。所有对象类型必须相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">DataStream&lt;Event&gt; input = env.fromElements(</span><br><span class="line"><span class="keyword">new</span> Event(<span class="number">1</span>, <span class="string">"barfoo"</span>, <span class="number">1.0</span>),</span><br><span class="line"><span class="keyword">new</span> Event(<span class="number">2</span>, <span class="string">"start"</span>, <span class="number">2.0</span>),</span><br><span class="line"><span class="keyword">new</span> Event(<span class="number">3</span>, <span class="string">"foobar"</span>, <span class="number">3.0</span>),</span><br><span class="line">...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>4、fromParallelCollection(SplittableIterator, Class) - 从一个迭代器中创建并行数据流。Class 指定了该迭代器返回元素的类型。</p><p>5、generateSequence(from, to) - 创建一个生成指定区间范围内的数字序列的并行数据流。</p><h4 id="基于文件"><a href="#基于文件" class="headerlink" title="基于文件"></a>基于文件</h4><p>1、readTextFile(path) - 读取文本文件，即符合 TextInputFormat 规范的文件，并将其作为字符串返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">DataStream&lt;String&gt; text = env.readTextFile(<span class="string">"file:///path/to/file"</span>);</span><br></pre></td></tr></table></figure><p>2、readFile(fileInputFormat, path) - 根据指定的文件输入格式读取文件（一次）。</p><p>3、readFile(fileInputFormat, path, watchType, interval, pathFilter, typeInfo) - 这是上面两个方法内部调用的方法。它根据给定的 fileInputFormat 和读取路径读取文件。根据提供的 watchType，这个 source 可以定期（每隔 interval 毫秒）监测给定路径的新数据（FileProcessingMode.PROCESS_CONTINUOUSLY），或者处理一次路径对应文件的数据并退出（FileProcessingMode.PROCESS_ONCE）。你可以通过 pathFilter 进一步排除掉需要处理的文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">DataStream&lt;MyEvent&gt; stream = env.readFile(</span><br><span class="line">        myFormat, myFilePath, FileProcessingMode.PROCESS_CONTINUOUSLY, <span class="number">100</span>,</span><br><span class="line">        FilePathFilter.createDefaultFilter(), typeInfo);</span><br></pre></td></tr></table></figure><p>实现:</p><p>在具体实现上，Flink 把文件读取过程分为两个子任务，即目录监控和数据读取。每个子任务都由单独的实体实现。目录监控由单个非并行（并行度为1）的任务执行，而数据读取由并行运行的多个任务执行。后者的并行性等于作业的并行性。单个目录监控任务的作用是扫描目录（根据 watchType 定期扫描或仅扫描一次），查找要处理的文件并把文件分割成切分片（splits），然后将这些切分片分配给下游 reader。reader 负责读取数据。每个切分片只能由一个 reader 读取，但一个 reader 可以逐个读取多个切分片。</p><p>重要注意：</p><p>如果 watchType 设置为 FileProcessingMode.PROCESS_CONTINUOUSLY，则当文件被修改时，其内容将被重新处理。这会打破“exactly-once”语义，因为在文件末尾附加数据将导致其所有内容被重新处理。</p><p>如果 watchType 设置为 FileProcessingMode.PROCESS_ONCE，则 source 仅扫描路径一次然后退出，而不等待 reader 完成文件内容的读取。当然 reader 会继续阅读，直到读取所有的文件内容。关闭 source 后就不会再有检查点。这可能导致节点故障后的恢复速度较慢，因为该作业将从最后一个检查点恢复读取。</p><h4 id="基于-Socket："><a href="#基于-Socket：" class="headerlink" title="基于 Socket："></a>基于 Socket：</h4><p>socketTextStream(String hostname, int port) - 从 socket 读取。元素可以用分隔符切分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; dataStream = env</span><br><span class="line">        .socketTextStream(<span class="string">"localhost"</span>, <span class="number">9999</span>) <span class="comment">// 监听 localhost 的 9999 端口过来的数据</span></span><br><span class="line">        .flatMap(<span class="keyword">new</span> Splitter())</span><br><span class="line">        .keyBy(<span class="number">0</span>)</span><br><span class="line">        .timeWindow(Time.seconds(<span class="number">5</span>))</span><br><span class="line">        .sum(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>这个在 <a href="http://www.54tianzhisheng.cn/2018/09/18/flink-install">《从0到1学习Flink》—— Mac 上搭建 Flink 1.6.0 环境并构建运行简单程序入门</a> 文章里用的就是基于 Socket 的 Word Count 程序。</p><h4 id="自定义："><a href="#自定义：" class="headerlink" title="自定义："></a>自定义：</h4><p>addSource - 添加一个新的 source function。例如，你可以 addSource(new FlinkKafkaConsumer011&lt;&gt;(…)) 以从 Apache Kafka 读取数据</p><p><strong>说下上面几种的特点吧</strong>：</p><p>1、基于集合：有界数据集，更偏向于本地测试用</p><p>2、基于文件：适合监听文件修改并读取其内容</p><p>3、基于 Socket：监听主机的 host port，从 Socket 中获取数据</p><p>4、自定义 addSource：大多数的场景数据都是无界的，会源源不断的过来。比如去消费 Kafka 某个 topic 上的数据，这时候就需要用到这个 addSource，可能因为用的比较多的原因吧，Flink 直接提供了 FlinkKafkaConsumer011 等类可供你直接使用。你可以去看看 FlinkKafkaConsumerBase 这个基础类，它是 Flink Kafka 消费的最根本的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">DataStream&lt;KafkaEvent&gt; input = env</span><br><span class="line">.addSource(</span><br><span class="line"><span class="keyword">new</span> FlinkKafkaConsumer011&lt;&gt;(</span><br><span class="line">parameterTool.getRequired(<span class="string">"input-topic"</span>), <span class="comment">//从参数中获取传进来的 topic </span></span><br><span class="line"><span class="keyword">new</span> KafkaEventSchema(),</span><br><span class="line">parameterTool.getProperties())</span><br><span class="line">.assignTimestampsAndWatermarks(<span class="keyword">new</span> CustomWatermarkExtractor()));</span><br></pre></td></tr></table></figure><p>Flink 目前支持如下图里面常见的 Source：</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwuo5tsgi0j31kw0ye7jt.jpg" alt=""></p><p>如果你想自己自定义自己的 Source 呢？</p><p>那么你就需要去了解一下 SourceFunction 接口了，它是所有 stream source 的根接口，它继承自一个标记接口（空接口）Function。</p><p>SourceFunction 定义了两个接口方法：</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwunmyv9ewj30uy0lodh0.jpg" alt=""></p><p>1、run ： 启动一个 source，即对接一个外部数据源然后 emit 元素形成 stream（大部分情况下会通过在该方法里运行一个 while 循环的形式来产生 stream）。</p><p>2、cancel ： 取消一个 source，也即将 run 中的循环 emit 元素的行为终止。</p><p>正常情况下，一个 SourceFunction 实现这两个接口方法就可以了。其实这两个接口方法也固定了一种实现模板。</p><p>比如，实现一个 XXXSourceFunction，那么大致的模板是这样的：(直接拿 FLink 源码的实例给你看看)</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwunrguyfej31kw0yfter.jpg" alt=""></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>本文主要讲了下 Flink 的常见 Source 有哪些并且简单的提了下如何自定义 Source。</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/10/28/flink-sources/">http://www.54tianzhisheng.cn/2018/10/28/flink-sources/</a></p><p>另外我自己整理了些 Flink 的学习资料，目前已经全部放到微信公众号了。你可以加我的微信：zhisheng_tian，然后回复关键字：Flink 即可无条件获取到。</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fww90wfw5fj30qj0z33zt.jpg" alt=""></p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/10/13/flink-introduction/">《从0到1学习Flink》—— Apache Flink 介绍</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/09/18/flink-install">《从0到1学习Flink》—— Mac 上搭建 Flink 1.6.0 环境并构建运行简单程序入门</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/10/27/flink-config/">《从0到1学习Flink》—— Flink 配置文件详解</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/10/28/flink-sources/">《从0到1学习Flink》—— Data Source 介绍</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2018/10/30/flink-create-source/">《从0到1学习Flink》—— 如何自定义 Data Source ？</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2018/10/29/flink-sink/">《从0到1学习Flink》—— Data Sink 介绍</a></p><p>7、<a href="http://www.54tianzhisheng.cn/2018/10/31/flink-create-sink/">《从0到1学习Flink》—— 如何自定义 Data Sink ？</a></p><p>8、<a href="http://www.54tianzhisheng.cn/2018/11/04/Flink-Data-transformation/">《从0到1学习Flink》—— Flink Data transformation(转换)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwly1fwo9x3xvavj31hc0zkalc.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flink" scheme="http://www.54tianzhisheng.cn/tags/Flink/"/>
    
      <category term="大数据" scheme="http://www.54tianzhisheng.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="流式计算" scheme="http://www.54tianzhisheng.cn/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>《从0到1学习Flink》—— Flink 配置文件详解</title>
    <link href="http://www.54tianzhisheng.cn/2018/10/27/flink-config/"/>
    <id>http://www.54tianzhisheng.cn/2018/10/27/flink-config/</id>
    <published>2018-10-26T16:00:00.000Z</published>
    <updated>2018-11-13T15:39:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwo0tys9m5j31hc0zfncl.jpg" alt=""></p><a id="more"></a><p>前面文章我们已经知道 Flink 是什么东西了，安装好 Flink 后，我们再来看下安装路径下的配置文件吧。</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwo1nq6751j31go0hewll.jpg" alt=""></p><p>安装目录下主要有 flink-conf.yaml 配置、日志的配置文件、zk 配置、Flink SQL Client 配置。</p><h2 id="flink-conf-yaml"><a href="#flink-conf-yaml" class="headerlink" title="flink-conf.yaml"></a>flink-conf.yaml</h2><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># jobManager 的IP地址</span><br><span class="line">jobmanager.rpc.address: localhost</span><br><span class="line"></span><br><span class="line"># JobManager 的端口号</span><br><span class="line">jobmanager.rpc.port: 6123</span><br><span class="line"></span><br><span class="line"># JobManager JVM heap 内存大小</span><br><span class="line">jobmanager.heap.size: 1024m</span><br><span class="line"></span><br><span class="line"># TaskManager JVM heap 内存大小</span><br><span class="line">taskmanager.heap.size: 1024m</span><br><span class="line"></span><br><span class="line"># 每个 TaskManager 提供的任务 slots 数量大小</span><br><span class="line"></span><br><span class="line">taskmanager.numberOfTaskSlots: 1</span><br><span class="line"></span><br><span class="line"># 程序默认并行计算的个数</span><br><span class="line">parallelism.default: 1</span><br><span class="line"></span><br><span class="line"># 文件系统来源</span><br><span class="line"># fs.default-scheme</span><br></pre></td></tr></table></figure><h3 id="高可用性配置"><a href="#高可用性配置" class="headerlink" title="高可用性配置"></a>高可用性配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 可以选择 &apos;NONE&apos; 或者 &apos;zookeeper&apos;.</span><br><span class="line"># high-availability: zookeeper</span><br><span class="line"></span><br><span class="line"># 文件系统路径，让 Flink 在高可用性设置中持久保存元数据</span><br><span class="line"># high-availability.storageDir: hdfs:///flink/ha/</span><br><span class="line"></span><br><span class="line"># zookeeper 集群中仲裁者的机器 ip 和 port 端口号</span><br><span class="line"># high-availability.zookeeper.quorum: localhost:2181</span><br><span class="line"></span><br><span class="line"># 默认是 open，如果 zookeeper security 启用了该值会更改成 creator</span><br><span class="line"># high-availability.zookeeper.client.acl: open</span><br></pre></td></tr></table></figure><h3 id="容错和检查点-配置"><a href="#容错和检查点-配置" class="headerlink" title="容错和检查点 配置"></a>容错和检查点 配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 用于存储和检查点状态</span><br><span class="line"># state.backend: filesystem</span><br><span class="line"></span><br><span class="line"># 存储检查点的数据文件和元数据的默认目录</span><br><span class="line"># state.checkpoints.dir: hdfs://namenode-host:port/flink-checkpoints</span><br><span class="line"></span><br><span class="line"># savepoints 的默认目标目录(可选)</span><br><span class="line"># state.savepoints.dir: hdfs://namenode-host:port/flink-checkpoints</span><br><span class="line"></span><br><span class="line"># 用于启用/禁用增量 checkpoints 的标志</span><br><span class="line"># state.backend.incremental: false</span><br></pre></td></tr></table></figure><h3 id="web-前端配置"><a href="#web-前端配置" class="headerlink" title="web 前端配置"></a>web 前端配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 基于 Web 的运行时监视器侦听的地址.</span><br><span class="line">#jobmanager.web.address: 0.0.0.0</span><br><span class="line"></span><br><span class="line">#  Web 的运行时监视器端口</span><br><span class="line">rest.port: 8081</span><br><span class="line"></span><br><span class="line"># 是否从基于 Web 的 jobmanager 启用作业提交</span><br><span class="line"># jobmanager.web.submit.enable: false</span><br></pre></td></tr></table></figure><h3 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># io.tmp.dirs: /tmp</span><br><span class="line"></span><br><span class="line"># 是否应在 TaskManager 启动时预先分配 TaskManager 管理的内存</span><br><span class="line"># taskmanager.memory.preallocate: false</span><br><span class="line"></span><br><span class="line"># 类加载解析顺序，是先检查用户代码 jar（“child-first”）还是应用程序类路径（“parent-first”）。 默认设置指示首先从用户代码 jar 加载类</span><br><span class="line"># classloader.resolve-order: child-first</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用于网络缓冲区的 JVM 内存的分数。 这决定了 TaskManager 可以同时拥有多少流数据交换通道以及通道缓冲的程度。 如果作业被拒绝或者您收到系统没有足够缓冲区的警告，请增加此值或下面的最小/最大值。 另请注意，“taskmanager.network.memory.min”和“taskmanager.network.memory.max”可能会覆盖此分数</span><br><span class="line"></span><br><span class="line"># taskmanager.network.memory.fraction: 0.1</span><br><span class="line"># taskmanager.network.memory.min: 67108864</span><br><span class="line"># taskmanager.network.memory.max: 1073741824</span><br></pre></td></tr></table></figure><h3 id="Flink-集群安全配置"><a href="#Flink-集群安全配置" class="headerlink" title="Flink 集群安全配置"></a>Flink 集群安全配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 指示是否从 Kerberos ticket 缓存中读取</span><br><span class="line"># security.kerberos.login.use-ticket-cache: true</span><br><span class="line"></span><br><span class="line"># 包含用户凭据的 Kerberos 密钥表文件的绝对路径</span><br><span class="line"># security.kerberos.login.keytab: /path/to/kerberos/keytab</span><br><span class="line"></span><br><span class="line"># 与 keytab 关联的 Kerberos 主体名称</span><br><span class="line"># security.kerberos.login.principal: flink-user</span><br><span class="line"></span><br><span class="line"># 以逗号分隔的登录上下文列表，用于提供 Kerberos 凭据（例如，`Client，KafkaClient`使用凭证进行 ZooKeeper 身份验证和 Kafka 身份验证）</span><br><span class="line"># security.kerberos.login.contexts: Client,KafkaClient</span><br></pre></td></tr></table></figure><h3 id="Zookeeper-安全配置"><a href="#Zookeeper-安全配置" class="headerlink" title="Zookeeper 安全配置"></a>Zookeeper 安全配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 覆盖以下配置以提供自定义 ZK 服务名称</span><br><span class="line"># zookeeper.sasl.service-name: zookeeper</span><br><span class="line"></span><br><span class="line"># 该配置必须匹配 &quot;security.kerberos.login.contexts&quot; 中的列表（含有一个）</span><br><span class="line"># zookeeper.sasl.login-context-name: Client</span><br></pre></td></tr></table></figure><h3 id="HistoryServer"><a href="#HistoryServer" class="headerlink" title="HistoryServer"></a>HistoryServer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 你可以通过 bin/historyserver.sh (start|stop) 命令启动和关闭 HistoryServer</span><br><span class="line"></span><br><span class="line"># 将已完成的作业上传到的目录</span><br><span class="line"># jobmanager.archive.fs.dir: hdfs:///completed-jobs/</span><br><span class="line"></span><br><span class="line"># 基于 Web 的 HistoryServer 的地址</span><br><span class="line"># historyserver.web.address: 0.0.0.0</span><br><span class="line"></span><br><span class="line"># 基于 Web 的 HistoryServer 的端口号</span><br><span class="line"># historyserver.web.port: 8082</span><br><span class="line"></span><br><span class="line"># 以逗号分隔的目录列表，用于监视已完成的作业</span><br><span class="line"># historyserver.archive.fs.dir: hdfs:///completed-jobs/</span><br><span class="line"></span><br><span class="line"># 刷新受监控目录的时间间隔（以毫秒为单位）</span><br><span class="line"># historyserver.archive.fs.refresh-interval: 10000</span><br></pre></td></tr></table></figure><p>查看下另外两个配置 slaves / master</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwo7pbjdsgj31jq08i76l.jpg" alt=""></p><h2 id="2、slaves"><a href="#2、slaves" class="headerlink" title="2、slaves"></a>2、slaves</h2><p>里面是每个 worker 节点的 IP/Hostname，每一个 worker 结点之后都会运行一个 TaskManager，一个一行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost</span><br></pre></td></tr></table></figure><h2 id="3、masters"><a href="#3、masters" class="headerlink" title="3、masters"></a>3、masters</h2><p>host:port </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:8081</span><br></pre></td></tr></table></figure><h2 id="4、zoo-cfg"><a href="#4、zoo-cfg" class="headerlink" title="4、zoo.cfg"></a>4、zoo.cfg</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 每个 tick 的毫秒数</span><br><span class="line">tickTime=2000</span><br><span class="line"></span><br><span class="line"># 初始同步阶段可以采用的 tick 数</span><br><span class="line">initLimit=10</span><br><span class="line"></span><br><span class="line"># 在发送请求和获取确认之间可以传递的 tick 数</span><br><span class="line">syncLimit=5</span><br><span class="line"></span><br><span class="line"># 存储快照的目录</span><br><span class="line"># dataDir=/tmp/zookeeper</span><br><span class="line"></span><br><span class="line"># 客户端将连接的端口</span><br><span class="line">clientPort=2181</span><br><span class="line"></span><br><span class="line"># ZooKeeper quorum peers</span><br><span class="line">server.1=localhost:2888:3888</span><br><span class="line"># server.2=host:peer-port:leader-port</span><br></pre></td></tr></table></figure><h2 id="5、日志配置"><a href="#5、日志配置" class="headerlink" title="5、日志配置"></a>5、日志配置</h2><p>Flink 在不同平台下运行的日志文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">log4j-cli.properties</span><br><span class="line">log4j-console.properties</span><br><span class="line">log4j-yarn-session.properties</span><br><span class="line">log4j.properties</span><br><span class="line">logback-console.xml</span><br><span class="line">logback-yarn.xml</span><br><span class="line">logback.xml</span><br></pre></td></tr></table></figure><h2 id="sql-client-defaults-yaml"><a href="#sql-client-defaults-yaml" class="headerlink" title="sql-client-defaults.yaml"></a>sql-client-defaults.yaml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">execution:</span></span><br><span class="line">  <span class="comment"># 'batch' or 'streaming' execution</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">streaming</span></span><br><span class="line">  <span class="comment"># allow 'event-time' or only 'processing-time' in sources</span></span><br><span class="line"><span class="attr">  time-characteristic:</span> <span class="string">event-time</span></span><br><span class="line">  <span class="comment"># interval in ms for emitting periodic watermarks</span></span><br><span class="line"><span class="attr">  periodic-watermarks-interval:</span> <span class="number">200</span></span><br><span class="line">  <span class="comment"># 'changelog' or 'table' presentation of results</span></span><br><span class="line"><span class="attr">  result-mode:</span> <span class="string">changelog</span></span><br><span class="line">  <span class="comment"># parallelism of the program</span></span><br><span class="line"><span class="attr">  parallelism:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># maximum parallelism</span></span><br><span class="line"><span class="attr">  max-parallelism:</span> <span class="number">128</span></span><br><span class="line">  <span class="comment"># minimum idle state retention in ms</span></span><br><span class="line"><span class="attr">  min-idle-state-retention:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># maximum idle state retention in ms</span></span><br><span class="line"><span class="attr">  max-idle-state-retention:</span> <span class="number">0</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">deployment:</span></span><br><span class="line">  <span class="comment"># general cluster communication timeout in ms</span></span><br><span class="line"><span class="attr">  response-timeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="comment"># (optional) address from cluster to gateway</span></span><br><span class="line"><span class="attr">  gateway-address:</span> <span class="string">""</span></span><br><span class="line">  <span class="comment"># (optional) port from cluster to gateway</span></span><br><span class="line"><span class="attr">  gateway-port:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Flink sql client ：你可以从官网这里了解 <a href="https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/sqlClient.html" target="_blank" rel="noopener">https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/sqlClient.html</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文拿安装目录文件下的配置文件讲解了下 Flink 目录下的所有配置。</p><p>你也可以通过官网这里学习更多：<a href="https://ci.apache.org/projects/flink/flink-docs-stable/ops/config.html" target="_blank" rel="noopener">https://ci.apache.org/projects/flink/flink-docs-stable/ops/config.html</a></p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p>本篇文章地址是：<a href="http://www.54tianzhisheng.cn/2018/10/27/flink-config/">http://www.54tianzhisheng.cn/2018/10/27/flink-config/</a></p><p>另外我自己整理了些 Flink 的学习资料，目前已经全部放到微信公众号了。你可以加我的微信：zhisheng_tian，然后回复关键字：Flink 即可无条件获取到。</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fww90wfw5fj30qj0z33zt.jpg" alt=""></p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/10/13/flink-introduction/">《从0到1学习Flink》—— Apache Flink 介绍</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/09/18/flink-install">《从0到1学习Flink》—— Mac 上搭建 Flink 1.6.0 环境并构建运行简单程序入门</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/10/27/flink-config/">《从0到1学习Flink》—— Flink 配置文件详解</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/10/28/flink-sources/">《从0到1学习Flink》—— Data Source 介绍</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2018/10/30/flink-create-source/">《从0到1学习Flink》—— 如何自定义 Data Source ？</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2018/10/29/flink-sink/">《从0到1学习Flink》—— Data Sink 介绍</a></p><p>7、<a href="http://www.54tianzhisheng.cn/2018/10/31/flink-create-sink/">《从0到1学习Flink》—— 如何自定义 Data Sink ？</a></p><p>8、<a href="http://www.54tianzhisheng.cn/2018/11/04/Flink-Data-transformation/">《从0到1学习Flink》—— Flink Data transformation(转换)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwly1fwo0tys9m5j31hc0zfncl.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flink" scheme="http://www.54tianzhisheng.cn/tags/Flink/"/>
    
      <category term="大数据" scheme="http://www.54tianzhisheng.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="流式计算" scheme="http://www.54tianzhisheng.cn/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>《从0到1学习Flink》—— Apache Flink 介绍</title>
    <link href="http://www.54tianzhisheng.cn/2018/10/13/flink-introduction/"/>
    <id>http://www.54tianzhisheng.cn/2018/10/13/flink-introduction/</id>
    <published>2018-10-12T16:00:00.000Z</published>
    <updated>2018-11-13T15:39:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fww98oig4wj31hc0zbaha.jpg" alt=""></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Flink 是一种流式计算框架，为什么我会接触到 Flink 呢？因为我目前在负责的是监控平台的告警部分，负责采集到的监控数据会直接往 kafka 里塞，然后告警这边需要从 kafka topic 里面实时读取到监控数据，并将读取到的监控数据做一些 聚合/转换/计算 等操作，然后将计算后的结果与告警规则的阈值进行比较，然后做出相应的告警措施（钉钉群、邮件、短信、电话等）。画了个简单的图如下：</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fw6mg57rkmj3192170ad6.jpg" alt="监控告警"></p><p>目前告警这块的架构是这样的结构，刚进公司那会的时候，架构是所有的监控数据直接存在 ElasticSearch 中，然后我们告警是去 ElasticSearch 中搜索我们监控指标需要的数据，幸好 ElasticSearch 的搜索能力够强大。但是你有没有发现一个问题，就是所有的监控数据从采集、采集后的数据做一些 计算/转换/聚合、再通过 Kafka 消息队列、再存进 ElasticSearch 中，再而去 ElasticSearch 中查找我们的监控数据，然后做出告警策略。整个流程对监控来说看起来很按照常理，但是对于告警来说，如果中间某个环节出了问题，比如 Kafka 消息队列延迟、监控数据存到 ElasticSearch 中写入时间较长、你的查询姿势写的不对等原因，这都将导致告警从 ElasticSearch 查到的数据是有延迟的。也许是 30 秒、一分钟、或者更长，这样对于告警来说这无疑将导致告警的消息没有任何的意义。</p><p>为什么这么说呢？为什么需要监控告警平台呢？无非就是希望我们能够尽早的发现问题，把问题给告警出来，这样开发和运维人员才能够及时的处理解决好线上的问题，以免给公司造成巨大的损失。</p><p>更何况现在还有更多的公司在做那种提前预警呢！这种又该如何做呢？需要用大数据和机器学习的技术去分析周期性的历史数据，然后根据这些数据可以整理出来某些监控指标的一些周期性（一天/七天/一月/一季度/一年）走势图，这样就大概可以绘图出来。然后根据这个走势图，可以将当前时间点的监控指标的数据使用量和走势图进行对比，在快要达到我们告警规则的阈值时，这时就可以提前告一个预警出来，让运维提前知道预警，然后提前查找问题，这样就能够提早发现问题所在，避免损失，将损失降到最小！当然，这种也是我打算做的，应该可以学到不少东西的。</p><p>于是乎，我现在就在接触流式计算框架 Flink，类似的还有常用的 Spark 等。</p><p>自己也接触了 Flink 一段时间了，这块中文资料目前书籍是只有一本很薄的，英文书籍也是三本不超过。</p><p>我自己整理了些 Flink 的学习资料，目前已经全部放到微信公众号了。你可以关注我的公众号：<strong>zhisheng</strong>，然后回复关键字：<strong>Flink</strong> 即可无条件获取到。</p><p>另外这里也推荐一些博客可以看看：</p><p>1、官网：<a href="">https://flink.apache.org/</a></p><p>2、GitHub: <a href="">https://github.com/apache/flink</a></p><p>3、<a href="">https://blog.csdn.net/column/details/apacheflink.html</a></p><p>4、<a href="">https://blog.csdn.net/lmalds/article/category/6263085</a></p><p>5、<a href="">http://wuchong.me/</a></p><p>6、<a href="">https://blog.csdn.net/liguohuabigdata/article/category/7279020</a></p><p>下面的介绍可能也有不少参考以上所有的资料，感谢他们！在介绍 Flink 前，我们先看看 <strong>数据集类型</strong> 和 <strong>数据运算模型</strong> 的种类。</p><h3 id="数据集类型有哪些呢："><a href="#数据集类型有哪些呢：" class="headerlink" title="数据集类型有哪些呢："></a>数据集类型有哪些呢：</h3><ul><li>无穷数据集：无穷的持续集成的数据集合</li><li>有界数据集：有限不会改变的数据集合</li></ul><p>那么那些常见的无穷数据集有哪些呢？</p><ul><li>用户与客户端的实时交互数据</li><li>应用实时产生的日志</li><li>金融市场的实时交易记录</li><li>…</li></ul><p>数据运算模型有哪些呢：</p><ul><li>流式：只要数据一直在产生，计算就持续地进行</li><li>批处理：在预先定义的时间内运行计算，当完成时释放计算机资源</li></ul><p>Flink 它可以处理有界的数据集、也可以处理无界的数据集、它可以流式的处理数据、也可以批量的处理数据。</p><h3 id="Flink-是什么-？"><a href="#Flink-是什么-？" class="headerlink" title="Flink 是什么 ？"></a>Flink 是什么 ？</h3><p> <img src="https://ws3.sinaimg.cn/large/006tNbRwly1fw6nryof95j31kw0uv49p.jpg" alt="flink-01"></p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fw6nty7u10j31kw0untsh.jpg" alt="flink-02"></p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fw6nu5yishj31kw0w04cm.jpg" alt="flink-03"></p><p>上面三张图转自 云邪 成都站 《Flink 技术介绍与未来展望》，侵删。</p><h3 id="从下至上，Flink-整体结构"><a href="#从下至上，Flink-整体结构" class="headerlink" title="从下至上，Flink 整体结构"></a>从下至上，Flink 整体结构</h3><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fw7kzdn54tj30lp0cu0td.jpg" alt="flink-stack-frontpage"></p><p>从下至上：</p><p>1、部署：Flink 支持本地运行、能在独立集群或者在被 YARN 或 Mesos 管理的集群上运行， 也能部署在云上。</p><p>2、运行：Flink 的核心是分布式流式数据引擎，意味着数据以一次一个事件的形式被处理。</p><p>3、API：DataStream、DataSet、Table、SQL API。</p><p>4、扩展库：Flink 还包括用于复杂事件处理，机器学习，图形处理和 Apache Storm 兼容性的专用代码库。</p><h3 id="Flink-数据流编程模型"><a href="#Flink-数据流编程模型" class="headerlink" title="Flink 数据流编程模型"></a>Flink 数据流编程模型</h3><h4 id="抽象级别"><a href="#抽象级别" class="headerlink" title="抽象级别"></a>抽象级别</h4><p>Flink 提供了不同的抽象级别以开发流式或批处理应用。</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fw7i1n19qpj318i0iwwg1.jpg" alt="2018-10-14_09-34-17"> </p><ul><li>最底层提供了有状态流。它将通过 过程函数（Process Function）嵌入到 DataStream API 中。它允许用户可以自由地处理来自一个或多个流数据的事件，并使用一致、容错的状态。除此之外，用户可以注册事件时间和处理事件回调，从而使程序可以实现复杂的计算。</li><li>DataStream / DataSet API 是 Flink 提供的核心 API ，DataSet 处理有界的数据集，DataStream 处理有界或者无界的数据流。用户可以通过各种方法（map / flatmap / window / keyby / sum / max / min / avg / join 等）将数据进行转换 / 计算。</li><li><strong>Table API</strong> 是以 <em>表</em> 为中心的声明式 DSL，其中表可能会动态变化（在表达流数据时）。Table API 提供了例如 select、project、join、group-by、aggregate 等操作，使用起来却更加简洁（代码量更少）。</li></ul><p>你可以在表与 <em>DataStream</em>/<em>DataSet</em> 之间无缝切换，也允许程序将 <em>Table API</em> 与 <em>DataStream</em> 以及 <em>DataSet</em> 混合使用。</p><ul><li>Flink 提供的最高层级的抽象是 <strong>SQL</strong> 。这一层抽象在语法与表达能力上与 <em>Table API</em> 类似，但是是以 SQL查询表达式的形式表现程序。SQL 抽象与 Table API 交互密切，同时 SQL 查询可以直接在 Table API 定义的表上执行。</li></ul><h4 id="Flink-程序与数据流结构"><a href="#Flink-程序与数据流结构" class="headerlink" title="Flink 程序与数据流结构"></a>Flink 程序与数据流结构</h4><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fw7ij4194jj31a00usq7o.jpg" alt="2018-10-14_09-51-09"></p><p>Flink 应用程序结构就是如上图所示：</p><p>1、Source: 数据源，Flink 在流处理和批处理上的 source 大概有 4 类：基于本地集合的 source、基于文件的 source、基于网络套接字的 source、自定义的 source。自定义的 source 常见的有 Apache kafka、Amazon Kinesis Streams、RabbitMQ、Twitter Streaming API、Apache NiFi 等，当然你也可以定义自己的 source。</p><p>2、Transformation：数据转换的各种操作，有 Map / FlatMap / Filter / KeyBy / Reduce / Fold / Aggregations / Window / WindowAll / Union / Window join / Split / Select / Project 等，操作很多，可以将数据转换计算成你想要的数据。</p><p>3、Sink：接收器，Flink 将转换计算后的数据发送的地点 ，你可能需要存储下来，Flink 常见的 Sink 大概有如下几类：写入文件、打印出来、写入 socket 、自定义的 sink 。自定义的 sink 常见的有 Apache kafka、RabbitMQ、MySQL、ElasticSearch、Apache Cassandra、Hadoop FileSystem 等，同理你也可以定义自己的 sink。</p><h3 id="为什么选择-Flink？"><a href="#为什么选择-Flink？" class="headerlink" title="为什么选择 Flink？"></a>为什么选择 Flink？</h3><p>Flink 是一个开源的分布式流式处理框架：</p><p>①提供准确的结果，甚至在出现无序或者延迟加载的数据的情况下。</p><p>②它是状态化的容错的，同时在维护一次完整的的应用状态时，能无缝修复错误。</p><p>③大规模运行，在上千个节点运行时有很好的吞吐量和低延迟。</p><p>更早的时候，我们讨论了数据集类型（有界 vs 无穷）和运算模型（批处理 vs 流式）的匹配。Flink 的流式计算模型启用了很多功能特性，如状态管理，处理无序数据，灵活的视窗，这些功能对于得出无穷数据集的精确结果是很重要的。</p><ul><li>Flink 保证状态化计算强一致性。”状态化“意味着应用可以维护随着时间推移已经产生的数据聚合或者，并且 Filnk 的检查点机制在一次失败的事件中一个应用状态的强一致性。</li></ul><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fw7l8wbujfj30at05d74b.jpg" alt="exactly_once_state"></p><ul><li>Flink 支持流式计算和带有事件时间语义的视窗。事件时间机制使得那些事件无序到达甚至延迟到达的数据流能够计算出精确的结果。</li></ul><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fw7l9248cwj308c024wei.jpg" alt="out_of_order_stream"></p><ul><li>除了提供数据驱动的视窗外，Flink 还支持基于时间，计数，session 等的灵活视窗。视窗能够用灵活的触发条件定制化从而达到对复杂的流传输模式的支持。Flink 的视窗使得模拟真实的创建数据的环境成为可能。</li></ul><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fw7l97x9lkj30ok06ca9x.jpg" alt="windows"></p><ul><li>Flink 的容错能力是轻量级的，允许系统保持高并发，同时在相同时间内提供强一致性保证。Flink 以零数据丢失的方式从故障中恢复，但没有考虑可靠性和延迟之间的折衷。</li></ul><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fw7l9et8bxj30cf0elt9t.jpg" alt="distributed_snapshots"></p><ul><li>Flink 能满足高并发和低延迟（计算大量数据很快）。下图显示了 Apache Flink 与 Apache Storm 在完成流数据清洗的分布式任务的性能对比。</li></ul><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fw7l9l2tp7j30t80af3zq.jpg" alt="streaming_performance"></p><ul><li>Flink 保存点提供了一个状态化的版本机制，使得能以无丢失状态和最短停机时间的方式更新应用或者回退历史数据。</li></ul><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fw7l9qnao9j30gj0a73zq.jpg" alt="savepoints"></p><ul><li>Flink 被设计成能用上千个点在大规模集群上运行。除了支持独立集群部署外，Flink 还支持 YARN 和Mesos 方式部署。</li><li>Flink 的程序内在是并行和分布式的，数据流可以被分区成 <strong>stream partitions</strong>，operators 被划分为operator subtasks; 这些 subtasks 在不同的机器或容器中分不同的线程独立运行；operator subtasks 的数量在具体的 operator 就是并行计算数，程序不同的 operator 阶段可能有不同的并行数；如下图所示，source operator 的并行数为 2，但最后的 sink operator 为1；</li></ul><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fw7l9vt5urj30jb0crtag.jpg" alt="parallel_dataflows"></p><ul><li><p>自己的内存管理</p><p>Flink 在 JVM 中提供了自己的内存管理，使其独立于 Java 的默认垃圾收集器。 它通过使用散列，索引，缓存和排序有效地进行内存管理。</p></li><li><p>丰富的库</p><p>Flink 拥有丰富的库来进行机器学习，图形处理，关系数据处理等。 由于其架构，很容易执行复杂的事件处理和警报。 </p></li></ul><h3 id="分布式运行"><a href="#分布式运行" class="headerlink" title="分布式运行"></a>分布式运行</h3><p>flink 作业提交架构流程可见下图：</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fw7ovrkditj30op0fpjsp.jpg" alt=""></p><p>1、Program Code：我们编写的 Flink 应用程序代码</p><p>2、Job Client：Job Client 不是 Flink 程序执行的内部部分，但它是任务执行的起点。 Job Client 负责接受用户的程序代码，然后创建数据流，将数据流提交给 Job Manager 以便进一步执行。 执行完成后，Job Client 将结果返回给用户</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fw96gl5l9zj30pp089dh7.jpg" alt=""></p><p>3、Job Manager：主进程（也称为作业管理器）协调和管理程序的执行。 它的主要职责包括安排任务，管理checkpoint ，故障恢复等。机器集群中至少要有一个 master，master 负责调度 task，协调 checkpoints 和容灾，高可用设置的话可以有多个 master，但要保证一个是 leader, 其他是 standby; Job Manager 包含 Actor system、Scheduler、Check pointing 三个重要的组件</p><p>4、Task Manager：从 Job Manager 处接收需要部署的 Task。Task Manager 是在 JVM 中的一个或多个线程中执行任务的工作节点。 任务执行的并行性由每个 Task Manager 上可用的任务槽决定。 每个任务代表分配给任务槽的一组资源。 例如，如果 Task Manager 有四个插槽，那么它将为每个插槽分配 25％ 的内存。 可以在任务槽中运行一个或多个线程。 同一插槽中的线程共享相同的 JVM。 同一 JVM 中的任务共享 TCP 连接和心跳消息。Task Manager 的一个 Slot 代表一个可用线程，该线程具有固定的内存，注意 Slot 只对内存隔离，没有对 CPU 隔离。默认情况下，Flink 允许子任务共享 Slot，即使它们是不同 task 的 subtask，只要它们来自相同的 job。这种共享可以有更好的资源利用率。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fw96irwzj5j30pj0c3dir.jpg" alt=""></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>本文主要讲了我接触到 Flink 的缘由，然后从数据集类型和数据运算模型开始讲起，接着介绍了下 Flink 是什么、Flink 的整体架构、提供的 API、Flink 的优点所在以及 Flink 的分布式作业运行的方式。水文一篇，希望你能够对 Flink 稍微有一点概念了。</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/10/13/flink-introduction/">http://www.54tianzhisheng.cn/2018/10/13/flink-introduction/</a></p><p>另外我自己整理了些 Flink 的学习资料，目前已经全部放到微信公众号了。你可以加我的微信：zhisheng_tian，然后回复关键字：Flink 即可无条件获取到。</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fww90wfw5fj30qj0z33zt.jpg" alt=""></p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/10/13/flink-introduction/">《从0到1学习Flink》—— Apache Flink 介绍</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/09/18/flink-install">《从0到1学习Flink》—— Mac 上搭建 Flink 1.6.0 环境并构建运行简单程序入门</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/10/27/flink-config/">《从0到1学习Flink》—— Flink 配置文件详解</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/10/28/flink-sources/">《从0到1学习Flink》—— Data Source 介绍</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2018/10/30/flink-create-source/">《从0到1学习Flink》—— 如何自定义 Data Source ？</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2018/10/29/flink-sink/">《从0到1学习Flink》—— Data Sink 介绍</a></p><p>7、<a href="http://www.54tianzhisheng.cn/2018/10/31/flink-create-sink/">《从0到1学习Flink》—— 如何自定义 Data Sink ？</a></p><p>8、<a href="http://www.54tianzhisheng.cn/2018/11/04/Flink-Data-transformation/">《从0到1学习Flink》—— Flink Data transformation(转换)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwly1fww98oig4wj31hc0zbaha.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flink" scheme="http://www.54tianzhisheng.cn/tags/Flink/"/>
    
      <category term="大数据" scheme="http://www.54tianzhisheng.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="流式计算" scheme="http://www.54tianzhisheng.cn/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>《从0到1学习Flink》—— Mac 上搭建 Flink 1.6.0 环境并构建运行简单程序入门</title>
    <link href="http://www.54tianzhisheng.cn/2018/09/18/flink-install/"/>
    <id>http://www.54tianzhisheng.cn/2018/09/18/flink-install/</id>
    <published>2018-09-17T16:00:00.000Z</published>
    <updated>2018-11-13T15:39:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fvsli4dkgzj31hc0zfass.jpg" alt="009"></p><a id="more"></a><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1、安装查看 Java 的版本号，推荐使用 Java 8。</p><h3 id="安装-Flink"><a href="#安装-Flink" class="headerlink" title="安装 Flink"></a>安装 Flink</h3><p>2、在 Mac OS X 上安装 Flink 是非常方便的。推荐通过 homebrew 来安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install apache-flink</span><br></pre></td></tr></table></figure><p>3、检查安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flink --version</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Version: 1.6.0, Commit ID: ff472b4</span><br></pre></td></tr></table></figure><p>4、启动 flink </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zhisheng@zhisheng  /usr/local/Cellar/apache-flink/1.6.0/libexec/bin  ./start-cluster.sh</span><br><span class="line">Starting cluster.</span><br><span class="line">Starting standalonesession daemon on host zhisheng.</span><br><span class="line">Starting taskexecutor daemon on host zhisheng.</span><br></pre></td></tr></table></figure><p>接着就可以进入 web 页面(<a href="http://localhost:8081/" target="_blank" rel="noopener">http://localhost:8081/</a>) 查看</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fvdtbrqnqcj31ao0iamz8.jpg" alt="1flink-web"></p><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p>1、新建一个 maven 项目</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fvdtdwzs0lj30sf0j7ae9.jpg" alt="flink-demo"></p><p>创建一个 SocketTextStreamWordCount 文件，加入以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhisheng.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.FlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStreamSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zhisheng_tian on 2018/9/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketTextStreamWordCount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//参数检查</span></span><br><span class="line">        <span class="keyword">if</span> (args.length != <span class="number">2</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"USAGE:\nSocketTextStreamWordCount &lt;hostname&gt; &lt;port&gt;"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String hostname = args[<span class="number">0</span>];</span><br><span class="line">        Integer port = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// set up the streaming execution environment</span></span><br><span class="line">        <span class="keyword">final</span> StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        DataStreamSource&lt;String&gt; stream = env.socketTextStream(hostname, port);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计数</span></span><br><span class="line">        SingleOutputStreamOperator&lt;Tuple2&lt;String, Integer&gt;&gt; sum = stream.flatMap(<span class="keyword">new</span> LineSplitter())</span><br><span class="line">                .keyBy(<span class="number">0</span>)</span><br><span class="line">                .sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        sum.print();</span><br><span class="line"></span><br><span class="line">        env.execute(<span class="string">"Java WordCount from SocketTextStream Example"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LineSplitter</span> <span class="keyword">implements</span> <span class="title">FlatMapFunction</span>&lt;<span class="title">String</span>, <span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(String s, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; collector)</span> </span>&#123;</span><br><span class="line">            String[] tokens = s.toLowerCase().split(<span class="string">"\\W+"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (String token: tokens) &#123;</span><br><span class="line">                <span class="keyword">if</span> (token.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    collector.collect(<span class="keyword">new</span> Tuple2&lt;String, Integer&gt;(token, <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着进入工程目录，使用以下命令打包。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fvdth7y4k1j31b40gxwi9.jpg" alt="2build"></p><p>然后我们开启监听 9000 端口: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -l 9000</span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fvdtiq9l78j30nd04h3yp.jpg" alt="监听"></p><p>最后进入 flink 安装目录 bin 下执行以下命令跑程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flink run -c com.zhisheng.flink.SocketTextStreamWordCount /Users/zhisheng/IdeaProjects/flink/word-count/target/original-word-count-1.0-SNAPSHOT.jar 127.0.0.1 9000</span><br></pre></td></tr></table></figure><p>注意换成你自己项目的路径。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fvdtl0aml1j31kw05hgn9.jpg" alt="4run"></p><p>执行完上述命令后，我们可以在 webUI 中看到正在运行的程序：</p><p> <img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fvdtmqzvc8j31a10d7q41.jpg" alt="5running-job"></p><p>我们可以在 nc 监听端口中输入 text，比如：</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fvdtrr7bvhj30mn08lt97.jpg" alt="nc"></p><p>然后我们通过 tail 命令看一下输出的 log 文件，来观察统计结果。进入目录 apache-flink/1.6.0/libexec/log，执行以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f flink-zhisheng-taskexecutor-0-zhisheng.out</span><br></pre></td></tr></table></figure><p> 注意：切换成你自己的路径和查看自己的目录。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fvdtw41tyoj31kw0bf0vd.jpg" alt="result"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文描述了如何在 Mac 电脑上安装 Flink，及运行它。接着通过一个简单的 Flink 程序来介绍如何构建及运行Flink 程序。</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p>转载请注明地址：<a href="http://www.54tianzhisheng.cn/2018/09/18/flink-install">http://www.54tianzhisheng.cn/2018/09/18/flink-install</a> </p><p>另外我自己整理了些 Flink 的学习资料，目前已经全部放到微信公众号了。你可以加我的微信：zhisheng_tian，然后回复关键字：Flink 即可无条件获取到。</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fww90wfw5fj30qj0z33zt.jpg" alt=""></p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/10/13/flink-introduction/">《从0到1学习Flink》—— Apache Flink 介绍</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/09/18/flink-install">《从0到1学习Flink》—— Mac 上搭建 Flink 1.6.0 环境并构建运行简单程序入门</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/10/27/flink-config/">《从0到1学习Flink》—— Flink 配置文件详解</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/10/28/flink-sources/">《从0到1学习Flink》—— Data Source 介绍</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2018/10/30/flink-create-source/">《从0到1学习Flink》—— 如何自定义 Data Source ？</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2018/10/29/flink-sink/">《从0到1学习Flink》—— Data Sink 介绍</a></p><p>7、<a href="http://www.54tianzhisheng.cn/2018/10/31/flink-create-sink/">《从0到1学习Flink》—— 如何自定义 Data Sink ？</a></p><p>8、<a href="http://www.54tianzhisheng.cn/2018/11/04/Flink-Data-transformation/">《从0到1学习Flink》—— Flink Data transformation(转换)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79ly1fvsli4dkgzj31hc0zfass.jpg&quot; alt=&quot;009&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flink" scheme="http://www.54tianzhisheng.cn/tags/Flink/"/>
    
      <category term="大数据" scheme="http://www.54tianzhisheng.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="流式计算" scheme="http://www.54tianzhisheng.cn/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Go 并发——实现协程同步的几种方式</title>
    <link href="http://www.54tianzhisheng.cn/2018/08/30/go-sync/"/>
    <id>http://www.54tianzhisheng.cn/2018/08/30/go-sync/</id>
    <published>2018-08-29T16:00:00.000Z</published>
    <updated>2018-08-30T14:04:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fus2khvi22j31hc0zfahk.jpg" alt=""></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Java 中有一系列的线程同步的方法，go 里面有 goroutine（协程），先看下下面的代码执行的结果是什么呢？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Goroutine 1"</span>)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Goroutine 2"</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行以上代码很可能看不到输出。</p><p>因为有可能这两个协程还没得到执行，主协程就已经结束了，而主协程结束时会结束所有其他协程，所以导致代码运行的结果什么都没有。</p><p>估计不少新接触 go 的童鞋都会对此郁闷😒，可能会问那么该如何等待主协程中创建的协程执行完毕之后再结束主协程呢？</p><p>下面说几种可以解决的方法：</p><h3 id="Sleep-一段时间"><a href="#Sleep-一段时间" class="headerlink" title="Sleep 一段时间"></a>Sleep 一段时间</h3><p>在 main 方法退出之前 sleep 一段时间就<strong>可能</strong>会出现结果了，如下代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Goroutine 1"</span>)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Goroutine 2"</span>)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    time.Sleep(time.Second * <span class="number">1</span>) <span class="comment">// 睡眠1秒，等待上面两个协程结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个简单的协程执行消耗的时间很短的，所以你会发现现在就有结果出现了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Goroutine 1</span><br><span class="line">Goroutine 2</span><br></pre></td></tr></table></figure><p>为什么上面我要说 “可能会出现” ？</p><p>因为 sleep 这个时间目前是设置的 1s，如果我这两个协程里面执行了很复杂的逻辑操作（时间大于 1s），那么就会发现依旧也是无结果打印出来的。</p><p>那么就可以发现这种方式得到问题所在了：<strong>我们无法确定需要睡眠多久</strong></p><p>上面那种方式有问题，go 里面其实也可以用管道来实现同步的。</p><h3 id="管道实现同步"><a href="#管道实现同步" class="headerlink" title="管道实现同步"></a>管道实现同步</h3><p>那么用管道怎么实现同步呢？show code：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    count := <span class="number">2</span> <span class="comment">// count 表示活动的协程个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Goroutine 1"</span>)</span><br><span class="line">        ch &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">// 协程结束，发出信号</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Goroutine 2"</span>)</span><br><span class="line">        ch &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">// 协程结束，发出信号</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">range</span> ch &#123;</span><br><span class="line">        <span class="comment">// 每次从ch中接收数据，表明一个活动的协程结束</span></span><br><span class="line">        count--</span><br><span class="line">        <span class="comment">// 当所有活动的协程都结束时，关闭管道</span></span><br><span class="line">        <span class="keyword">if</span> count == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="built_in">close</span>(ch)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式是一种比较完美的解决方案， goroutine / channel 它们也是在 go 里面经常搭配在一起的一对。</p><h3 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a>sync.WaitGroup</h3><p>其实 go 里面也提供了更简单的方式 —— 使用 sync.WaitGroup。</p><p>WaitGroup 顾名思义，就是用来等待一组操作完成的。WaitGroup 内部实现了一个计数器，用来记录未完成的操作个数，它提供了三个方法：</p><ul><li>Add() 用来添加计数</li><li>Done() 用来在操作结束时调用，使计数减一</li><li>Wait() 用来等待所有的操作结束，即计数变为 0，该函数会在计数不为 0 时等待，在计数为 0 时立即返回</li></ul><p>继续 show code：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">    wg.Add(<span class="number">2</span>) <span class="comment">// 因为有两个动作，所以增加2个计数</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Goroutine 1"</span>)</span><br><span class="line">        wg.Done() <span class="comment">// 操作完成，减少一个计数</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Goroutine 2"</span>)</span><br><span class="line">        wg.Done() <span class="comment">// 操作完成，减少一个计数</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    wg.Wait() <span class="comment">// 等待，直到计数为0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会发现也是可以看到运行结果的，是不是发现这种方式是很简单的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>多看别人写的代码；多想想为啥要这样写；多查自己不理解的地方；多写 demo 测试；多写文章总结。</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="zhisheng"></p><p>本文地址为：<a href="http://www.54tianzhisheng.cn/2018/08/30/go-sync/">http://www.54tianzhisheng.cn/2018/08/30/go-sync/</a> ，转载请注明原文出处！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwly1fus2khvi22j31hc0zfahk.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="GO" scheme="http://www.54tianzhisheng.cn/tags/GO/"/>
    
  </entry>
  
  <entry>
    <title>教你如何在 IDEA 远程 Debug ElasticSearch</title>
    <link href="http://www.54tianzhisheng.cn/2018/08/14/idea-remote-debug-elasticsearch/"/>
    <id>http://www.54tianzhisheng.cn/2018/08/14/idea-remote-debug-elasticsearch/</id>
    <published>2018-08-13T16:00:00.000Z</published>
    <updated>2018-10-01T04:12:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fu9jy37ktlj31hc0zkdnx.jpg" alt="007"></p><a id="more"></a><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>之前在<a href="http://www.54tianzhisheng.cn/2018/08/05/es-code01/">源码阅读环境搭建文章</a>中写过我遇到的一个问题迟迟没有解决，也一直困扰着我。问题如下，在启动的时候解决掉其他异常和报错后，最后剩下这个错误一直解决不了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2018</span>-<span class="number">08</span>-<span class="number">01</span>T09:<span class="number">44</span>:<span class="number">27</span>,<span class="number">370</span>][ERROR][o.e.b.ElasticsearchUncaughtExceptionHandler] [] fatal error in thread [main], exiting</span><br><span class="line">java.lang.NoClassDefFoundError: org/elasticsearch/plugins/ExtendedPluginsClassLoader</span><br><span class="line">    at org.elasticsearch.plugins.PluginsService.loadBundle(PluginsService.java:<span class="number">632</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.plugins.PluginsService.loadBundles(PluginsService.java:<span class="number">557</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.plugins.PluginsService.&lt;init&gt;(PluginsService.java:<span class="number">162</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:<span class="number">311</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:<span class="number">252</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.bootstrap.Bootstrap$<span class="number">5</span>.&lt;init&gt;(Bootstrap.java:<span class="number">213</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:<span class="number">213</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:<span class="number">326</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:<span class="number">136</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:<span class="number">127</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:<span class="number">86</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:<span class="number">124</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.cli.Command.main(Command.java:<span class="number">90</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:<span class="number">93</span>) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:<span class="number">86</span>) ~[main/:?]</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: org.elasticsearch.plugins.ExtendedPluginsClassLoader</span><br><span class="line">    at jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:<span class="number">582</span>) ~[?:?]</span><br><span class="line">    at jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:<span class="number">190</span>) ~[?:?]</span><br><span class="line">    at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">499</span>) ~[?:?]</span><br><span class="line">    ... <span class="number">15</span> more</span><br></pre></td></tr></table></figure><p>网上的解决办法也试了很多遍，包括自己也在 <a href="https://github.com/elastic/elasticsearch/issues/30774" target="_blank" rel="noopener">GitHub issue</a> 提问了，也没能解决。然后后面自己分享文章在掘金也发现有人和我有同样的问题。</p><p>下面讲讲另一种可以让你继续看源码的方法。</p><h3 id="远程-Debug"><a href="#远程-Debug" class="headerlink" title="远程 Debug"></a>远程 Debug</h3><p>前提条件是你之前已经把项目导入进 IDEA 了，如果你还没了解，请看之前的文章，这里不重复了。</p><h4 id="启动一个实例"><a href="#启动一个实例" class="headerlink" title="启动一个实例"></a>启动一个实例</h4><p>在你 git 拉取下的代码，切换你要阅读的分支代码后，执行下面这条命令启动一个 debug 的实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew run --debug-jvm</span><br></pre></td></tr></table></figure><p>启动等会后，就可以看到启动好后的端口号为 8000 了。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fu9gcjbddyj31dv0fd7al.jpg" alt="启动debug实例"></p><h4 id="配置-IDEA"><a href="#配置-IDEA" class="headerlink" title="配置 IDEA"></a>配置 IDEA</h4><p>新建一个远程的 debug：</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fu9gchtqvrj30v10lwgp8.jpg" alt="idea-remote"></p><p>配置如下图：</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fu9gchfmn9j30v10lwgnz.jpg" alt="remote-settings"></p><p>接下来点击 OK 就好了。</p><p>然后点击下面的 debug 图标：</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fu9gcirlstj30o107o75i.jpg" alt="debug"></p><p>启动后如下：</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fu9gddmwktj30ou09r74p.jpg" alt="2018-08-14_19-18-11"></p><p>这时就可以发现是可以把整个流程全启动了，也不会报什么错误！</p><p>流程全启动后，你会发现终端的日志都打印出来了（注意：这时不是打印在你的 IDEA 控制台）</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fu9gcgggq1j31kw0uk4qp.jpg" alt="2018-08-14_19-21-48"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>遇到问题，多思考，多搜索，多想办法解决！这样才能够不断的提升你解决问题的能力！</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>转载请务必注明文章出处为：</p><p><a href="http://www.54tianzhisheng.cn/2018/08/14/idea-remote-debug-elasticsearch/">http://www.54tianzhisheng.cn/2018/08/14/idea-remote-debug-elasticsearch/</a></p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/08/04/why-see-es-code/">渣渣菜鸡为什么要看 ElasticSearch 源码？</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/08/05/es-code01/">渣渣菜鸡的 ElasticSearch 源码解析 —— 环境搭建</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/08/11/es-code02/">渣渣菜鸡的 ElasticSearch 源码解析 —— 启动流程(上)</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/08/11/es-code03/">渣渣菜鸡的 ElasticSearch 源码解析 —— 启动流程(下)</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2017/09/08/Elasticsearch-analyzers/">Elasticsearch 系列文章（一）：Elasticsearch 默认分词器和中分分词器之间的比较及使用方法</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/">Elasticsearch 系列文章（二）：全文搜索引擎 Elasticsearch 集群搭建入门教程</a></p><p>7、<a href="http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/">Elasticsearch 系列文章（三）：ElasticSearch 集群监控</a></p><p>8、<a href="http://www.54tianzhisheng.cn/2017/10/18/ElasticSearch-nodes-metrics/">Elasticsearch 系列文章（四）：ElasticSearch 单个节点监控</a></p><p>9、<a href="http://www.54tianzhisheng.cn/2017/12/25/ELK/">Elasticsearch 系列文章（五）：ELK 实时日志分析平台环境搭建</a></p><p>10、<a href="http://www.54tianzhisheng.cn/2018/08/14/idea-remote-debug-elasticsearch/">教你如何在 IDEA 远程 Debug ElasticSearch</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/0069RVTdly1fu9jy37ktlj31hc0zkdnx.jpg&quot; alt=&quot;007&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="http://www.54tianzhisheng.cn/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>渣渣菜鸡的 ElasticSearch 源码解析 —— 启动流程（下）</title>
    <link href="http://www.54tianzhisheng.cn/2018/08/12/es-code03/"/>
    <id>http://www.54tianzhisheng.cn/2018/08/12/es-code03/</id>
    <published>2018-08-11T16:00:00.000Z</published>
    <updated>2018-08-14T13:32:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fu8gbvoubfj31hc0vlqdt.jpg" alt="006"></p><a id="more"></a><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="zhisheng"></p><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/08/12/es-code03/">http://www.54tianzhisheng.cn/2018/08/12/es-code03/</a></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p><a href="http://www.54tianzhisheng.cn/2018/08/11/es-code02/">上篇文章</a>写完了 ES 流程启动的一部分，main 方法都入口，以及创建 Elasticsearch 运行的必须环境以及相关配置，接着就是创建该环境的节点了。</p><h3 id="Node-的创建"><a href="#Node-的创建" class="headerlink" title="Node 的创建"></a>Node 的创建</h3><p>看下新建节点的代码：(代码比较多，这里是比较关键的地方，我就把注释直接写在代码上面了，实在不好拆开这段代码，300 多行代码)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(environment, Collections.emptyList()); <span class="comment">//执行下面的代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Node</span><span class="params">(<span class="keyword">final</span> Environment environment, Collection&lt;Class&lt;? extends Plugin&gt;&gt; classpathPlugins)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;Closeable&gt; resourcesToClose = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// register everything we need to release in the case of an error</span></span><br><span class="line">    <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">// use temp logger just to say we are starting. we can't use it later on because the node name might not be set</span></span><br><span class="line">        Logger logger = Loggers.getLogger(Node.class, NODE_NAME_SETTING.get(environment.settings()));</span><br><span class="line">        logger.info(<span class="string">"initializing ..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        originalSettings = environment.settings();</span><br><span class="line">        Settings tmpSettings = Settings.builder().put(environment.settings())</span><br><span class="line">            .put(Client.CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE).build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// create the node environment as soon as possible, to recover the node id and enable logging</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeEnvironment = <span class="keyword">new</span> NodeEnvironment(tmpSettings, environment); <span class="comment">//1、创建节点环境,比如节点名称,节点ID,分片信息,存储元,以及分配内存准备给节点使用</span></span><br><span class="line">            resourcesToClose.add(nodeEnvironment);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Failed to create node environment"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> hadPredefinedNodeName = NODE_NAME_SETTING.exists(tmpSettings);</span><br><span class="line">        <span class="keyword">final</span> String nodeId = nodeEnvironment.nodeId();</span><br><span class="line">        tmpSettings = addNodeNameIfNeeded(tmpSettings, nodeId);</span><br><span class="line">        <span class="keyword">final</span> Logger logger = Loggers.getLogger(Node.class, tmpSettings);</span><br><span class="line"><span class="comment">// this must be captured after the node name is possibly added to the settings</span></span><br><span class="line">        <span class="keyword">final</span> String nodeName = NODE_NAME_SETTING.get(tmpSettings);</span><br><span class="line">        <span class="keyword">if</span> (hadPredefinedNodeName == <span class="keyword">false</span>) &#123;</span><br><span class="line">            logger.info(<span class="string">"node name derived from node ID [&#123;&#125;]; set [&#123;&#125;] to override"</span>, nodeId, NODE_NAME_SETTING.getKey());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"node name [&#123;&#125;], node ID [&#123;&#125;]"</span>, nodeName, nodeId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、打印出JVM相关信息</span></span><br><span class="line">        <span class="keyword">final</span> JvmInfo jvmInfo = JvmInfo.jvmInfo();</span><br><span class="line">        logger.info(</span><br><span class="line"><span class="string">"version[&#123;&#125;], pid[&#123;&#125;], build[&#123;&#125;/&#123;&#125;/&#123;&#125;/&#123;&#125;], OS[&#123;&#125;/&#123;&#125;/&#123;&#125;], JVM[&#123;&#125;/&#123;&#125;/&#123;&#125;/&#123;&#125;]"</span>,</span><br><span class="line">            Version.displayVersion(Version.CURRENT, Build.CURRENT.isSnapshot()),</span><br><span class="line">            jvmInfo.pid(), Build.CURRENT.flavor().displayName(),</span><br><span class="line">            Build.CURRENT.type().displayName(), Build.CURRENT.shortHash(),</span><br><span class="line">            Build.CURRENT.date(), Constants.OS_NAME, Constants.OS_VERSION,</span><br><span class="line">            Constants.OS_ARCH,Constants.JVM_VENDOR,Constants.JVM_NAME,</span><br><span class="line">            Constants.JAVA_VERSION,Constants.JVM_VERSION);</span><br><span class="line">        logger.info(<span class="string">"JVM arguments &#123;&#125;"</span>, Arrays.toString(jvmInfo.getInputArguments()));</span><br><span class="line">        <span class="comment">//检查当前版本是不是 pre-release 版本（Snapshot），</span></span><br><span class="line">        warnIfPreRelease(Version.CURRENT, Build.CURRENT.isSnapshot(), logger);</span><br><span class="line">。。。</span><br><span class="line">        <span class="keyword">this</span>.pluginsService = <span class="keyword">new</span> PluginsService(tmpSettings, environment.configFile(), environment.modulesFile(), environment.pluginsFile(), classpathPlugins);   <span class="comment">//3、利用PluginsService加载相应的模块和插件</span></span><br><span class="line">        <span class="keyword">this</span>.settings = pluginsService.updatedSettings();</span><br><span class="line">        localNodeFactory = <span class="keyword">new</span> LocalNodeFactory(settings, nodeEnvironment.nodeId());</span><br><span class="line"></span><br><span class="line"><span class="comment">// create the environment based on the finalized (processed) view of the settings</span></span><br><span class="line"><span class="comment">// this is just to makes sure that people get the same settings, no matter where they ask them from</span></span><br><span class="line">        <span class="keyword">this</span>.environment = <span class="keyword">new</span> Environment(<span class="keyword">this</span>.settings, environment.configFile());</span><br><span class="line">        Environment.assertEquivalent(environment, <span class="keyword">this</span>.environment);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> List&lt;ExecutorBuilder&lt;?&gt;&gt; executorBuilders = pluginsService.getExecutorBuilders(settings);        <span class="comment">//线程池</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ThreadPool threadPool = <span class="keyword">new</span> ThreadPool(settings, executorBuilders.toArray(<span class="keyword">new</span> ExecutorBuilder[<span class="number">0</span>]));</span><br><span class="line">        resourcesToClose.add(() -&gt; ThreadPool.terminate(threadPool, <span class="number">10</span>, TimeUnit.SECONDS));</span><br><span class="line">        <span class="comment">// adds the context to the DeprecationLogger so that it does not need to be injected everywhere</span></span><br><span class="line">        DeprecationLogger.setThreadContext(threadPool.getThreadContext());</span><br><span class="line">        resourcesToClose.add(() -&gt; DeprecationLogger.removeThreadContext(threadPool.getThreadContext()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> List&lt;Setting&lt;?&gt;&gt; additionalSettings = <span class="keyword">new</span> ArrayList&lt;&gt;(pluginsService.getPluginSettings());       <span class="comment">//额外配置</span></span><br><span class="line">        <span class="keyword">final</span> List&lt;String&gt; additionalSettingsFilter = <span class="keyword">new</span> ArrayList&lt;&gt;(pluginsService.getPluginSettingsFilter());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> ExecutorBuilder&lt;?&gt; builder : threadPool.builders()) &#123;</span><br><span class="line">            <span class="comment">//4、加载一些额外配置</span></span><br><span class="line">            additionalSettings.addAll(builder.getRegisteredSettings());</span><br><span class="line">        &#125;</span><br><span class="line">        client = <span class="keyword">new</span> NodeClient(settings, threadPool);<span class="comment">//5、创建一个节点客户端                                                                                  </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6、缓存一系列模块,如NodeModule,ClusterModule,IndicesModule,ActionModule,GatewayModule,SettingsModule,RepositioriesModule，scriptModule，analysisModule</span></span><br><span class="line">        <span class="keyword">final</span> ResourceWatcherService resourceWatcherService = <span class="keyword">new</span> ResourceWatcherService(settings, threadPool);</span><br><span class="line">        <span class="keyword">final</span> ScriptModule scriptModule = <span class="keyword">new</span> ScriptModule(settings, pluginsService.filterPlugins(ScriptPlugin.class));</span><br><span class="line">        AnalysisModule analysisModule = <span class="keyword">new</span> AnalysisModule(<span class="keyword">this</span>.environment, pluginsService.filterPlugins(AnalysisPlugin.class));</span><br><span class="line">        <span class="comment">// this is as early as we can validate settings at this point. we already pass them to ScriptModule as well as ThreadPool so we might be late here already</span></span><br><span class="line">        <span class="keyword">final</span> SettingsModule settingsModule = <span class="keyword">new</span> SettingsModule(<span class="keyword">this</span>.settings, additionalSettings, additionalSettingsFilter);</span><br><span class="line">scriptModule.registerClusterSettingsListeners(settingsModule.getClusterSettings());</span><br><span class="line">        resourcesToClose.add(resourceWatcherService);</span><br><span class="line">        <span class="keyword">final</span> NetworkService networkService = <span class="keyword">new</span> NetworkService(</span><br><span class="line">  getCustomNameResolvers(pluginsService.filterPlugins(DiscoveryPlugin.class)));</span><br><span class="line">        List&lt;ClusterPlugin&gt; clusterPlugins = pluginsService.filterPlugins(ClusterPlugin.class);</span><br><span class="line">        <span class="keyword">final</span> ClusterService clusterService = <span class="keyword">new</span> ClusterService(settings, settingsModule.getClusterSettings(), threadPool,                                                      ClusterModule.getClusterStateCustomSuppliers(clusterPlugins));</span><br><span class="line">        clusterService.addStateApplier(scriptModule.getScriptService());</span><br><span class="line">        resourcesToClose.add(clusterService);</span><br><span class="line">        <span class="keyword">final</span> IngestService ingestService = <span class="keyword">new</span> IngestService(settings, threadPool, <span class="keyword">this</span>.environment,                                                  scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class));</span><br><span class="line">        <span class="keyword">final</span> DiskThresholdMonitor listener = <span class="keyword">new</span> DiskThresholdMonitor(settings, clusterService::state, clusterService.getClusterSettings(), client);</span><br><span class="line">        <span class="keyword">final</span> ClusterInfoService clusterInfoService = newClusterInfoService(settings, clusterService, threadPool, client,</span><br><span class="line">listener::onNewInfo);</span><br><span class="line">        <span class="keyword">final</span> UsageService usageService = <span class="keyword">new</span> UsageService(settings);</span><br><span class="line"></span><br><span class="line">        ModulesBuilder modules = <span class="keyword">new</span> ModulesBuilder();</span><br><span class="line"><span class="comment">// plugin modules must be added here, before others or we can get crazy injection errors...</span></span><br><span class="line">        <span class="keyword">for</span> (Module pluginModule : pluginsService.createGuiceModules()) &#123;</span><br><span class="line">            modules.add(pluginModule);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> MonitorService monitorService = <span class="keyword">new</span> MonitorService(settings, nodeEnvironment, threadPool, clusterInfoService);</span><br><span class="line">        ClusterModule clusterModule = <span class="keyword">new</span> ClusterModule(settings, clusterService, clusterPlugins, clusterInfoService);</span><br><span class="line">        modules.add(clusterModule);</span><br><span class="line">        IndicesModule indicesModule = <span class="keyword">new</span> IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));</span><br><span class="line">        modules.add(indicesModule);</span><br><span class="line"></span><br><span class="line">        SearchModule searchModule = <span class="keyword">new</span> SearchModule(settings, <span class="keyword">false</span>, pluginsService.filterPlugins(SearchPlugin.class));</span><br><span class="line">        CircuitBreakerService circuitBreakerService = createCircuitBreakerService(settingsModule.getSettings(),</span><br><span class="line">                                                                                  settingsModule.getClusterSettings());</span><br><span class="line">        resourcesToClose.add(circuitBreakerService);</span><br><span class="line">        modules.add(<span class="keyword">new</span> GatewayModule());</span><br><span class="line"></span><br><span class="line">        PageCacheRecycler pageCacheRecycler = createPageCacheRecycler(settings);</span><br><span class="line">        BigArrays bigArrays = createBigArrays(pageCacheRecycler, circuitBreakerService);</span><br><span class="line">        resourcesToClose.add(bigArrays);</span><br><span class="line">        modules.add(settingsModule);</span><br><span class="line">        List&lt;NamedWriteableRegistry.Entry&gt; namedWriteables = Stream.of(</span><br><span class="line">            NetworkModule.getNamedWriteables().stream(),</span><br><span class="line">            indicesModule.getNamedWriteables().stream(),</span><br><span class="line">            searchModule.getNamedWriteables().stream(),</span><br><span class="line">            pluginsService.filterPlugins(Plugin.class).stream()</span><br><span class="line">            .flatMap(p -&gt; p.getNamedWriteables().stream()),</span><br><span class="line">            ClusterModule.getNamedWriteables().stream())</span><br><span class="line">            .flatMap(Function.identity()).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">final</span> NamedWriteableRegistry namedWriteableRegistry = <span class="keyword">new</span> NamedWriteableRegistry(namedWriteables);</span><br><span class="line">        NamedXContentRegistry xContentRegistry = <span class="keyword">new</span> NamedXContentRegistry(Stream.of(</span><br><span class="line">            NetworkModule.getNamedXContents().stream(),</span><br><span class="line">            searchModule.getNamedXContents().stream(),</span><br><span class="line">            pluginsService.filterPlugins(Plugin.class).stream()</span><br><span class="line">            .flatMap(p -&gt; p.getNamedXContent().stream()),</span><br><span class="line">            ClusterModule.getNamedXWriteables().stream())</span><br><span class="line">.flatMap(Function.identity()).collect(toList()));</span><br><span class="line">        modules.add(<span class="keyword">new</span> RepositoriesModule(<span class="keyword">this</span>.environment, pluginsService.filterPlugins(RepositoryPlugin.class), xContentRegistry));</span><br><span class="line">        <span class="keyword">final</span> MetaStateService metaStateService = <span class="keyword">new</span> MetaStateService(settings, nodeEnvironment, xContentRegistry);</span><br><span class="line">        <span class="keyword">final</span> IndicesService indicesService = <span class="keyword">new</span> IndicesService(settings, pluginsService, nodeEnvironment, xContentRegistry,</span><br><span class="line">analysisModule.getAnalysisRegistry(),                                                                clusterModule.getIndexNameExpressionResolver(), indicesModule.getMapperRegistry(), namedWriteableRegistry,threadPool, settingsModule.getIndexScopedSettings(), circuitBreakerService, bigArrays, scriptModule.getScriptService(),client, metaStateService);</span><br><span class="line"></span><br><span class="line">        Collection&lt;Object&gt; pluginComponents = pluginsService.filterPlugins(Plugin.class).stream()</span><br><span class="line">            .flatMap(p -&gt; p.createComponents(client, clusterService, threadPool, resourceWatcherService,scriptModule.getScriptService(), xContentRegistry, environment, nodeEnvironment,namedWriteableRegistry).stream())</span><br><span class="line">.collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        ActionModule actionModule = <span class="keyword">new</span> ActionModule(<span class="keyword">false</span>, settings, clusterModule.getIndexNameExpressionResolver(),</span><br><span class="line">                                                     settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService);</span><br><span class="line">        modules.add(actionModule);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7、获取RestController,用于处理各种Elasticsearch的rest命令,如_cat,_all,_cat/health,_clusters等rest命令(Elasticsearch称之为action)</span></span><br><span class="line">        <span class="keyword">final</span> RestController restController = actionModule.getRestController();</span><br><span class="line">        <span class="keyword">final</span> NetworkModule networkModule = <span class="keyword">new</span> NetworkModule(settings, <span class="keyword">false</span>, pluginsService.filterPlugins(NetworkPlugin.class),threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, xContentRegistry,networkService, restController);</span><br><span class="line">        Collection&lt;UnaryOperator&lt;Map&lt;String, MetaData.Custom&gt;&gt;&gt; customMetaDataUpgraders =</span><br><span class="line">            pluginsService.filterPlugins(Plugin.class).stream()</span><br><span class="line">            .map(Plugin::getCustomMetaDataUpgrader)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">        Collection&lt;UnaryOperator&lt;Map&lt;String, IndexTemplateMetaData&gt;&gt;&gt; indexTemplateMetaDataUpgraders =</span><br><span class="line">            pluginsService.filterPlugins(Plugin.class).stream()</span><br><span class="line">            .map(Plugin::getIndexTemplateMetaDataUpgrader)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">        Collection&lt;UnaryOperator&lt;IndexMetaData&gt;&gt; indexMetaDataUpgraders = pluginsService.filterPlugins(Plugin.class).stream()</span><br><span class="line">            .map(Plugin::getIndexMetaDataUpgrader).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">final</span> MetaDataUpgrader metaDataUpgrader = <span class="keyword">new</span> MetaDataUpgrader(customMetaDataUpgraders, indexTemplateMetaDataUpgraders);</span><br><span class="line">        <span class="keyword">final</span> MetaDataIndexUpgradeService metaDataIndexUpgradeService = <span class="keyword">new</span> MetaDataIndexUpgradeService(settings, xContentRegistry,                                                                                            indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), indexMetaDataUpgraders);</span><br><span class="line">        <span class="keyword">final</span> GatewayMetaState gatewayMetaState = <span class="keyword">new</span> GatewayMetaState(settings, nodeEnvironment, metaStateService,                                                      metaDataIndexUpgradeService, metaDataUpgrader);</span><br><span class="line">        <span class="keyword">new</span> TemplateUpgradeService(settings, client, clusterService, threadPool, indexTemplateMetaDataUpgraders);</span><br><span class="line">        <span class="keyword">final</span> Transport transport = networkModule.getTransportSupplier().get();</span><br><span class="line">        Set&lt;String&gt; taskHeaders = Stream.concat(</span><br><span class="line">            pluginsService.filterPlugins(ActionPlugin.class).stream().flatMap(p -&gt; p.getTaskHeaders().stream()),</span><br><span class="line">            Stream.of(<span class="string">"X-Opaque-Id"</span>)</span><br><span class="line">        ).collect(Collectors.toSet());</span><br><span class="line">        <span class="keyword">final</span> TransportService transportService = newTransportService(settings, transport, threadPool,</span><br><span class="line">                                                                      networkModule.getTransportInterceptor(), localNodeFactory, settingsModule.getClusterSettings(), taskHeaders);</span><br><span class="line">        <span class="keyword">final</span> ResponseCollectorService responseCollectorService = <span class="keyword">new</span> ResponseCollectorService(<span class="keyword">this</span>.settings, clusterService);</span><br><span class="line">        <span class="keyword">final</span> SearchTransportService searchTransportService =  <span class="keyword">new</span> SearchTransportService(settings, transportService,</span><br><span class="line">                                                                                          SearchExecutionStatsCollector.makeWrapper(responseCollectorService));</span><br><span class="line">        <span class="keyword">final</span> Consumer&lt;Binder&gt; httpBind;</span><br><span class="line">        <span class="keyword">final</span> HttpServerTransport httpServerTransport;</span><br><span class="line">        <span class="keyword">if</span> (networkModule.isHttpEnabled()) &#123;</span><br><span class="line">            httpServerTransport = networkModule.getHttpServerTransportSupplier().get();</span><br><span class="line">            httpBind = b -&gt; &#123;</span><br><span class="line">b.bind(HttpServerTransport.class).toInstance(httpServerTransport);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            httpBind = b -&gt; &#123;</span><br><span class="line">                b.bind(HttpServerTransport.class).toProvider(Providers.of(<span class="keyword">null</span>));</span><br><span class="line">            &#125;;</span><br><span class="line">            httpServerTransport = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> DiscoveryModule discoveryModule = <span class="keyword">new</span> DiscoveryModule(<span class="keyword">this</span>.settings, threadPool, transportService, namedWriteableRegistry,networkService, clusterService.getMasterService(), clusterService.getClusterApplierService(),clusterService.getClusterSettings(), pluginsService.filterPlugins(DiscoveryPlugin.class),clusterModule.getAllocationService());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.nodeService = <span class="keyword">new</span> NodeService(settings, threadPool, monitorService, discoveryModule.getDiscovery(),transportService, indicesService, pluginsService, circuitBreakerService, scriptModule.getScriptService(),httpServerTransport, ingestService, clusterService, settingsModule.getSettingsFilter(), responseCollectorService,searchTransportService);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> SearchService searchService = newSearchService(clusterService, indicesService, threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase(),responseCollectorService);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> List&lt;PersistentTasksExecutor&lt;?&gt;&gt; tasksExecutors = pluginsService</span><br><span class="line">            .filterPlugins(PersistentTaskPlugin.class).stream()</span><br><span class="line">     .map(p -&gt; p.getPersistentTasksExecutor(clusterService, threadPool, client))</span><br><span class="line">            .flatMap(List::stream)</span><br><span class="line">            .collect(toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> PersistentTasksExecutorRegistry registry = <span class="keyword">new</span> PersistentTasksExecutorRegistry(settings, tasksExecutors);</span><br><span class="line">        <span class="keyword">final</span> PersistentTasksClusterService persistentTasksClusterService =</span><br><span class="line">            <span class="keyword">new</span> PersistentTasksClusterService(settings, registry, clusterService);</span><br><span class="line">        <span class="keyword">final</span> PersistentTasksService persistentTasksService = <span class="keyword">new</span> PersistentTasksService(settings, clusterService, threadPool, client);</span><br><span class="line"></span><br><span class="line"><span class="comment">//8、绑定处理各种服务的实例,这里是最核心的地方,也是Elasticsearch能处理各种服务的核心.</span></span><br><span class="line">        modules.add(b -&gt; &#123;</span><br><span class="line">            b.bind(Node.class).toInstance(<span class="keyword">this</span>);</span><br><span class="line">            b.bind(NodeService.class).toInstance(nodeService);</span><br><span class="line">            b.bind(NamedXContentRegistry.class).toInstance(xContentRegistry);</span><br><span class="line">            b.bind(PluginsService.class).toInstance(pluginsService);</span><br><span class="line">            b.bind(Client.class).toInstance(client);</span><br><span class="line">            b.bind(NodeClient.class).toInstance(client);</span><br><span class="line">            b.bind(Environment.class).toInstance(<span class="keyword">this</span>.environment);</span><br><span class="line">            b.bind(ThreadPool.class).toInstance(threadPool);</span><br><span class="line">            b.bind(NodeEnvironment.class).toInstance(nodeEnvironment);</span><br><span class="line"> b.bind(ResourceWatcherService.class).toInstance(resourceWatcherService);</span><br><span class="line">b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService);</span><br><span class="line">            b.bind(BigArrays.class).toInstance(bigArrays);</span><br><span class="line">      b.bind(ScriptService.class).toInstance(scriptModule.getScriptService());</span><br><span class="line"> b.bind(AnalysisRegistry.class).toInstance(analysisModule.getAnalysisRegistry());</span><br><span class="line">            b.bind(IngestService.class).toInstance(ingestService);</span><br><span class="line">            b.bind(UsageService.class).toInstance(usageService);</span><br><span class="line"> b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry);</span><br><span class="line">            b.bind(MetaDataUpgrader.class).toInstance(metaDataUpgrader);</span><br><span class="line">            b.bind(MetaStateService.class).toInstance(metaStateService);</span><br><span class="line">            b.bind(IndicesService.class).toInstance(indicesService);</span><br><span class="line">            b.bind(SearchService.class).toInstance(searchService);            b.bind(SearchTransportService.class).toInstance(searchTransportService);</span><br><span class="line">b.bind(SearchPhaseController.class).toInstance(<span class="keyword">new</span> SearchPhaseController(settings, searchService::createReduceContext));</span><br><span class="line">            b.bind(Transport.class).toInstance(transport);</span><br><span class="line">            b.bind(TransportService.class).toInstance(transportService);</span><br><span class="line">            b.bind(NetworkService.class).toInstance(networkService);</span><br><span class="line">            b.bind(UpdateHelper.class).toInstance(<span class="keyword">new</span> UpdateHelper(settings, scriptModule.getScriptService()));</span><br><span class="line">b.bind(MetaDataIndexUpgradeService.class).toInstance(metaDataIndexUpgradeService);</span><br><span class="line">            b.bind(ClusterInfoService.class).toInstance(clusterInfoService);</span><br><span class="line">            b.bind(GatewayMetaState.class).toInstance(gatewayMetaState);</span><br><span class="line">            b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery());</span><br><span class="line">            &#123;</span><br><span class="line">                RecoverySettings recoverySettings = <span class="keyword">new</span> RecoverySettings(settings, settingsModule.getClusterSettings());</span><br><span class="line">                processRecoverySettings(settingsModule.getClusterSettings(), recoverySettings);</span><br><span class="line">                b.bind(PeerRecoverySourceService.class).toInstance(<span class="keyword">new</span> PeerRecoverySourceService(settings, transportService,</span><br><span class="line">indicesService, recoverySettings));</span><br><span class="line">                b.bind(PeerRecoveryTargetService.class).toInstance(<span class="keyword">new</span> PeerRecoveryTargetService(settings, threadPool,</span><br><span class="line">transportService, recoverySettings, clusterService));</span><br><span class="line">            &#125;</span><br><span class="line">            httpBind.accept(b);</span><br><span class="line">            pluginComponents.stream().forEach(p -&gt; b.bind((Class) p.getClass()).toInstance(p));</span><br><span class="line">b.bind(PersistentTasksService.class).toInstance(persistentTasksService);       b.bind(PersistentTasksClusterService.class).toInstance(persistentTasksClusterService);</span><br><span class="line">b.bind(PersistentTasksExecutorRegistry.class).toInstance(registry); &#125;);</span><br><span class="line">        injector = modules.createInjector();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO hack around circular dependencies problems in AllocationService</span></span><br><span class="line">clusterModule.getAllocationService().setGatewayAllocator(injector.getInstance(GatewayAllocator.class));</span><br><span class="line"></span><br><span class="line">        List&lt;LifecycleComponent&gt; pluginLifecycleComponents = pluginComponents.stream()</span><br><span class="line">            .filter(p -&gt; p <span class="keyword">instanceof</span> LifecycleComponent)</span><br><span class="line">            .map(p -&gt; (LifecycleComponent) p).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//9、利用Guice将各种模块以及服务(xxxService)注入到Elasticsearch环境中</span></span><br><span class="line">pluginLifecycleComponents.addAll(pluginsService.getGuiceServiceClasses().stream()                                     .map(injector::getInstance).collect(Collectors.toList()));</span><br><span class="line">        resourcesToClose.addAll(pluginLifecycleComponents);</span><br><span class="line">        <span class="keyword">this</span>.pluginLifecycleComponents = Collections.unmodifiableList(pluginLifecycleComponents);</span><br><span class="line">        client.initialize(injector.getInstance(<span class="keyword">new</span> Key&lt;Map&lt;GenericAction, TransportAction&gt;&gt;() &#123;&#125;), () -&gt; clusterService.localNode().getId(), transportService.getRemoteClusterService());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (NetworkModule.HTTP_ENABLED.get(settings)) &#123; <span class="comment">//如果elasticsearch.yml文件中配置了http.enabled参数(默认为true),则会初始化RestHandlers</span></span><br><span class="line">            logger.debug(<span class="string">"initializing HTTP handlers ..."</span>);</span><br><span class="line">            actionModule.initRestHandlers(() -&gt; clusterService.state().nodes()); <span class="comment">//初始化RestHandlers, 解析集群命令,如_cat/,_cat/health</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//10、初始化工作完成</span></span><br><span class="line">        logger.info(<span class="string">"initialized"</span>);</span><br><span class="line"></span><br><span class="line">        success = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ElasticsearchException(<span class="string">"failed to bind service"</span>, ex);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            IOUtils.closeWhileHandlingException(resourcesToClose);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码真的很多，这里再说下上面这么多代码主要干了什么吧：（具体是哪行代码执行的如下流程，上面代码中也标记了）</p><p>1、创建节点环境,比如节点名称,节点 ID,分片信息,存储元,以及分配内存准备给节点使用</p><p>2、打印出 JVM 相关信息</p><p>3、利用 PluginsService 加载相应的模块和插件，具体哪些模块可以去 modules 目录下查看</p><p>4、加载一些额外的配置参数</p><p>5、创建一个节点客户端</p><p>6、缓存一系列模块,如NodeModule,ClusterModule,IndicesModule,ActionModule,GatewayModule,SettingsModule,RepositioriesModule，scriptModule，analysisModule</p><p>7、获取 RestController，用于处理各种 Elasticsearch 的 rest 命令,如 _cat, _all, _cat/health, _clusters 等 rest命令</p><p>8、绑定处理各种服务的实例</p><p>9、利用 Guice 将各种模块以及服务(xxxService)注入到 Elasticsearch 环境中</p><p>10、初始化工作完成（打印日志）</p><h3 id="JarHell-报错解释"><a href="#JarHell-报错解释" class="headerlink" title="JarHell 报错解释"></a>JarHell 报错解释</h3><p>前一篇阅读源码环境搭建的文章写过用 JDK 1.8 编译 ES 源码是会遇到如下异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.elasticsearch.bootstrap.StartupException: java.lang.IllegalStateException: jar hell!</span><br></pre></td></tr></table></figure><p>这里说下就是 setup 方法中的如下代码导致的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// look for jar hell</span></span><br><span class="line">    <span class="keyword">final</span> Logger logger = ESLoggerFactory.getLogger(JarHell.class);</span><br><span class="line">    JarHell.checkJarHell(logger::debug);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException | URISyntaxException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以你如果是用 JDK 1.8 编译的，那么就需要把所有的有这块的代码给注释掉就可以编译成功的。</p><p>我自己试过用 JDK 10 编译是没有出现这里报错的。</p><h3 id="正式启动-ES-节点"><a href="#正式启动-ES-节点" class="headerlink" title="正式启动 ES 节点"></a>正式启动 ES 节点</h3><p>回到上面 Bootstrap 中的静态 init 方法中，接下来就是正式启动 elasticsearch 节点了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSTANCE.start();  <span class="comment">//调用下面的 start 方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> NodeValidationException </span>&#123;</span><br><span class="line">    node.start();                                       <span class="comment">//正式启动 Elasticsearch 节点</span></span><br><span class="line">    keepAliveThread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看看这个 start 方法里面的 <code>node.start()</code> 方法源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> NodeValidationException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!lifecycle.moveToStarted()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Logger logger = Loggers.getLogger(Node.class, NODE_NAME_SETTING.get(settings));</span><br><span class="line">    logger.info(<span class="string">"starting ..."</span>);</span><br><span class="line">    pluginLifecycleComponents.forEach(LifecycleComponent::start); </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1、利用Guice获取上述注册的各种模块以及服务</span></span><br><span class="line">    <span class="comment">//Node 的启动其实就是 node 里每个组件的启动，同样的，分别调用不同的实例的 start 方法来启动这个组件, 如下：</span></span><br><span class="line">    injector.getInstance(MappingUpdatedAction.class).setClient(client);</span><br><span class="line">    injector.getInstance(IndicesService.class).start();</span><br><span class="line">    injector.getInstance(IndicesClusterStateService.class).start();</span><br><span class="line">    injector.getInstance(SnapshotsService.class).start();</span><br><span class="line">    injector.getInstance(SnapshotShardsService.class).start();</span><br><span class="line">    injector.getInstance(RoutingService.class).start();</span><br><span class="line">    injector.getInstance(SearchService.class).start();</span><br><span class="line">    nodeService.getMonitorService().start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ClusterService clusterService = injector.getInstance(ClusterService.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> NodeConnectionsService nodeConnectionsService = injector.getInstance(NodeConnectionsService.class);</span><br><span class="line">    nodeConnectionsService.start();</span><br><span class="line">    clusterService.setNodeConnectionsService(nodeConnectionsService);</span><br><span class="line"></span><br><span class="line">    injector.getInstance(ResourceWatcherService.class).start();</span><br><span class="line">    injector.getInstance(GatewayService.class).start();</span><br><span class="line">    Discovery discovery = injector.getInstance(Discovery.class);</span><br><span class="line">    clusterService.getMasterService().setClusterStatePublisher(discovery::publish);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start the transport service now so the publish address will be added to the local disco node in ClusterService</span></span><br><span class="line">    TransportService transportService = injector.getInstance(TransportService.class);</span><br><span class="line">    transportService.getTaskManager().setTaskResultsService(injector.getInstance(TaskResultsService.class));</span><br><span class="line">    transportService.start();</span><br><span class="line">    <span class="keyword">assert</span> localNodeFactory.getNode() != <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">assert</span> transportService.getLocalNode().equals(localNodeFactory.getNode())</span><br><span class="line">        : <span class="string">"transportService has a different local node than the factory provided"</span>;</span><br><span class="line">    <span class="keyword">final</span> MetaData onDiskMetadata;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// we load the global state here (the persistent part of the cluster state stored on disk) to</span></span><br><span class="line">        <span class="comment">// pass it to the bootstrap checks to allow plugins to enforce certain preconditions based on the recovered state.</span></span><br><span class="line">        <span class="keyword">if</span> (DiscoveryNode.isMasterNode(settings) || DiscoveryNode.isDataNode(settings)) &#123;<span class="comment">//根据配置文件看当前节点是master还是data节点</span></span><br><span class="line">            onDiskMetadata = injector.getInstance(GatewayMetaState.class).loadMetaState();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            onDiskMetadata = MetaData.EMPTY_META_DATA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">assert</span> onDiskMetadata != <span class="keyword">null</span> : <span class="string">"metadata is null but shouldn't"</span>; <span class="comment">// this is never null</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UncheckedIOException(e);</span><br><span class="line">    &#125;</span><br><span class="line">    validateNodeBeforeAcceptingRequests(<span class="keyword">new</span> BootstrapContext(settings, onDiskMetadata), transportService.boundAddress(), pluginsService</span><br><span class="line">        .filterPlugins(Plugin</span><br><span class="line">        .class)</span><br><span class="line">        .stream()</span><br><span class="line">        .flatMap(p -&gt; p.getBootstrapChecks().stream()).collect(Collectors.toList()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、将当前节点加入到一个集群簇中去,并启动当前节点</span></span><br><span class="line">    clusterService.addStateApplier(transportService.getTaskManager());</span><br><span class="line">    <span class="comment">// start after transport service so the local disco is known</span></span><br><span class="line">    discovery.start(); <span class="comment">// start before cluster service so that it can set initial state on ClusterApplierService</span></span><br><span class="line">    clusterService.start();</span><br><span class="line">    <span class="keyword">assert</span> clusterService.localNode().equals(localNodeFactory.getNode())</span><br><span class="line">        : <span class="string">"clusterService has a different local node than the factory provided"</span>;</span><br><span class="line">    transportService.acceptIncomingRequests();</span><br><span class="line">    discovery.startInitialJoin();</span><br><span class="line">    <span class="comment">// tribe nodes don't have a master so we shouldn't register an observer         s</span></span><br><span class="line">    <span class="keyword">final</span> TimeValue initialStateTimeout = DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING.get(settings);</span><br><span class="line">    <span class="keyword">if</span> (initialStateTimeout.millis() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> ThreadPool thread = injector.getInstance(ThreadPool.class);</span><br><span class="line">        ClusterState clusterState = clusterService.state();</span><br><span class="line">        ClusterStateObserver observer = <span class="keyword">new</span> ClusterStateObserver(clusterState, clusterService, <span class="keyword">null</span>, logger, thread.getThreadContext());</span><br><span class="line">        <span class="keyword">if</span> (clusterState.nodes().getMasterNodeId() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            logger.debug(<span class="string">"waiting to join the cluster. timeout [&#123;&#125;]"</span>, initialStateTimeout);</span><br><span class="line">            <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">            observer.waitForNextChange(<span class="keyword">new</span> ClusterStateObserver.Listener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNewClusterState</span><span class="params">(ClusterState state)</span> </span>&#123; latch.countDown(); &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClusterServiceClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    latch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimeout</span><span class="params">(TimeValue timeout)</span> </span>&#123;</span><br><span class="line">                    logger.warn(<span class="string">"timed out while waiting for initial discovery state - timeout: &#123;&#125;"</span>,</span><br><span class="line">                        initialStateTimeout);</span><br><span class="line">                    latch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, state -&gt; state.nodes().getMasterNodeId() != <span class="keyword">null</span>, initialStateTimeout);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                latch.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ElasticsearchTimeoutException(<span class="string">"Interrupted while waiting for initial discovery state"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (NetworkModule.HTTP_ENABLED.get(settings)) &#123;</span><br><span class="line">        injector.getInstance(HttpServerTransport.class).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WRITE_PORTS_FILE_SETTING.get(settings)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (NetworkModule.HTTP_ENABLED.get(settings)) &#123;</span><br><span class="line">            HttpServerTransport http = injector.getInstance(HttpServerTransport.class);</span><br><span class="line">            writePortsFile(<span class="string">"http"</span>, http.boundAddress());</span><br><span class="line">        &#125;</span><br><span class="line">        TransportService transport = injector.getInstance(TransportService.class);</span><br><span class="line">        writePortsFile(<span class="string">"transport"</span>, transport.boundAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">"started"</span>);</span><br><span class="line"></span><br><span class="line">    pluginsService.filterPlugins(ClusterPlugin.class).forEach(ClusterPlugin::onNodeStarted);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码主要是：</p><p>1、利用 Guice 获取上述注册的各种模块以及服务，然后启动 node 里每个组件（分别调用不同的实例的 start 方法来启动）</p><p>2、打印日志（启动节点完成）</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇文章主要把大概启动流程串通了，讲了下 node 节点的创建和正式启动 ES 节点了。因为篇幅较多所以拆开成两篇，先不扣细节了，后面流程启动文章写完后我们再单一的扣细节。</p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/08/04/why-see-es-code/">渣渣菜鸡为什么要看 ElasticSearch 源码？</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/08/05/es-code01/">渣渣菜鸡的 ElasticSearch 源码解析 —— 环境搭建</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/08/11/es-code02/">渣渣菜鸡的 ElasticSearch 源码解析 —— 启动流程(上)</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/08/11/es-code03/">渣渣菜鸡的 ElasticSearch 源码解析 —— 启动流程(下)</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2017/09/08/Elasticsearch-analyzers/">Elasticsearch 系列文章（一）：Elasticsearch 默认分词器和中分分词器之间的比较及使用方法</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/">Elasticsearch 系列文章（二）：全文搜索引擎 Elasticsearch 集群搭建入门教程</a></p><p>7、<a href="http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/">Elasticsearch 系列文章（三）：ElasticSearch 集群监控</a></p><p>8、<a href="http://www.54tianzhisheng.cn/2017/10/18/ElasticSearch-nodes-metrics/">Elasticsearch 系列文章（四）：ElasticSearch 单个节点监控</a></p><p>9、<a href="http://www.54tianzhisheng.cn/2017/12/25/ELK/">Elasticsearch 系列文章（五）：ELK 实时日志分析平台环境搭建</a></p><p>10、<a href="http://www.54tianzhisheng.cn/2018/08/14/idea-remote-debug-elasticsearch/">教你如何在 IDEA 远程 Debug ElasticSearch</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwly1fu8gbvoubfj31hc0vlqdt.jpg&quot; alt=&quot;006&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="http://www.54tianzhisheng.cn/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>渣渣菜鸡的 ElasticSearch 源码解析 —— 启动流程（上）</title>
    <link href="http://www.54tianzhisheng.cn/2018/08/11/es-code02/"/>
    <id>http://www.54tianzhisheng.cn/2018/08/11/es-code02/</id>
    <published>2018-08-10T16:00:00.000Z</published>
    <updated>2018-08-14T13:33:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fu8gag9ycij31hc0w0awj.jpg" alt="005"></p><a id="more"></a><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="zhisheng"></p><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/08/11/es-code02/">http://www.54tianzhisheng.cn/2018/08/11/es-code02/</a></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>上篇文章写了 <a href="http://www.54tianzhisheng.cn/2018/08/05/es-code01/">ElasticSearch 源码解析 —— 环境搭建</a> ，其中里面说了启动 打开 server 模块下的 Elasticsearch 类：org.elasticsearch.bootstrap.Elasticsearch，运行里面的 main 函数就可以启动 ElasticSearch 了，这篇文章讲讲启动流程，因为篇幅会很多，所以分了两篇来写。</p><h3 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h3><h4 id="main-方法入口"><a href="#main-方法入口" class="headerlink" title="main 方法入口"></a>main 方法入口</h4><p>可以看到入口其实是一个 main 方法，方法里面先是检查权限，然后是一个错误日志监听器（确保在日志配置之前状态日志没有出现 error），然后是 Elasticsearch 对象的创建，然后调用了静态方法 main 方法（18 行），并把创建的对象和参数以及 Terminal 默认值传进去。静态的 main 方法里面调用 elasticsearch.main 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;         <span class="comment">//1、入口</span></span><br><span class="line">    <span class="comment">// we want the JVM to think there is a security manager installed so that if internal policy decisions that would be based on the</span></span><br><span class="line">    <span class="comment">// presence of a security manager or lack thereof act as if there is a security manager present (e.g., DNS cache policy)</span></span><br><span class="line">    System.setSecurityManager(<span class="keyword">new</span> SecurityManager() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkPermission</span><span class="params">(Permission perm)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// grant all permissions so that we can later set the security manager to the one that we want</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    LogConfigurator.registerErrorListener();                            <span class="comment">//</span></span><br><span class="line">    <span class="keyword">final</span> Elasticsearch elasticsearch = <span class="keyword">new</span> Elasticsearch();</span><br><span class="line">    <span class="keyword">int</span> status = main(args, elasticsearch, Terminal.DEFAULT); <span class="comment">//2、调用Elasticsearch.main方法</span></span><br><span class="line">    <span class="keyword">if</span> (status != ExitCodes.OK) &#123;</span><br><span class="line">        exit(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args, <span class="keyword">final</span> Elasticsearch elasticsearch, <span class="keyword">final</span> Terminal terminal)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> elasticsearch.main(args, terminal);  <span class="comment">//3、command main</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fu77z6ktl2j315i0t2myl.jpg" alt="1es01"></p><p>因为 Elasticsearch 类是继承了 EnvironmentAwareCommand  类，EnvironmentAwareCommand  类继承了 Command 类，但是 Elasticsearch 类并没有重写 main 方法，所以上面调用的 elasticsearch.main 其实是调用了 Command 的 main 方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Parses options for this command from args and executes it. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">main</span><span class="params">(String[] args, Terminal terminal)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (addShutdownHook()) &#123;                                                <span class="comment">//利用Runtime.getRuntime().addShutdownHook方法加入一个Hook，在程序退出时触发该Hook</span></span><br><span class="line">        shutdownHookThread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IOException e) &#123;</span><br><span class="line">                <span class="keyword">try</span> (</span><br><span class="line">                    StringWriter sw = <span class="keyword">new</span> StringWriter();</span><br><span class="line">                    PrintWriter pw = <span class="keyword">new</span> PrintWriter(sw)) &#123;</span><br><span class="line">                    e.printStackTrace(pw);</span><br><span class="line">                    terminal.println(sw.toString());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IOException impossible) &#123;</span><br><span class="line">                    <span class="comment">// StringWriter#close declares a checked IOException from the Closeable interface but the Javadocs for StringWriter</span></span><br><span class="line">                    <span class="comment">// say that an exception here is impossible</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(impossible);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(shutdownHookThread);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    beforeMain.run();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mainWithoutErrorHandling(args, terminal);<span class="comment">//4、mainWithoutErrorHandling</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (OptionException e) &#123;</span><br><span class="line">        printHelp(terminal);</span><br><span class="line">        terminal.println(Terminal.Verbosity.SILENT, <span class="string">"ERROR: "</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> ExitCodes.USAGE;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UserException e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.exitCode == ExitCodes.USAGE) &#123;</span><br><span class="line">            printHelp(terminal);</span><br><span class="line">        &#125;</span><br><span class="line">        terminal.println(Terminal.Verbosity.SILENT, <span class="string">"ERROR: "</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> e.exitCode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ExitCodes.OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码一开始利用一个勾子函数，在程序退出时触发该 Hook，该方法主要代码是 mainWithoutErrorHandling() 方法，然后下面的是 catch 住方法抛出的异常，方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** Executes the command, but all errors are thrown. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mainWithoutErrorHandling</span><span class="params">(String[] args, Terminal terminal)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> OptionSet options = parser.parse(args);</span><br><span class="line">    <span class="keyword">if</span> (options.has(helpOption)) &#123;</span><br><span class="line">        printHelp(terminal);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (options.has(silentOption)) &#123;</span><br><span class="line">        terminal.setVerbosity(Terminal.Verbosity.SILENT);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.has(verboseOption)) &#123;</span><br><span class="line">        terminal.setVerbosity(Terminal.Verbosity.VERBOSE);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        terminal.setVerbosity(Terminal.Verbosity.NORMAL);</span><br><span class="line">    &#125;</span><br><span class="line">    execute(terminal, options);<span class="comment">//5、执行 EnvironmentAwareCommand 中的 execute()，（重写了command里面抽象的execute方法）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码从 3 ～ 14 行是解析传进来的参数并配置 terminal，重要的 execute() 方法，执行的是 EnvironmentAwareCommand 中的 execute() （重写了 Command 类里面的抽象 execute 方法），从上面那个继承图可以看到 EnvironmentAwareCommand 继承了 Command，重写的 execute 方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Terminal terminal, OptionSet options)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Map&lt;String, String&gt; settings = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> KeyValuePair kvp : settingOption.values(options)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (kvp.value.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.USAGE, <span class="string">"setting ["</span> + kvp.key + <span class="string">"] must not be empty"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (settings.containsKey(kvp.key)) &#123;</span><br><span class="line">            <span class="keyword">final</span> String message = String.format(</span><br><span class="line">                Locale.ROOT, <span class="string">"setting [%s] already set, saw [%s] and [%s]"</span>,</span><br><span class="line">                kvp.key, settings.get(kvp.key), kvp.value);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.USAGE, message);</span><br><span class="line">        &#125;</span><br><span class="line">        settings.put(kvp.key, kvp.value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6、根据我们ide配置的 vm options 进行设置path.data、path.home、path.logs</span></span><br><span class="line">    putSystemPropertyIfSettingIsMissing(settings, <span class="string">"path.data"</span>, <span class="string">"es.path.data"</span>);</span><br><span class="line">    putSystemPropertyIfSettingIsMissing(settings, <span class="string">"path.home"</span>, <span class="string">"es.path.home"</span>);</span><br><span class="line">    putSystemPropertyIfSettingIsMissing(settings, <span class="string">"path.logs"</span>, <span class="string">"es.path.logs"</span>);</span><br><span class="line"></span><br><span class="line">    execute(terminal, options, createEnv(terminal, settings));<span class="comment">//7、先调用 createEnv 创建环境</span></span><br><span class="line">    <span class="comment">//9、执行elasticsearch的execute方法，elasticsearch中重写了EnvironmentAwareCommand中的抽象execute方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法前面是根据传参去判断配置的，如果配置为空，就会直接跳到执行 putSystemPropertyIfSettingIsMissing 方法，这里会配置三个属性：path.data、path.home、path.logs 设置 es 的 data、home、logs 目录，它这里是根据我们 ide 配置的 vm options 进行设置的，这也是为什么我们<a href="http://www.54tianzhisheng.cn/2018/08/05/es-code01/#%E7%BC%96%E8%AF%91">上篇文章</a>说的配置信息，如果不配置的话就会直接报错。下面看看 putSystemPropertyIfSettingIsMissing 方法代码里面怎么做到的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Ensure the given setting exists, reading it from system properties if not already set. */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putSystemPropertyIfSettingIsMissing</span><span class="params">(<span class="keyword">final</span> Map&lt;String, String&gt; settings, <span class="keyword">final</span> String setting, <span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String value = System.getProperty(key);<span class="comment">//获取key（es.path.data）找系统设置</span></span><br><span class="line">    <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (settings.containsKey(setting)) &#123;</span><br><span class="line">            <span class="keyword">final</span> String message =</span><br><span class="line">                String.format(</span><br><span class="line">                Locale.ROOT,</span><br><span class="line">                <span class="string">"duplicate setting [%s] found via command-line [%s] and system property [%s]"</span>,</span><br><span class="line">                setting, settings.get(setting), value);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(message);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            settings.put(setting, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行这三个方法后：</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fu77z62vazj31kw0rwwty.jpg" alt="2es02"></p><p>跳出此方法，继续看会发现 execute 方法调用了方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execute(terminal, options, createEnv(terminal, settings));</span><br></pre></td></tr></table></figure><p>这里我们先看看 <code>createEnv(terminal, settings)</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Environment <span class="title">createEnv</span><span class="params">(<span class="keyword">final</span> Terminal terminal, <span class="keyword">final</span> Map&lt;String, String&gt; settings)</span> <span class="keyword">throws</span> UserException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String esPathConf = System.getProperty(<span class="string">"es.path.conf"</span>);<span class="comment">//8、读取我们 vm options 中配置的 es.path.conf</span></span><br><span class="line">    <span class="keyword">if</span> (esPathConf == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.CONFIG, <span class="string">"the system property [es.path.conf] must be set"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> InternalSettingsPreparer.prepareEnvironment(Settings.EMPTY, terminal, settings, getConfigPath(esPathConf));  <span class="comment">//8、准备环境 prepareEnvironment</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读取我们 ide vm options 中配置的 es.path.conf，同上篇文章也讲了这个一定要配置的，因为 es 启动的时候会加载我们的配置和一些插件。这里继续看下上面代码第 6 行的 prepareEnvironment 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Environment <span class="title">prepareEnvironment</span><span class="params">(Settings input, Terminal terminal, Map&lt;String, String&gt; properties, Path configPath)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// just create enough settings to build the environment, to get the config dir</span></span><br><span class="line">    Settings.Builder output = Settings.builder();</span><br><span class="line">    initializeSettings(output, input, properties);</span><br><span class="line">    Environment environment = <span class="keyword">new</span> Environment(output.build(), configPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看 es.path.conf 目录下的配置文件是不是 yml 格式的，如果不是则抛出一个异常</span></span><br><span class="line">    <span class="keyword">if</span> (Files.exists(environment.configFile().resolve(<span class="string">"elasticsearch.yaml"</span>))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SettingsException(<span class="string">"elasticsearch.yaml was deprecated in 5.5.0 and must be renamed to elasticsearch.yml"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Files.exists(environment.configFile().resolve(<span class="string">"elasticsearch.json"</span>))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SettingsException(<span class="string">"elasticsearch.json was deprecated in 5.5.0 and must be converted to elasticsearch.yml"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    output = Settings.builder(); <span class="comment">// start with a fresh output</span></span><br><span class="line">    Path path = environment.configFile().resolve(<span class="string">"elasticsearch.yml"</span>);</span><br><span class="line">    <span class="keyword">if</span> (Files.exists(path)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            output.loadFromPath(path);  <span class="comment">//加载文件并读取配置文件内容</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SettingsException(<span class="string">"Failed to load settings from "</span> + path.toString(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// re-initialize settings now that the config file has been loaded</span></span><br><span class="line">    initializeSettings(output, input, properties);          <span class="comment">//再一次初始化设置</span></span><br><span class="line">    finalizeSettings(output, terminal);</span><br><span class="line"></span><br><span class="line">    environment = <span class="keyword">new</span> Environment(output.build(), configPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we put back the path.logs so we can use it in the logging configuration file</span></span><br><span class="line">    output.put(Environment.PATH_LOGS_SETTING.getKey(), environment.logsFile().toAbsolutePath().normalize().toString());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Environment(output.build(), configPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fu77z80q0rj31kw0zknk0.jpg" alt="3es03"></p><p>准备的环境如上图，通过构建的环境查看配置文件 elasticsearch.yml 是不是以 yml 结尾，如果是 yaml 或者 json 结尾的则抛出异常（在 5.5.0 版本其他两种格式过期了，只能使用 yml 格式），然后加载该配置文件并读取里面的内容（KV结构）。</p><p>跳出 createEnv 方法，我们继续看 execute 方法吧。</p><p>EnvironmentAwareCommand 类的 execute 方法代码如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Terminal terminal, OptionSet options, Environment env)</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><p> 这是个抽象方法，那么它的实现方法在 Elasticsearch 类中，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Terminal terminal, OptionSet options, Environment env)</span> <span class="keyword">throws</span> UserException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (options.nonOptionArguments().isEmpty() == <span class="keyword">false</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.USAGE, <span class="string">"Positional arguments not allowed, found "</span> + options.nonOptionArguments());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (options.has(versionOption)) &#123;</span><br><span class="line">        <span class="keyword">final</span> String versionOutput = String.format(</span><br><span class="line">            Locale.ROOT,</span><br><span class="line">            <span class="string">"Version: %s, Build: %s/%s/%s/%s, JVM: %s"</span>,</span><br><span class="line">            Version.displayVersion(Version.CURRENT, Build.CURRENT.isSnapshot()),</span><br><span class="line">            Build.CURRENT.flavor().displayName(),</span><br><span class="line">            Build.CURRENT.type().displayName(),</span><br><span class="line">            Build.CURRENT.shortHash(),</span><br><span class="line">            Build.CURRENT.date(),</span><br><span class="line">            JvmInfo.jvmInfo().version());</span><br><span class="line">        terminal.println(versionOutput);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> daemonize = options.has(daemonizeOption);</span><br><span class="line">    <span class="keyword">final</span> Path pidFile = pidfileOption.value(options);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> quiet = options.has(quietOption);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a misconfigured java.io.tmpdir can cause hard-to-diagnose problems later, so reject it immediately</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        env.validateTmpFile();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.CONFIG, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        init(daemonize, pidFile, quiet, env);    <span class="comment">//10、初始化</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (NodeValidationException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.CONFIG, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码里主要还是看看 <code>init(daemonize, pidFile, quiet, env);</code> 初始化方法吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> daemonize, <span class="keyword">final</span> Path pidFile, <span class="keyword">final</span> <span class="keyword">boolean</span> quiet, Environment initialEnv)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> NodeValidationException, UserException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Bootstrap.init(!daemonize, pidFile, quiet, initialEnv); <span class="comment">//11、执行 Bootstrap 中的 init 方法</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (BootstrapException | RuntimeException e) &#123;</span><br><span class="line">        <span class="comment">// format exceptions to the console in a special way</span></span><br><span class="line">        <span class="comment">// to avoid 2MB stacktraces from guice, etc.</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StartupException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="init-方法"><a href="#init-方法" class="headerlink" title="init 方法"></a>init 方法</h4><p>Bootstrap 中的静态 init 方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> <span class="keyword">boolean</span> foreground,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> Path pidFile,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> <span class="keyword">boolean</span> quiet,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> Environment initialEnv)</span> <span class="keyword">throws</span> BootstrapException, NodeValidationException, UserException </span>&#123;</span><br><span class="line">    <span class="comment">// force the class initializer for BootstrapInfo to run before</span></span><br><span class="line">    <span class="comment">// the security manager is installed</span></span><br><span class="line">    BootstrapInfo.init();</span><br><span class="line"></span><br><span class="line">    INSTANCE = <span class="keyword">new</span> Bootstrap();   <span class="comment">//12、创建一个 Bootstrap 实例</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> SecureSettings keystore = loadSecureSettings(initialEnv);<span class="comment">//如果注册了安全模块则将相关配置加载进来</span></span><br><span class="line">    <span class="keyword">final</span> Environment environment = createEnvironment(foreground, pidFile, keystore, initialEnv.settings(), initialEnv.configFile());   <span class="comment">//干之前干过的事情</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        LogConfigurator.configure(environment);   <span class="comment">//13、log 配置环境</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (environment.pidFile() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PidFile.create(environment.pidFile(), <span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> closeStandardStreams = (foreground == <span class="keyword">false</span>) || quiet;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (closeStandardStreams) &#123;</span><br><span class="line">            <span class="keyword">final</span> Logger rootLogger = ESLoggerFactory.getRootLogger();</span><br><span class="line">            <span class="keyword">final</span> Appender maybeConsoleAppender = Loggers.findAppender(rootLogger, ConsoleAppender.class);</span><br><span class="line">            <span class="keyword">if</span> (maybeConsoleAppender != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Loggers.removeAppender(rootLogger, maybeConsoleAppender);</span><br><span class="line">            &#125;</span><br><span class="line">            closeSystOut();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fail if somebody replaced the lucene jars</span></span><br><span class="line">        checkLucene();             <span class="comment">//14、检查Lucene版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// install the default uncaught exception handler; must be done before security is initialized as we do not want to grant the runtime permission setDefaultUncaughtExceptionHandler</span></span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(</span><br><span class="line">            <span class="keyword">new</span> ElasticsearchUncaughtExceptionHandler(() -&gt; Node.NODE_NAME_SETTING.get(environment.settings())));</span><br><span class="line"></span><br><span class="line">        INSTANCE.setup(<span class="keyword">true</span>, environment);      <span class="comment">//15、调用 setup 方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// any secure settings must be read during node construction</span></span><br><span class="line">            IOUtils.close(keystore);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        INSTANCE.start();         <span class="comment">//26、调用 start 方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (closeStandardStreams) &#123;</span><br><span class="line">            closeSysError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NodeValidationException | RuntimeException e) &#123;</span><br><span class="line">        <span class="comment">// disable console logging, so user does not see the exception twice (jvm will show it already)</span></span><br><span class="line">        <span class="keyword">final</span> Logger rootLogger = ESLoggerFactory.getRootLogger();</span><br><span class="line">        <span class="keyword">final</span> Appender maybeConsoleAppender = Loggers.findAppender(rootLogger, ConsoleAppender.class);</span><br><span class="line">        <span class="keyword">if</span> (foreground &amp;&amp; maybeConsoleAppender != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Loggers.removeAppender(rootLogger, maybeConsoleAppender);</span><br><span class="line">        &#125;</span><br><span class="line">        Logger logger = Loggers.getLogger(Bootstrap.class);</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE.node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            logger = Loggers.getLogger(Bootstrap.class, Node.NODE_NAME_SETTING.get(INSTANCE.node.settings()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// HACK, it sucks to do this, but we will run users out of disk space otherwise</span></span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> CreationException) &#123;</span><br><span class="line">            <span class="comment">// guice: log the shortened exc to the log file</span></span><br><span class="line">            ByteArrayOutputStream os = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            PrintStream ps = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ps = <span class="keyword">new</span> PrintStream(os, <span class="keyword">false</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException uee) &#123;</span><br><span class="line">                <span class="keyword">assert</span> <span class="keyword">false</span>;</span><br><span class="line">                e.addSuppressed(uee);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">new</span> StartupException(e).printStackTrace(ps);</span><br><span class="line">            ps.flush();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                logger.error(<span class="string">"Guice Exception: &#123;&#125;"</span>, os.toString(<span class="string">"UTF-8"</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException uee) &#123;</span><br><span class="line">                <span class="keyword">assert</span> <span class="keyword">false</span>;</span><br><span class="line">                e.addSuppressed(uee);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> NodeValidationException) &#123;</span><br><span class="line">            logger.error(<span class="string">"node validation exception\n&#123;&#125;"</span>, e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// full exception</span></span><br><span class="line">            logger.error(<span class="string">"Exception"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// re-enable it if appropriate, so they can see any logging during the shutdown process</span></span><br><span class="line">        <span class="keyword">if</span> (foreground &amp;&amp; maybeConsoleAppender != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Loggers.addAppender(rootLogger, maybeConsoleAppender);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法主要有：</p><p>1、创建 Bootstrap 实例</p><p>2、如果注册了安全模块则将相关配置加载进来</p><p>3、创建 Elasticsearch 运行的必须环境以及相关配置, 如将 config、scripts、plugins、modules、logs、lib、bin 等配置目录加载到运行环境中</p><p>4、log 配置环境，创建日志上下文</p><p>5、检查是否存在 PID 文件，如果不存在，创建 PID 文件</p><p>6、检查 Lucene 版本</p><p>7、调用 setup 方法（用当前环境来创建一个节点）</p><h4 id="setup-方法"><a href="#setup-方法" class="headerlink" title="setup 方法"></a>setup 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(<span class="keyword">boolean</span> addShutdownHook, Environment environment)</span> <span class="keyword">throws</span> BootstrapException </span>&#123;</span><br><span class="line">    Settings settings = environment.settings();<span class="comment">//根据环境得到配置</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        spawner.spawnNativeControllers(environment);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">    &#125;</span><br><span class="line">    initializeNatives(</span><br><span class="line">        environment.tmpFile(),</span><br><span class="line">        BootstrapSettings.MEMORY_LOCK_SETTING.get(settings),</span><br><span class="line">        BootstrapSettings.SYSTEM_CALL_FILTER_SETTING.get(settings),</span><br><span class="line">        BootstrapSettings.CTRLHANDLER_SETTING.get(settings));</span><br><span class="line">    <span class="comment">// initialize probes before the security manager is installed</span></span><br><span class="line">    initializeProbes();</span><br><span class="line">    <span class="keyword">if</span> (addShutdownHook) &#123;</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    IOUtils.close(node, spawner);</span><br><span class="line">                    LoggerContext context = (LoggerContext) LogManager.getContext(<span class="keyword">false</span>);</span><br><span class="line">                    Configurator.shutdown(context);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ElasticsearchException(<span class="string">"failed to stop node"</span>, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// look for jar hell</span></span><br><span class="line">        <span class="keyword">final</span> Logger logger = ESLoggerFactory.getLogger(JarHell.class);</span><br><span class="line">        JarHell.checkJarHell(logger::debug);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | URISyntaxException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Log ifconfig output before SecurityManager is installed</span></span><br><span class="line">    IfConfig.logIfNecessary();</span><br><span class="line">    <span class="comment">// install SM after natives, shutdown hooks, etc.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Security.configure(environment, BootstrapSettings.SECURITY_FILTER_BAD_DEFAULTS_SETTING.get(settings));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | NoSuchAlgorithmException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">    &#125;</span><br><span class="line">    node = <span class="keyword">new</span> Node(environment) &#123;              <span class="comment">//16、新建节点</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">validateNodeBeforeAcceptingRequests</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> BootstrapContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> BoundTransportAddress boundTransportAddress, List&lt;BootstrapCheck&gt; checks)</span> <span class="keyword">throws</span> NodeValidationException </span>&#123;</span><br><span class="line">            BootstrapChecks.check(context, boundTransportAddress, checks);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码最后就是 Node 节点的创建，这篇文章就不讲 Node 的创建了，下篇文章会好好讲一下 Node 节点的创建和正式启动 ES 节点的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇文章主要先把大概启动流程串通，因为篇幅较多所以拆开成两篇，先不扣细节了，后面流程启动文章写完后我们再单一的扣细节。</p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/08/04/why-see-es-code/">渣渣菜鸡为什么要看 ElasticSearch 源码？</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/08/05/es-code01/">渣渣菜鸡的 ElasticSearch 源码解析 —— 环境搭建</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/08/11/es-code02/">渣渣菜鸡的 ElasticSearch 源码解析 —— 启动流程(上)</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/08/11/es-code03/">渣渣菜鸡的 ElasticSearch 源码解析 —— 启动流程(下)</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2017/09/08/Elasticsearch-analyzers/">Elasticsearch 系列文章（一）：Elasticsearch 默认分词器和中分分词器之间的比较及使用方法</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/">Elasticsearch 系列文章（二）：全文搜索引擎 Elasticsearch 集群搭建入门教程</a></p><p>7、<a href="http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/">Elasticsearch 系列文章（三）：ElasticSearch 集群监控</a></p><p>8、<a href="http://www.54tianzhisheng.cn/2017/10/18/ElasticSearch-nodes-metrics/">Elasticsearch 系列文章（四）：ElasticSearch 单个节点监控</a></p><p>9、<a href="http://www.54tianzhisheng.cn/2017/12/25/ELK/">Elasticsearch 系列文章（五）：ELK 实时日志分析平台环境搭建</a></p><p>10、<a href="http://www.54tianzhisheng.cn/2018/08/14/idea-remote-debug-elasticsearch/">教你如何在 IDEA 远程 Debug ElasticSearch</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwly1fu8gag9ycij31hc0w0awj.jpg&quot; alt=&quot;005&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="http://www.54tianzhisheng.cn/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>渣渣菜鸡的 ElasticSearch 源码解析 —— 环境搭建</title>
    <link href="http://www.54tianzhisheng.cn/2018/08/05/es-code01/"/>
    <id>http://www.54tianzhisheng.cn/2018/08/05/es-code01/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-26T04:10:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fty28q9ljkj31hc0zbqf5.jpg" alt="girl-3551832_1920"></p><a id="more"></a><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="zhisheng"></p><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/08/05/es-code01/">http://www.54tianzhisheng.cn/2018/08/05/es-code01/</a></p><h3 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h3><p>1、Intellij Idea:2018.2版本</p><p>2、Elasticsearch 源码版本: 6.3.2</p><p>3、JDK:10.0.2</p><p>4、Gradle : 建议 4.5 及以上版本</p><p>5、Macbook Pro 2017 </p><h3 id="安装-ElasticSearch"><a href="#安装-ElasticSearch" class="headerlink" title="安装 ElasticSearch"></a>安装 ElasticSearch</h3><p> 去 <a href="https://www.elastic.co/downloads/past-releases" target="_blank" rel="noopener">https://www.elastic.co/downloads/past-releases</a> 这里找到 ElasticSearch 6.3.2 版本，下载后然后解压就好了。（注意：这个版本需要和下面的源码版本一致）</p><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><p>从 <a href="https://github.com/elastic/elasticsearch" target="_blank" rel="noopener">https://github.com/elastic/elasticsearch</a> 上下载相应版本的源代码，这里建议用 git clone ，这样的话后面你可以随意切换到 ElasticSearch 的其他版本去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:elastic/elasticsearch.git</span><br></pre></td></tr></table></figure><p>我们看下有哪些版本的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><p>找到了目前源码版本最新的版本的稳定版为：v6.3.2</p><p>切换到该版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout v6.3.2</span><br></pre></td></tr></table></figure><p>于是就可以切换到该稳定版本了。接下来不要直接导入到 IDEA/Eclipse 中。</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p><a href="https://github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md#configuring-ides-and-running-tests" target="_blank" rel="noopener">GitHub 这里</a>已经有描述如何导入 IDEA/Eclipse 中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">JDK 10 is required to build Elasticsearch. You must have a JDK 10 installation with the environment variable JAVA_HOME referencing the path to Java home for your JDK 10 installation. By default, tests use the same runtime as JAVA_HOME. However, since Elasticsearch, supports JDK 8 the build supports compiling with JDK 10 and testing on a JDK 8 runtime; to do this, set RUNTIME_JAVA_HOME pointing to the Java home of a JDK 8 installation. Note that this mechanism can be used to test against other JDKs as well, this is not only limited to JDK 8.</span><br><span class="line"></span><br><span class="line">Note: It is also required to have JAVA7_HOME, JAVA8_HOME and JAVA10_HOME available so that the tests can pass.</span><br><span class="line"></span><br><span class="line">Warning: do not use sdkman for Java installations which do not have proper jrunscript for jdk distributions.</span><br><span class="line"></span><br><span class="line">Elasticsearch uses the Gradle wrapper for its build. You can execute Gradle using the wrapper via the gradlew script in the root of the repository.</span><br><span class="line"></span><br><span class="line">Configuring IDEs And Running Tests</span><br><span class="line">Eclipse users can automatically configure their IDE: ./gradlew eclipse then File: Import: Existing Projects into Workspace. Select the option Search for nested projects. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying eclipse.ini accordingly to avoid GC overhead errors.</span><br><span class="line"></span><br><span class="line">IntelliJ users can automatically configure their IDE: ./gradlew idea then File-&gt;New Project From Existing Sources. Point to the root of the source directory, select Import project from external model-&gt;Gradle, enable Use auto-import. In order to run tests directly from IDEA 2017.2 and above, it is required to disable the IDEA run launcher in order to avoid idea_rt.jar causing &quot;jar hell&quot;. This can be achieved by adding the -Didea.no.launcher=true JVM option. Alternatively, idea.no.launcher=true can be set in the idea.properties file which can be accessed under Help &gt; Edit Custom Properties (this will require a restart of IDEA). For IDEA 2017.3 and above, in addition to the JVM option, you will need to go to Run-&gt;Edit Configurations-&gt;...-&gt;Defaults-&gt;JUnit and verify that the Shorten command line setting is set to user-local default: none. You may also need to remove ant-javafx.jar from your classpath if that is reported as a source of jar hell.</span><br><span class="line"></span><br><span class="line">To run an instance of elasticsearch from the source code run ./gradlew run</span><br><span class="line"></span><br><span class="line">The Elasticsearch codebase makes heavy use of Java asserts and the test runner requires that assertions be enabled within the JVM. This can be accomplished by passing the flag -ea to the JVM on startup.</span><br><span class="line"></span><br><span class="line">For IntelliJ, go to Run-&gt;Edit Configurations...-&gt;Defaults-&gt;JUnit-&gt;VM options and input -ea.</span><br><span class="line"></span><br><span class="line">For Eclipse, go to Preferences-&gt;Java-&gt;Installed JREs and add -ea to VM Arguments.</span><br></pre></td></tr></table></figure><p>上面说了下如何编译 Elasticsearch 和如何在 ide 中配置好环境。下面说下步骤吧：（这里我只是演示在 IDEA 中如何导入）</p><p>1、在我们下载的 Elasticsearch 根目录下执行命令：(执行已经写好的脚本 gradlew)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew idea</span><br></pre></td></tr></table></figure><p>请注意版本和我的一致，早的版本可能没有该执行脚本，需要执行 <code>gradle idea</code> 命令</p><p>最后结果如下：</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdly1fty1xfk9m9j31kw0ib494.jpg" alt="idea-config"></p><p>2、导入 IDEA </p><p>idea 中 <code>File -&gt; New Project From Existing Sources</code> 选择你下载的 Elasticsearch 根目录，然后点 <code>open</code> ，之后 <code>Import project from external model -&gt; Gradle</code> , 选中 <code>Use auto-import</code>, 然后就可以了。</p><p>导入进去后，gradle 又会编译一遍，需要等一会，好了之后如下：</p><p><img src="https://ws3.sinaimg.cn/large/0069RVTdly1fty1xisz0kj31kw0w07jn.jpg" alt="ok"></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>打开 server 模块下的 Elasticsearch 类：org.elasticsearch.bootstrap.Elasticsearch，运行里面的 main 函数。</p><p>1、报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: the system property [es.path.conf] must be set</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/0069RVTdly1fty1xdcx6zj30ss0ahjru.jpg" alt="1es-path-conf-must-be-set"></p><p>我们在运行的配置 vm options 如下：（后面启动流程会写为什么会报这个错误）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Des.path.conf=&quot;/usr/local/elasticsearch-6.3.2/config&quot;</span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/0069RVTdly1fty1xebbgxj30v10l9n0w.jpg" alt="2设置es-path-conf"></p><p>2、再次运行，报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalStateException: path.home is not configured</span><br><span class="line">at org.elasticsearch.env.Environment.&lt;init&gt;(Environment.java:103)</span><br><span class="line">at org.elasticsearch.env.Environment.&lt;init&gt;(Environment.java:94)</span><br><span class="line">at org.elasticsearch.node.InternalSettingsPreparer.prepareEnvironment(InternalSettingsPreparer.java:86)</span><br><span class="line">at org.elasticsearch.cli.EnvironmentAwareCommand.createEnv(EnvironmentAwareCommand.java:95)</span><br><span class="line">at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86)</span><br><span class="line">at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:124)</span><br><span class="line">at org.elasticsearch.cli.Command.main(Command.java:90)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:93)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:86)</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fty1xh2zblj30tk09s40w.jpg" alt="3path-home-not-config"></p><p>我们在运行的配置 vm options 如下：（后面启动流程会写为什么会报这个错误）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Des.path.home=&quot;/usr/local/elasticsearch-6.3.2&quot;</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/0069RVTdly1fty1xg4ktmj30v10l976r.jpg" alt="4配置es-path-home"></p><p>3、再次运行，报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">2018-08-01 09:38:03,974 main ERROR Could not register mbeans java.security.AccessControlException: access denied (&quot;javax.management.MBeanTrustPermission&quot; &quot;register&quot;)</span><br><span class="line">at java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)</span><br><span class="line">at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:371)</span><br><span class="line">at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.checkMBeanTrustPermission(DefaultMBeanServerInterceptor.java:1805)</span><br><span class="line">at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:318)</span><br><span class="line">at java.management/com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:522)</span><br><span class="line">at org.apache.logging.log4j.core.jmx.Server.register(Server.java:389)</span><br><span class="line">at org.apache.logging.log4j.core.jmx.Server.reregisterMBeansAfterReconfigure(Server.java:167)</span><br><span class="line">at org.apache.logging.log4j.core.jmx.Server.reregisterMBeansAfterReconfigure(Server.java:140)</span><br><span class="line">at org.apache.logging.log4j.core.LoggerContext.setConfiguration(LoggerContext.java:556)</span><br><span class="line">at org.apache.logging.log4j.core.LoggerContext.start(LoggerContext.java:261)</span><br><span class="line">at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:206)</span><br><span class="line">at org.apache.logging.log4j.core.config.Configurator.initialize(Configurator.java:220)</span><br><span class="line">at org.apache.logging.log4j.core.config.Configurator.initialize(Configurator.java:197)</span><br><span class="line">at org.elasticsearch.common.logging.LogConfigurator.configureStatusLogger(LogConfigurator.java:171)</span><br><span class="line">at org.elasticsearch.common.logging.LogConfigurator.configure(LogConfigurator.java:140)</span><br><span class="line">at org.elasticsearch.common.logging.LogConfigurator.configure(LogConfigurator.java:119)</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:294)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:136)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:127)</span><br><span class="line">at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86)</span><br><span class="line">at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:124)</span><br><span class="line">at org.elasticsearch.cli.Command.main(Command.java:90)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:93)</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:86)</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/0069RVTdly1fty1xcqbf1j316r0tbn87.jpg" alt="5access-denied"></p><p>我们在运行的配置 vm options 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dlog4j2.disable.jmx=true</span><br></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/0069RVTdly1fty1xglydpj30v10l9q5h.jpg" alt="6log4j-disable-jmx"></p><p>4、如果你用的是 JDK 1.8 编译的应该还会报这个错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[2018-08-01T11:02:24,663][WARN ][o.e.b.ElasticsearchUncaughtExceptionHandler] [] uncaught exception in thread [main]</span><br><span class="line">org.elasticsearch.bootstrap.StartupException: java.lang.IllegalStateException: jar hell!</span><br><span class="line">class: jdk.packager.services.UserJvmOptionsService</span><br><span class="line">jar1: /Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/lib/ant-javafx.jar</span><br><span class="line">jar2: /Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/lib/packager.jar</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:140) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:127) ~[main/:?]</span><br><span class="line">at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86) ~[main/:?]</span><br><span class="line">at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:124) ~[main/:?]</span><br><span class="line">at org.elasticsearch.cli.Command.main(Command.java:90) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:93) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:86) ~[main/:?]</span><br><span class="line">Caused by: java.lang.IllegalStateException: jar hell!</span><br><span class="line">class: jdk.packager.services.UserJvmOptionsService</span><br><span class="line">jar1: /Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/lib/ant-javafx.jar</span><br><span class="line">jar2: /Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/lib/packager.jar</span><br><span class="line">at org.elasticsearch.bootstrap.JarHell.checkClass(JarHell.java:273) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.JarHell.checkJarHell(JarHell.java:190) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.JarHell.checkJarHell(JarHell.java:86) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:198) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:326) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:136) ~[main/:?]</span><br><span class="line">... 6 more</span><br><span class="line">2018-08-01 11:02:24,713 Thread-2 ERROR No log4j2 configuration file found. Using default configuration: logging only errors to the console. Set system property &apos;log4j2.debug&apos; to show Log4j2 internal initialization logging.</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fty1xhjppqj31h40gbted.jpg" alt="8jar-hell"></p><p>有两个解决方法就是，</p><p>（1）、把源码中有关使用了 <code>JarHell.checkJarHell</code> 代码的地方全部注释掉就好了</p><p>（2）、换成 JDK 10 编译</p><p>两种方法我都试了是可行的，建议直接换第二种方案吧！</p><p>5、然后再启动的话，应该没问题了,出现下面日志：（网上很多人在这步就好了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[elasticsearch] Java HotSpot(TM) 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:26,073][INFO ][o.e.n.Node               ] [node-0] initializing ...</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:26,185][INFO ][o.e.e.NodeEnvironment    ] [node-0] using [1] data paths, mounts [[/ (/dev/disk1s1)]], net usable_space [109.3gb], net total_space [233.4gb], types [apfs]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:26,187][INFO ][o.e.e.NodeEnvironment    ] [node-0] heap size [494.9mb], compressed ordinary object pointers [true]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:26,190][INFO ][o.e.n.Node               ] [node-0] node name [node-0], node ID [o9SuMXP-R7uvJLtE3h37Rw]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:26,191][INFO ][o.e.n.Node               ] [node-0] version[6.3.2-SNAPSHOT], pid[61499], build[default/zip/053779d/2018-08-04T08:39:59.714654Z], OS[Mac OS X/10.13.5/x86_64], JVM[&quot;Oracle Corporation&quot;/Java HotSpot(TM) 64-Bit Server VM/10.0.2/10.0.2+13]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:26,191][INFO ][o.e.n.Node               ] [node-0] JVM arguments [-Xms1g, -Xmx1g, -XX:+UseConcMarkSweepGC, -XX:CMSInitiatingOccupancyFraction=75, -XX:+UseCMSInitiatingOccupancyOnly, -XX:+AlwaysPreTouch, -Xss1m, -Djava.awt.headless=true, -Dfile.encoding=UTF-8, -Djna.nosys=true, -XX:-OmitStackTraceInFastThrow, -Dio.netty.noUnsafe=true, -Dio.netty.noKeySetOptimization=true, -Dio.netty.recycler.maxCapacityPerThread=0, -Dlog4j.shutdownHookEnabled=false, -Dlog4j2.disable.jmx=true, -Djava.io.tmpdir=/var/folders/mb/3vpbvkkx13l2jmpt2kmmt0fr0000gn/T/elasticsearch.URRKTybG, -XX:+HeapDumpOnOutOfMemoryError, -XX:HeapDumpPath=data, -XX:ErrorFile=logs/hs_err_pid%p.log, -Xlog:gc*,gc+age=trace,safepoint:file=logs/gc.log:utctime,pid,tags:filecount=32,filesize=64m, -Djava.locale.providers=COMPAT, -XX:UseAVX=2, -ea, -esa, -Xms512m, -Xmx512m, -Des.path.home=/Users/zhisheng/IdeaProjects/github/elasticsearch/distribution/build/cluster/run node0/elasticsearch-6.3.2-SNAPSHOT, -Des.path.conf=/Users/zhisheng/IdeaProjects/github/elasticsearch/distribution/build/cluster/run node0/elasticsearch-6.3.2-SNAPSHOT/config, -Des.distribution.flavor=default, -Des.distribution.type=zip]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:26,191][WARN ][o.e.n.Node               ] [node-0] version [6.3.2-SNAPSHOT] is a pre-release version of Elasticsearch and is not suitable for production</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,808][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [aggs-matrix-stats]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,809][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [analysis-common]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,809][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [ingest-common]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,809][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [lang-expression]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,809][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [lang-mustache]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,809][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [lang-painless]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,809][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [mapper-extras]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,809][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [parent-join]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,809][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [percolator]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,809][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [rank-eval]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,809][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [reindex]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [repository-url]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [transport-netty4]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [tribe]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-core]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-deprecation]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-graph]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-logstash]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-ml]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-monitoring]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-rollup]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,810][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-security]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,811][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-sql]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,811][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-upgrade]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,811][INFO ][o.e.p.PluginsService     ] [node-0] loaded module [x-pack-watcher]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:28,811][INFO ][o.e.p.PluginsService     ] [node-0] no plugins loaded</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:32,722][INFO ][o.e.x.s.a.s.FileRolesStore] [node-0] parsed [0] roles from file [/Users/zhisheng/IdeaProjects/github/elasticsearch/distribution/build/cluster/run node0/elasticsearch-6.3.2-SNAPSHOT/config/roles.yml]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:33,358][INFO ][o.e.x.m.j.p.l.CppLogMessageHandler] [controller/61517] [Main.cc@109] controller (64 bit): Version 6.3.2-SNAPSHOT (Build 903094f295d249) Copyright (c) 2018 Elasticsearch BV</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:33,783][DEBUG][o.e.a.ActionModule       ] Using REST wrapper from plugin org.elasticsearch.xpack.security.Security</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:34,110][INFO ][o.e.d.DiscoveryModule    ] [node-0] using discovery type [zen]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:34,971][INFO ][o.e.n.Node               ] [node-0] initialized</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:34,971][INFO ][o.e.n.Node               ] [node-0] starting ...</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:35,217][INFO ][o.e.t.TransportService   ] [node-0] publish_address &#123;127.0.0.1:9300&#125;, bound_addresses &#123;[::1]:9300&#125;, &#123;127.0.0.1:9300&#125;</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,291][INFO ][o.e.c.s.MasterService    ] [node-0] zen-disco-elected-as-master ([0] nodes joined)[, ], reason: new_master &#123;node-0&#125;&#123;o9SuMXP-R7uvJLtE3h37Rw&#125;&#123;xjoT1zvpRsm1ZDGLCab1sA&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;&#123;ml.machine_memory=17179869184, xpack.installed=true, testattr=test, ml.max_open_jobs=20, ml.enabled=true&#125;</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,295][INFO ][o.e.c.s.ClusterApplierService] [node-0] new_master &#123;node-0&#125;&#123;o9SuMXP-R7uvJLtE3h37Rw&#125;&#123;xjoT1zvpRsm1ZDGLCab1sA&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;&#123;ml.machine_memory=17179869184, xpack.installed=true, testattr=test, ml.max_open_jobs=20, ml.enabled=true&#125;, reason: apply cluster state (from master [master &#123;node-0&#125;&#123;o9SuMXP-R7uvJLtE3h37Rw&#125;&#123;xjoT1zvpRsm1ZDGLCab1sA&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;&#123;ml.machine_memory=17179869184, xpack.installed=true, testattr=test, ml.max_open_jobs=20, ml.enabled=true&#125; committed version [1] source [zen-disco-elected-as-master ([0] nodes joined)[, ]]])</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,317][INFO ][o.e.x.s.t.n.SecurityNetty4HttpServerTransport] [node-0] publish_address &#123;127.0.0.1:9200&#125;, bound_addresses &#123;[::1]:9200&#125;, &#123;127.0.0.1:9200&#125;</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,319][INFO ][o.e.n.Node               ] [node-0] started</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,358][WARN ][o.e.x.s.a.s.m.NativeRoleMappingStore] [node-0] Failed to clear cache for realms [[]]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,413][INFO ][o.e.g.GatewayService     ] [node-0] recovered [0] indices into cluster_state</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,597][INFO ][o.e.c.m.MetaDataIndexTemplateService] [node-0] adding template [.watch-history-7] for index patterns [.watcher-history-7*]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,660][INFO ][o.e.c.m.MetaDataIndexTemplateService] [node-0] adding template [.watches] for index patterns [.watches*]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,707][INFO ][o.e.c.m.MetaDataIndexTemplateService] [node-0] adding template [.triggered_watches] for index patterns [.triggered_watches*]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,771][INFO ][o.e.c.m.MetaDataIndexTemplateService] [node-0] adding template [.monitoring-logstash] for index patterns [.monitoring-logstash-6-*]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,836][INFO ][o.e.c.m.MetaDataIndexTemplateService] [node-0] adding template [.monitoring-es] for index patterns [.monitoring-es-6-*]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,878][INFO ][o.e.c.m.MetaDataIndexTemplateService] [node-0] adding template [.monitoring-alerts] for index patterns [.monitoring-alerts-6]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,926][INFO ][o.e.c.m.MetaDataIndexTemplateService] [node-0] adding template [.monitoring-beats] for index patterns [.monitoring-beats-6-*]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:38,970][INFO ][o.e.c.m.MetaDataIndexTemplateService] [node-0] adding template [.monitoring-kibana] for index patterns [.monitoring-kibana-6-*]</span><br><span class="line">[elasticsearch] [2018-08-04T16:42:39,055][INFO ][o.e.l.LicenseService     ] [node-0] license [79704513-d3c4-4535-8276-beeb146765de] mode [basic] - valid</span><br></pre></td></tr></table></figure><p>6、但是我出现了下面这个问题，一直困扰着我呢，我是直接跳过去的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[2018-08-01T09:44:27,370][ERROR][o.e.b.ElasticsearchUncaughtExceptionHandler] [] fatal error in thread [main], exiting</span><br><span class="line">java.lang.NoClassDefFoundError: org/elasticsearch/plugins/ExtendedPluginsClassLoader</span><br><span class="line">at org.elasticsearch.plugins.PluginsService.loadBundle(PluginsService.java:632) ~[main/:?]</span><br><span class="line">at org.elasticsearch.plugins.PluginsService.loadBundles(PluginsService.java:557) ~[main/:?]</span><br><span class="line">at org.elasticsearch.plugins.PluginsService.&lt;init&gt;(PluginsService.java:162) ~[main/:?]</span><br><span class="line">at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:311) ~[main/:?]</span><br><span class="line">at org.elasticsearch.node.Node.&lt;init&gt;(Node.java:252) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap$5.&lt;init&gt;(Bootstrap.java:213) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:213) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:326) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:136) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:127) ~[main/:?]</span><br><span class="line">at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86) ~[main/:?]</span><br><span class="line">at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:124) ~[main/:?]</span><br><span class="line">at org.elasticsearch.cli.Command.main(Command.java:90) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:93) ~[main/:?]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:86) ~[main/:?]</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: org.elasticsearch.plugins.ExtendedPluginsClassLoader</span><br><span class="line">at jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:582) ~[?:?]</span><br><span class="line">at jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:190) ~[?:?]</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:499) ~[?:?]</span><br><span class="line">... 15 more</span><br></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/0069RVTdly1fty1xi20xzj310q0ilgsa.jpg" alt="7noclassDefFoundError"></p><p>遇到的这个问题，我在 GitHub 求助信息如下：</p><p><a href="https://github.com/elastic/elasticsearch/issues/30774" target="_blank" rel="noopener">https://github.com/elastic/elasticsearch/issues/30774</a></p><p>但是并没有解决我的问题，这里暂时先记录下来！我自己也跟了下源码，定位到错误信息是怎么产生的，但是没有解决方案！</p><p>后面写了篇文章：<a href="http://www.54tianzhisheng.cn/2018/08/14/idea-remote-debug-elasticsearch/">教你如何在 IDEA 远程 Debug ElasticSearch</a></p><p>或许可以帮你解决上面问题带给你的困扰！</p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>后面有一个读者提醒了我一下，他自己也遇到这个问题，然后他的解决方案挺好的，完美解决我的问题。这里做个记录：</p><p><strong>解决方法：</strong> 打开 IDEA <code>Edit Configurations</code> ，给 <code>Include dependencies with Provided scope</code> 打上勾即可解决，很简单吧！！</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fukk7004jvj30v10lwjtu.jpg" alt=""></p><p>继续RUN，又来一个 EXceptin：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[2018-08-23T01:13:38,551][WARN ][o.e.b.ElasticsearchUncaughtExceptionHandler] [] uncaught exception in thread [main]</span><br><span class="line">org.elasticsearch.bootstrap.StartupException: java.security.AccessControlException: access denied (&quot;java.lang.RuntimePermission&quot; &quot;createClassLoader&quot;)</span><br><span class="line">    at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:140) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:127) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:124) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.cli.Command.main(Command.java:90) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:93) ~[main/:?]</span><br><span class="line">    at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:86) ~[main/:?]</span><br><span class="line">Caused by: java.security.AccessControlException: access denied (&quot;java.lang.RuntimePermission&quot; &quot;createClassLoader&quot;)</span><br><span class="line">    at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472) ~[?:?]</span><br><span class="line">    at java.security.AccessController.checkPermission(AccessController.java:895) ~[?:?]</span><br><span class="line">    at java.lang.SecurityManager.checkPermission(SecurityManager.java:335) ~[?:?]</span><br><span class="line">    at java.lang.SecurityManager.checkCreateClassLoader(SecurityManager.java:397) ~[?:?]</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Exception: java.security.AccessControlException thrown from the UncaughtExceptionHandler in thread &quot;Thread-2&quot;</span><br></pre></td></tr></table></figure><p><strong>第一种：</strong> 在 <code>config</code> 目录下新建 <code>java.policy</code> 文件，填入下面内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant &#123;</span><br><span class="line">    permission java.lang.RuntimePermission &quot;createClassLoader&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后在 <code>VM options</code> 加入 <code>java.security.policy</code> 的设置，指向该文件即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Djava.security.policy=/usr/local/elasticsearch-6.3.2/config/java.policy</span><br></pre></td></tr></table></figure><p><strong>第二种：</strong> 就是在 <code>%JAVA_HOME%/conf/security</code> 目录下（JDK10是这个路径，之前的版本不确定），我的目录是 <code>/Library/Java/JavaVirtualMachines/jdk-10.0.2.jdk/Contents/Home/conf/security</code>，打开 <code>java.policy</code> 文件，在 <code>grant</code> 中加入下面这句，赋予权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//for es 6.3.2</span><br><span class="line">permission java.lang.RuntimePermission &quot;createClassLoader&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fukkbubwxkj312a0qktdf.jpg" alt=""></p><p>再 RUN，这次可终于运行起来了！！！</p><p>再次感谢下读者，他的文章地址是：<a href="">http://laijianfeng.org/2018/08/%E6%95%99%E4%BD%A0%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95Elasticsearch-6-3-2%E6%BA%90%E7%A0%81/</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>折腾的路上少不了各种错误烦扰你，学会解决问题！</p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p>1、<a href="http://www.54tianzhisheng.cn/2018/08/04/why-see-es-code/">渣渣菜鸡为什么要看 ElasticSearch 源码？</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2018/08/05/es-code01/">渣渣菜鸡的 ElasticSearch 源码解析 —— 环境搭建</a></p><p>3、<a href="http://www.54tianzhisheng.cn/2018/08/11/es-code02/">渣渣菜鸡的 ElasticSearch 源码解析 —— 启动流程(上)</a></p><p>4、<a href="http://www.54tianzhisheng.cn/2018/08/11/es-code03/">渣渣菜鸡的 ElasticSearch 源码解析 —— 启动流程(下)</a></p><p>5、<a href="http://www.54tianzhisheng.cn/2017/09/08/Elasticsearch-analyzers/">Elasticsearch 系列文章（一）：Elasticsearch 默认分词器和中分分词器之间的比较及使用方法</a></p><p>6、<a href="http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/">Elasticsearch 系列文章（二）：全文搜索引擎 Elasticsearch 集群搭建入门教程</a></p><p>7、<a href="http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/">Elasticsearch 系列文章（三）：ElasticSearch 集群监控</a></p><p>8、<a href="http://www.54tianzhisheng.cn/2017/10/18/ElasticSearch-nodes-metrics/">Elasticsearch 系列文章（四）：ElasticSearch 单个节点监控</a></p><p>9、<a href="http://www.54tianzhisheng.cn/2017/12/25/ELK/">Elasticsearch 系列文章（五）：ELK 实时日志分析平台环境搭建</a></p><p>10、<a href="http://www.54tianzhisheng.cn/2018/08/14/idea-remote-debug-elasticsearch/">教你如何在 IDEA 远程 Debug ElasticSearch</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79ly1fty28q9ljkj31hc0zbqf5.jpg&quot; alt=&quot;girl-3551832_1920&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="http://www.54tianzhisheng.cn/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>渣渣菜鸡为什么要看 ElasticSearch 源码？</title>
    <link href="http://www.54tianzhisheng.cn/2018/08/04/why-see-es-code/"/>
    <id>http://www.54tianzhisheng.cn/2018/08/04/why-see-es-code/</id>
    <published>2018-08-03T16:00:00.000Z</published>
    <updated>2018-08-04T14:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fty1lwmoa0j31hc0vjjyz.jpg" alt="004"></p><a id="more"></a><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>人工智能、大数据快速发展的今天，对于 TB 甚至 PB 级大数据的快速检索已然成为刚需，大型企业早已淹没在系统生成的浩瀚数据流当中。大数据技术业已集中在如何存储和处理这些海量的数据上。Elasticsearch 作为开源领域的后起之秀，从2010年至今得到飞跃式的发展。 Elasticsearch 以其开源、分布式、RESTFul API 三大优势，已经成为当下风口中“会飞的猪”。</p><p>在我的电脑本地写了几篇 ElasticSearch 的源码解析了，回过头来想想应该也写一篇为何我会去看它的源码？</p><p>为什么呢？下面我讲讲自己从接触搜索到现在看源码的过程！</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="zhisheng"></p><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/08/04/why-see-es-code/">http://www.54tianzhisheng.cn/2018/08/24/why-see-es-code/</a></p><h3 id="第一次接触搜索"><a href="#第一次接触搜索" class="headerlink" title="第一次接触搜索"></a>第一次接触搜索</h3><p>搜索，我们首先想到的是搜索引擎：Google、百度，这个就算是接触的最早的了。</p><p>我自己项目里面接触搜索是大二暑假那时练习的一个项目，里面用了 Solr，然后当时自己也稍微了解了下，并用在了项目里面。</p><h3 id="第二次接触搜索"><a href="#第二次接触搜索" class="headerlink" title="第二次接触搜索"></a>第二次接触搜索</h3><p>从第一次项目里面用到了搜索，后面自己对这方面就比较感兴趣。再一次接触搜索是实习的时候进公司。第一件事情就是被老大叫的去学习搭建 Elasticsearch 集群，于是乎，电脑就装了三个虚拟机，Elasticsearch 就一个个的装了起来了。也记录了博客下来：<a href="http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/">Elasticsearch 系列文章（二）：全文搜索引擎 Elasticsearch 集群搭建入门教程</a>，当时搭建的时候 ES 的版本才刚从 2.x 升级到 5.x 呢，截止本文时间 2018.08.04，现在 ES 版本已经是到 7.0 了，这版本升级是真的的快，这也说明了 ES 的活跃度很高，背后的开发工程师维护也快，侧面突出要去看它源码的重要性。</p><p>当时自己在本地测试搭建集群后，给分配了另外一个任务就是去了解 ES 中的自带分词、英文分词、中文分词的相同与差异、以及自己建立分词需要注意的点。于是乎：当时在公司 wiki 贡献了这篇文章：<a href="http://www.54tianzhisheng.cn/2017/09/08/Elasticsearch-analyzers/">Elasticsearch 系列文章（一）：Elasticsearch 默认分词器和中分分词器之间的比较及使用方法</a>。这篇文章几乎已经把市面上所有的分词都写进去了，包括他们的相同点、不同点、如何使用、如何自定义分词器。</p><p>然后还有就是我同组的一个同学，她的任务就是 2.x 升级到 5.x 中 mapping 的大改变有哪些？后面我也看了她总结的文档，很详细！</p><p>在这次接触了 ES 后，因为我自己本地已经有环境了，所以自己测试了一些功能，给 ES 安装插件（IK、x-pack、支持 sql 的、），后面自己也去测试 ES 的索引、文档、REST API。</p><h3 id="第三次接触搜索"><a href="#第三次接触搜索" class="headerlink" title="第三次接触搜索"></a>第三次接触搜索</h3><p>由于是自己对其感兴趣，所以后面就去找了些相关的视频，比如：中华石衫的《Elasticsearch 顶尖高手系列-高手进阶篇》几个系列视频教程个人感觉还是不错的，看完这几个系列估计入门肯定是没有问题的。版权原因，不提供下载链接。</p><p>另外就是《Elasticsearch 权威指南》翻译的版本，翻译还没有全，可以去看看，讲得很详细的，市面上应该还没有哪本书讲的有这么清楚，如果英文不错的可以直接啃英文吧。</p><p>还有就是官网的文档了，非常非常详细，还有 demo，2.x 版本的是有中文的官方文档，可以凑合着看。</p><p>学习新东西，要学会先看官方文档，何况 Elasticsearch 的官方文档这么详细呢！</p><h3 id="第四次接触搜索"><a href="#第四次接触搜索" class="headerlink" title="第四次接触搜索"></a>第四次接触搜索</h3><p>后面实习的时候，又分配了公司中间件监控的两个模块：Elasticsearch 和 HBase 组件的监控。于是乎，再次有机会接触 Elasticsearch 了，这次主要还是利用 Elasticsearch 自带的 REST API ：<code>_cluster/health</code> 、<code>_cluster/stats</code>、<code>_nodes</code>、<code>_nodes/stats</code> 去获取到集群的健康信息、节点信息（内存、CPU、网络、JVM等信息）。为了做这个项目自己当时也去找了网上很多类似的文章参考常用的监控指标和他们是怎么做监控的。我当时的任务主要还是采集信息，然后存到公司大项目的 influxdb 中，最后用 grafana 展示出来，后面我组的运维大佬给我看了监控大盘，界面挺酷炫的，哈哈哈，牛逼！</p><p>当时写的两篇博客：</p><p>1、<a href="http://www.54tianzhisheng.cn/2017/10/15/ElasticSearch-cluster-health-metrics/">Elasticsearch 系列文章（三）：ElasticSearch 集群监控</a></p><p>2、<a href="http://www.54tianzhisheng.cn/2017/10/18/ElasticSearch-nodes-metrics/">Elasticsearch 系列文章（四）：ElasticSearch 单个节点监控</a></p><p>取之网络，还之网络，希望给后面做类似任务的小伙伴给点参考意见！</p><p>再就是自己搭建 ELK（ElasticSearch, Logstash, Kibana）日志分析平台，然后玩了下！</p><p>搭建环境博客：<a href="http://www.54tianzhisheng.cn/2017/12/25/ELK/">Elasticsearch 系列文章（五）：ELK 实时日志分析平台环境搭建</a></p><h3 id="第五次接触搜索"><a href="#第五次接触搜索" class="headerlink" title="第五次接触搜索"></a>第五次接触搜索</h3><p>后面就没怎么接触 ElasticSearch 了，一直忙着其他的东西。</p><p>实习辞职后，毕业出来找工作的那段日子，自己又花了一星期稍微过了一遍 《Elasticsearch 权威指南》 这本书，话说还帮我面试挺过不少关呢，哈哈哈！因为我项目里写了 Elasticsearch 的监控，如果你对 Elasticsearch 其他的不熟悉，面试官稍微问些其他关于这方面的，那就不知道就有点尴尬😅了，所以还是准备了下。看完之后应付面试没多大的问题。</p><h3 id="第六次接触"><a href="#第六次接触" class="headerlink" title="第六次接触"></a>第六次接触</h3><p>看起来我接触了 Elasticsearch 很久了，其实真正项目里面是没有用到 Elasticsearch 做过项目的，没有用到 Elasticsearch 的搜索做什么项目，于是自己当时找工作其实也打算找到工作后看能不能自己做个项目或者公司项目里面用用 Elasticsearch 呢？</p><p>结果在新公司新项目里，很快就用到了。只不过这次不是 Java 项目里面用了，而是和 GoLang 整合。不过 API 都差不多，多熟悉几次就很快上手了，关键还是要懂 Elasticsearch 如何构造 DSL 查询语句，这样再转换成 GO 里面的 API 就快了。</p><p>还有就是公司里刚好有个中科院研究生大佬，他就写过 Elasticsearch 这块的书籍《从 lucene 到 Elasticsearch 全文检索实战》，另外他的 CSDN 博客也很火，阅读量很高，感兴趣的可以买本书支持下。</p><p>中途自己遇到 Elasticsearch 实在不会的问题也会主动去找大佬咨询，然后大佬耐心教教我这个渣渣菜鸡，在文章这里感谢下大佬这段时间的关照。</p><h3 id="萌生阅读源码的想法"><a href="#萌生阅读源码的想法" class="headerlink" title="萌生阅读源码的想法"></a>萌生阅读源码的想法</h3><p>既然接触了这么久的 Elasticsearch ，项目里用过，书籍也看过，虽然还不是很熟，但是如果看看它的源码是不是会让我对它的印象更深呢？</p><p>说干就干，晚上回家就从 GitHub clone 了源码在本地，那时刚好回家，就在火车上直接用 VS code 看了会源码，也没有在 ide 里 debug 起来。</p><p>写这篇文章的时候已经把 Elasticsearch 的整个启动流程（加载读取配置、加载插件等）、如何支持 REST API 看了下，后面会在下班后回家继续阅读源码，继续分享我的源码解析的。</p><p>有想法就去干，不尝试下，怎么知道适不适合你？</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实阅读源码的主要原因还是自己感兴趣；另外就是这东西现在项目里确实也用到了，如果我对源码熟悉的话可能会对我的理解会更加透彻点；还有就是 Elasticsearch 确实火，公司几乎都用的，所以学习下还是有必要的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79ly1fty1lwmoa0j31hc0vjjyz.jpg&quot; alt=&quot;004&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="http://www.54tianzhisheng.cn/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>渣渣菜鸡的蚂蚁金服面试经历(二)</title>
    <link href="http://www.54tianzhisheng.cn/2018/07/31/alipay02/"/>
    <id>http://www.54tianzhisheng.cn/2018/07/31/alipay02/</id>
    <published>2018-07-30T16:00:00.000Z</published>
    <updated>2018-07-31T15:17:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/801b780aly1fttgbvge25j21f60vyack.jpg" alt="2018-07-31_23-16-07"></p><a id="more"></a><h2 id="蚂蚁金服"><a href="#蚂蚁金服" class="headerlink" title="蚂蚁金服"></a>蚂蚁金服</h2><h3 id="电话二面（85-分钟）"><a href="#电话二面（85-分钟）" class="headerlink" title="电话二面（85 分钟）"></a>电话二面（85 分钟）</h3><p>1、自我介绍、工作经历、技术栈</p><p>2、项目中你学到了什么技术？（把三项目具体描述了很久）</p><p>3、微服务划分的粒度</p><p>4、微服务的高可用怎么保证的？</p><p>5、常用的负载均衡，该怎么用，你能说下吗？</p><p>6、网关能够为后端服务带来哪些好处？</p><p>7、Spring Bean 的生命周期</p><p>8、xml 中配置的 init、destroy 方法怎么可以做到调用具体的方法？</p><p>9、反射的机制</p><p>10、Object 类中的方法</p><p>11、hashcode 和 equals 方法常用地方</p><p>12、对象比较是否相同</p><p>13、hashmap put 方法存放的时候怎么判断是否是重复的</p><p>14、Object toString 方法常用的地方，为什么要重写该方法</p><p>15、Set 和 List 区别？</p><p>16、ArrayList 和 LinkedList 区别</p><p>17、如果存取相同的数据，ArrayList 和 LinkedList 谁占用空间更大？</p><p>18、Set 存的顺序是有序的吗？</p><p>19、常见 Set 的实现有哪些？</p><p>20、TreeSet 对存入对数据有什么要求呢？</p><p>21、HashSet 的底层实现呢</p><p>22、TreeSet 底层源码有看过吗？</p><p>23、HashSet 是不是线程安全的？为什么不是线程安全的？</p><p>24、Java 中有哪些线程安全的 Map？</p><p>25、Concurrenthashmap 是怎么做到线程安全的？</p><p>26、HashTable 你了解过吗？</p><p>27、如何保证线程安全问题？</p><p>28、synchronized、lock</p><p>29、volatile 的原子性问题？为什么 i++ 这种不支持原子性？从计算机原理的设计来讲下不能保证原子性的原因</p><p>30、happens before 原理</p><p>31、cas 操作</p><p>32、lock 和 synchronized 的区别？</p><p>33、公平锁和非公平锁</p><p>34、Java 读写锁</p><p>35、读写锁设计主要解决什么问题？</p><p>36、你项目除了写 Java 代码，还有前端代码，那你知道前端有哪些框架吗？</p><p>37、MySQL 分页查询语句</p><p>38、MySQL 事务特性和隔离级别</p><p>39、不可重复读会出现在什么场景？</p><p>40、sql  having 的使用场景</p><p>41、前端浏览器地址的一个 http 请求到后端整个流程是怎么样？能够说下吗？</p><p>42、http 默认端口，https 默认端口</p><p>43、DNS 你知道是干嘛的吗？</p><p>44、你们开发用的 ide 是啥？你能说下 idea 的常用几个快捷键吧？</p><p>45、代码版本管理你们用的是啥？</p><p>46、git rebase 和 merge 有什么区别？</p><p>47、你们公司加班多吗？</p><p>48、后面一起聊 high 了，之间扯了些蛋，哈哈哈</p><h3 id="相关文章："><a href="#相关文章：" class="headerlink" title="相关文章："></a>相关文章：</h3><p><a href="http://www.54tianzhisheng.cn/2017/08/04/yaxin/">1、秋招第一站 —— 亚信科技</a></p><p><a href="http://www.54tianzhisheng.cn/2017/08/04/iqiyi/">2、秋招第二站 —— 内推爱奇艺</a></p><p><a href="http://www.54tianzhisheng.cn/2017/08/04/alibaba/">3、秋招第三站 —— 内推阿里（一面）</a></p><p><a href="http://www.54tianzhisheng.cn/2017/08/28/recommend-books/">4、那些年我看过的书 —— 致敬我的大学生活 —— Say Good Bye ！</a></p><p><a href="http://www.54tianzhisheng.cn/2017/09/17/Interview-summary/">5、面试过阿里等互联网大公司，我知道了这些套路</a></p><p><a href="http://www.54tianzhisheng.cn/2018/07/12/youzan/">6、渣渣菜鸡的有赞面试经历（一）</a></p><p><a href="http://www.54tianzhisheng.cn/2018/07/30/alipay01/">7、渣渣菜鸡的蚂蚁金服面试经历（一）</a></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>本地地址：<a href="http://www.54tianzhisheng.cn/2018/07/31/alipay02">http://www.54tianzhisheng.cn/2018/07/31/alipay02</a> ，转载请授权，否则禁止转载！</p><p><strong>本文首发在我的知识星球，最近自己一直在写前段时间的所有面试情况，已经分享在我的知识星球，如果感兴趣，可以加入我的知识星球！</strong></p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fts8b5uin5j30o00didgn.jpg" alt="zhisheng_zsxq"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/801b780aly1fttgbvge25j21f60vyack.jpg&quot; alt=&quot;2018-07-31_23-16-07&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://www.54tianzhisheng.cn/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>渣渣菜鸡的蚂蚁金服面试经历(一)</title>
    <link href="http://www.54tianzhisheng.cn/2018/07/30/alipay01/"/>
    <id>http://www.54tianzhisheng.cn/2018/07/30/alipay01/</id>
    <published>2018-07-29T16:00:00.000Z</published>
    <updated>2018-07-30T13:56:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fts8b55rbfj30zk0nj4do.jpg" alt="cafe-3537801_1280"></p><a id="more"></a><h2 id="蚂蚁金服"><a href="#蚂蚁金服" class="headerlink" title="蚂蚁金服"></a>蚂蚁金服</h2><h3 id="电话一面"><a href="#电话一面" class="headerlink" title="电话一面"></a>电话一面</h3><p>1、自我介绍、自己做的项目和技术领域</p><p>2、项目中的监控：那个监控指标常见的哪些？</p><p>3、微服务涉及到的技术以及需要注意的问题有哪些？</p><p>4、注册中心你了解了哪些？</p><p>5、consul 的可靠性你了解吗？</p><p>6、consul 的机制你有没有具体深入过？有没有和其他的注册中心对比过？</p><p>7、项目用 Spring 比较多，有没有了解 Spring 的原理？AOP 和 IOC 的原理</p><p>8、Spring Boot除了自动配置，相比传统的 Spring 有什么其他的区别？</p><p>9、Spring Cloud 有了解多少？</p><p>10、Spring Bean 的生命周期</p><p>11、HashMap 和 hashTable 区别？</p><p>12、Object 的 hashcode 方法重写了，equals 方法要不要改？</p><p>13、Hashmap 线程不安全的出现场景</p><p>14、线上服务 CPU 很高该怎么做？有哪些措施可以找到问题</p><p>15、JDK 中有哪几个线程池？顺带把线程池讲了个遍</p><p>16、SQL 优化的常见方法有哪些</p><p>17、SQL 索引的顺序，字段的顺序</p><p>18、查看 SQL 是不是使用了索引？（有什么工具）</p><p>19、TCP 和 UDP 的区别？TCP 数据传输过程中怎么做到可靠的？</p><p>20、说下你知道的排序算法吧</p><p>21、查找一个数组的中位数？</p><p>22、你有什么问题想问我的吗？</p><h3 id="相关文章："><a href="#相关文章：" class="headerlink" title="相关文章："></a>相关文章：</h3><p><a href="http://www.54tianzhisheng.cn/2017/08/04/yaxin/">1、秋招第一站 —— 亚信科技</a></p><p><a href="http://www.54tianzhisheng.cn/2017/08/04/iqiyi/">2、秋招第二站 —— 内推爱奇艺</a></p><p><a href="http://www.54tianzhisheng.cn/2017/08/04/alibaba/">3、秋招第三站 —— 内推阿里（一面）</a></p><p><a href="http://www.54tianzhisheng.cn/2017/08/28/recommend-books/">4、那些年我看过的书 —— 致敬我的大学生活 —— Say Good Bye ！</a></p><p><a href="http://www.54tianzhisheng.cn/2017/09/17/Interview-summary/">5、面试过阿里等互联网大公司，我知道了这些套路</a></p><p><a href="http://www.54tianzhisheng.cn/2018/07/12/youzan/">6、渣渣菜鸡的有赞面试经历（一）</a></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>本地地址：<a href="http://www.54tianzhisheng.cn/2018/07/30/alipay01">http://www.54tianzhisheng.cn/2018/07/30/alipay01</a> ，转载请授权，否则禁止转载！</p><p><strong>本文首发在我的知识星球，最近自己一直在写前段时间的所有面试情况，已经分享在我的知识星球，如果感兴趣，可以加入我的知识星球！</strong></p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fts8b5uin5j30o00didgn.jpg" alt="zhisheng_zsxq"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79ly1fts8b55rbfj30zk0nj4do.jpg&quot; alt=&quot;cafe-3537801_1280&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://www.54tianzhisheng.cn/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>渣渣菜鸡的有赞面试经历（一）</title>
    <link href="http://www.54tianzhisheng.cn/2018/07/12/youzan/"/>
    <id>http://www.54tianzhisheng.cn/2018/07/12/youzan/</id>
    <published>2018-07-11T16:00:00.000Z</published>
    <updated>2018-07-15T01:48:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1ftaaye0j1aj31hc0zganr.jpg" alt="003"></p><p>出去面试的话还是得好好准备，不然会被虐的有点惨！<br><a id="more"></a></p><h2 id="有赞（框架组）"><a href="#有赞（框架组）" class="headerlink" title="有赞（框架组）"></a>有赞（框架组）</h2><p>四月份面试有赞的时候，自己还在实习，所以也没有复习，是在 Boss 直聘上投的，当时看到了有赞的 2018 届春招，就投了下，然后不知道怎么就被推到了框架组，结果后面就感觉自己被虐的可惨了。</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="zhisheng"></p><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/07/12/youzan/">http://www.54tianzhisheng.cn/2018/07/12/youzan/</a></p><h3 id="电话一面"><a href="#电话一面" class="headerlink" title="电话一面"></a>电话一面</h3><p>好像是清明节还是五一劳动节来着，我还在睡觉，就接到一面面试官的电话，说现在有时间吗，能够接受下电话面试吗？我勒个去，今天过节、我被电话吵醒的，现在人都没清醒、这面试那肯定得一面就挂了，所以就老实得说现在还是不方便呢，约了周一上午 10 点面试。</p><p>周一 10 点面试官准时打电话过来了！</p><p>以下是面试的问题：</p><p>1、自我介绍</p><p>2、Map 的底层结构？（HashMap）</p><p>3、线程安全的 Map （concurrentHashMap）简单的说了下这两 1。7 和 1.8 的区别，本想问下要不要深入的讲下（源码级别），结果面试官说不用了。</p><p>4、项目 MySQL 的数据量和并发量有多大？</p><p>5、你对数据库了解多少？</p><p>6、你说下数据库的索引实现和非主键的二级索引</p><p>7、项目用的是 SpringBoot ，你能说下 Spring Boot 与 Spring 的区别吗？</p><p>8、SpringBoot 的自动配置是怎么做的？</p><p>9、MyBatis 定义的接口，怎么找到实现的？</p><p>10、Java 内存结构</p><p>11、对象是否可 GC？</p><p>12、Minor GC 和 Full GC</p><p>13、垃圾回收算法</p><p>14、垃圾回收器 G1</p><p>15、项目里用过 ElasticSearch 和 Hbase，有深入了解他们的调优技巧吗？</p><p>16、Spring RestTemplate 的具体实现</p><p>17、描述下网页一个 Http 请求，到后端的整个请求过程</p><p>18、多线程的常用方法和接口类及线程池的机制</p><p>19、总结我的 Java 基础还是不错，但是一些主流的框架源码还是处在使用的状态，需要继续去看源码</p><p>20、死锁</p><p>21、自己研究比较新的技术，说下成果！</p><p>22、你有什么想问的？我就问了下公司那边的情况，这个自由发挥！</p><p>最后我知道有二面的面试机会了。</p><p>10 来分钟不到，就再次打电话过来约了明早上午 10 点的视频面试。</p><h3 id="视频二面"><a href="#视频二面" class="headerlink" title="视频二面"></a>视频二面</h3><p>二面面试官先打电话过来，然后加了个微信，开始微信视频面试</p><p>这个面试我也不太记得具体面试题目了，下面写的是大概方向的：</p><p>1、HashMap，源码级别的问了，包括为什么线程不安全</p><p>2、死锁</p><p>3、Synchronized 和 ReentrantLock 锁机制，怎么判断重入锁的，会不会是死锁？</p><p>4、进程和线程的区别？</p><p>5、进程之间如何保证同步？</p><p>6、分布式锁</p><p>7、对象 GC</p><p>8、垃圾回收算法</p><p>9、JVM 参数</p><p>10、OOM 出现的有哪些场景？为什么会发生？</p><p>11、JVM 内存结构说下吧</p><p>12、堆和栈的共享问题？</p><p>13、有比较过 Http 和 RPC 吗？</p><p>14、HttpClient 你说说里面的具体实现吧？（涉及了哪些东西）</p><p>15、那要你设计一个高性能的 Http ，你会怎么设计？</p><p>二面微信视频面试只记得这么多了。</p><hr><p><strong>本文首发在我的知识星球，最近自己一直在写前段时间的所有面试情况，后面会一篇一篇分享在我的知识星球的，如果感兴趣，可以加入我的知识星球！</strong></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1ftaayfcr1dj30o00didgn.jpg" alt="zhisheng_zsxq"></p><p>知识星球更多面经文章：</p><p>1、<a href="https://t.zsxq.com/EyfYbuv" target="_blank" rel="noopener">蚂蚁金服电话一面</a></p><p>2、<a href="https://t.zsxq.com/AurzjA6" target="_blank" rel="noopener">蚂蚁金服电话二面——后面聊的有点high</a></p><p>3、<a href="https://t.zsxq.com/66MJauR" target="_blank" rel="noopener">club factory 面经分享</a></p><p>4、<a href="https://t.zsxq.com/biybQFa" target="_blank" rel="noopener">作为面试官得到的经验</a></p><p>5、<a href="https://t.zsxq.com/FmuvrJI" target="_blank" rel="noopener">史上最强最全面经合集</a></p><p>6、<a href="https://t.zsxq.com/BuNVJuJ" target="_blank" rel="noopener">公司需要什么样的人</a></p><p>7、<a href="https://t.zsxq.com/UN7i6uV" target="_blank" rel="noopener">如何介绍项目</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcly1ftaaye0j1aj31hc0zganr.jpg&quot; alt=&quot;003&quot;&gt;&lt;/p&gt;
&lt;p&gt;出去面试的话还是得好好准备，不然会被虐的有点惨！&lt;br&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://www.54tianzhisheng.cn/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>20 个案例教你在 Java 8 中如何处理日期和时间?</title>
    <link href="http://www.54tianzhisheng.cn/2018/06/20/java-8-date/"/>
    <id>http://www.54tianzhisheng.cn/2018/06/20/java-8-date/</id>
    <published>2018-06-19T16:00:00.000Z</published>
    <updated>2018-06-20T15:21:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fsho6kitc6j31hc0zkdr7.jpg" alt="002"><br><a id="more"></a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前面一篇文章写了<a href="http://www.54tianzhisheng.cn/2018/06/19/SimpleDateFormat/">《SimpleDateFormat 如何安全的使用？》</a>, 里面介绍了 SimpleDateFormat 如何处理日期／时间，以及如何保证线程安全，及其介绍了在 Java 8 中的处理时间／日期默认就线程安全的 DateTimeFormatter 类。那么 Java 8 中该怎么样处理生活中常见的一些日期／时间呢？比如：计算一周后的日期；计算一年前或一年后的日期；检查闰年等。</p><p>接下来创建了 20 个基于任务的实例来学习 Java 8 的新特性。从最简单创建当天的日期开始，然后创建时间及时区，接着模拟一个日期提醒应用中的任务——计算重要日期的到期天数，例如生日、纪念日、账单日、保费到期日、信用卡过期日等。</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="zhisheng"></p><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/06/20/java-8-date/">http://www.54tianzhisheng.cn/2018/06/20/java-8-date/</a></p><h3 id="示例-1、在-Java-8-中获取今天的日期"><a href="#示例-1、在-Java-8-中获取今天的日期" class="headerlink" title="示例 1、在 Java 8 中获取今天的日期"></a>示例 1、在 Java 8 中获取今天的日期</h3><p>Java 8 中的 LocalDate 用于表示当天日期。和 java.util.Date 不同，它只有日期，不包含时间。当你仅需要表示日期时就用这个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line">System.out.println(now);</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-06-20</span><br></pre></td></tr></table></figure><p>上面的代码创建了当天的日期，不含时间信息。打印出的日期格式非常友好，不像老的 Date 类打印出一堆没有格式化的信息。</p><h3 id="示例-2、在-Java-8-中获取年、月、日信息"><a href="#示例-2、在-Java-8-中获取年、月、日信息" class="headerlink" title="示例 2、在 Java 8 中获取年、月、日信息"></a>示例 2、在 Java 8 中获取年、月、日信息</h3><p>LocalDate 类提供了获取年、月、日的快捷方法，其实例还包含很多其它的日期属性。通过调用这些方法就可以很方便的得到需要的日期信息，不用像以前一样需要依赖 java.util.Calendar 类了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line"><span class="keyword">int</span> year = now.getYear();</span><br><span class="line"><span class="keyword">int</span> monthValue = now.getMonthValue();</span><br><span class="line"><span class="keyword">int</span> dayOfMonth = now.getDayOfMonth();</span><br><span class="line">System.out.printf(<span class="string">"year = %d, month = %d, day = %d"</span>, year, monthValue, dayOfMonth);</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">year = 2018, month = 6, day = 20</span><br></pre></td></tr></table></figure><h3 id="示例-3、在-Java-8-中处理特定日期"><a href="#示例-3、在-Java-8-中处理特定日期" class="headerlink" title="示例 3、在 Java 8 中处理特定日期"></a>示例 3、在 Java 8 中处理特定日期</h3><p>在第一个例子里，我们通过静态工厂方法 now() 非常容易地创建了当天日期，你还可以调用另一个有用的工厂方法LocalDate.of() 创建任意日期， 该方法需要传入年、月、日做参数，返回对应的 LocalDate 实例。这个方法的好处是没再犯老 API 的设计错误，比如年度起始于 1900，月份是从 0 开始等等。日期所见即所得，就像下面这个例子表示了 6 月 20 日，没有任何隐藏机关。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date = LocalDate.of(<span class="number">2018</span>, <span class="number">06</span>, <span class="number">20</span>);</span><br><span class="line">System.out.println(date);</span><br></pre></td></tr></table></figure><p>可以看到创建的日期完全符合预期，与写入的 2018 年 6 月 20 日完全一致。</p><h3 id="示例-4、在-Java-8-中判断两个日期是否相等"><a href="#示例-4、在-Java-8-中判断两个日期是否相等" class="headerlink" title="示例 4、在 Java 8 中判断两个日期是否相等"></a>示例 4、在 Java 8 中判断两个日期是否相等</h3><p>现实生活中有一类时间处理就是判断两个日期是否相等。你常常会检查今天是不是个特殊的日子，比如生日、纪念日或非交易日。这时就需要把指定的日期与某个特定日期做比较，例如判断这一天是否是假期。下面这个例子会帮助你用 Java 8 的方式去解决，你肯定已经想到了，LocalDate 重载了 equal 方法，请看下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line">LocalDate date = LocalDate.of(<span class="number">2018</span>, <span class="number">06</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">if</span> (date.equals(now)) &#123;</span><br><span class="line">System.out.println(<span class="string">"同一天"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子中我们比较的两个日期相同。注意，如果比较的日期是字符型的，需要先解析成日期对象再作判断。</p><h3 id="示例-5、在-Java-8-中检查像生日这种周期性事件"><a href="#示例-5、在-Java-8-中检查像生日这种周期性事件" class="headerlink" title="示例 5、在 Java 8 中检查像生日这种周期性事件"></a>示例 5、在 Java 8 中检查像生日这种周期性事件</h3><p>Java 中另一个日期时间的处理就是检查类似每月账单、结婚纪念日、EMI日或保险缴费日这些周期性事件。如果你在电子商务网站工作，那么一定会有一个模块用来在圣诞节、感恩节这种节日时向客户发送问候邮件。Java 中如何检查这些节日或其它周期性事件呢？答案就是 MonthDay 类。这个类组合了月份和日，去掉了年，这意味着你可以用它判断每年都会发生事件。和这个类相似的还有一个 YearMonth 类。这些类也都是不可变并且线程安全的值类型。下面我们通过 MonthDay 来检查周期性事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line">LocalDate dateOfBirth = LocalDate.of(<span class="number">2018</span>, <span class="number">06</span>, <span class="number">20</span>);</span><br><span class="line">MonthDay birthday = MonthDay.of(dateOfBirth.getMonth(), dateOfBirth.getDayOfMonth());</span><br><span class="line">MonthDay currentMonthDay = MonthDay.from(now);</span><br><span class="line"><span class="keyword">if</span> (currentMonthDay.equals(birthday)) &#123;</span><br><span class="line">System.out.println(<span class="string">"Happy Birthday"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"Sorry, today is not your birthday"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：（注意：获取当前时间可能与你看的时候不对，所以这个结果可能和你看的时候运行结果不一样）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Happy Birthday</span><br></pre></td></tr></table></figure><p>只要当天的日期和生日匹配，无论是哪一年都会打印出祝贺信息。你可以把程序整合进系统时钟，看看生日时是否会受到提醒，或者写一个单元测试来检测代码是否运行正确。</p><h3 id="示例-6、在-Java-8-中获取当前时间"><a href="#示例-6、在-Java-8-中获取当前时间" class="headerlink" title="示例 6、在 Java 8 中获取当前时间"></a>示例 6、在 Java 8 中获取当前时间</h3><p>与 Java 8 获取日期的例子很像，获取时间使用的是 LocalTime 类，一个只有时间没有日期的 LocalDate 近亲。可以调用静态工厂方法 now() 来获取当前时间。默认的格式是 hh:mm:ss:nnn。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalTime localTime = LocalTime.now();</span><br><span class="line">System.out.println(localTime);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13:35:56.155</span><br></pre></td></tr></table></figure><p>可以看到当前时间就只包含时间信息，没有日期。</p><h3 id="示例-7、如何在现有的时间上增加小时"><a href="#示例-7、如何在现有的时间上增加小时" class="headerlink" title="示例 7、如何在现有的时间上增加小时"></a>示例 7、如何在现有的时间上增加小时</h3><p>通过增加小时、分、秒来计算将来的时间很常见。Java 8 除了不变类型和线程安全的好处之外，还提供了更好的plusHours() 方法替换 add()，并且是兼容的。注意，这些方法返回一个全新的 LocalTime 实例，由于其不可变性，返回后一定要用变量赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalTime localTime = LocalTime.now();</span><br><span class="line">System.out.println(localTime);</span><br><span class="line">LocalTime localTime1 = localTime.plusHours(<span class="number">2</span>);<span class="comment">//增加2小时</span></span><br><span class="line">System.out.println(localTime1);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">13:41:20.721</span><br><span class="line">15:41:20.721</span><br></pre></td></tr></table></figure><p>可以看到，新的时间在当前时间 13:41:20.721 的基础上增加了 2 个小时。</p><h3 id="示例-8、如何计算一周后的日期"><a href="#示例-8、如何计算一周后的日期" class="headerlink" title="示例 8、如何计算一周后的日期"></a>示例 8、如何计算一周后的日期</h3><p>和上个例子计算两小时以后的时间类似，这个例子会计算一周后的日期。LocalDate 日期不包含时间信息，它的 plus()方法用来增加天、周、月，ChronoUnit 类声明了这些时间单位。由于 LocalDate 也是不变类型，返回后一定要用变量赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line">LocalDate plusDate = now.plus(<span class="number">1</span>, ChronoUnit.WEEKS);</span><br><span class="line">System.out.println(now);</span><br><span class="line">System.out.println(plusDate);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2018-06-20</span><br><span class="line">2018-06-27</span><br></pre></td></tr></table></figure><p>可以看到新日期离当天日期是 7 天，也就是一周。你可以用同样的方法增加 1 个月、1 年、1 小时、1 分钟甚至一个世纪，更多选项可以查看 Java 8 API 中的 ChronoUnit 类。</p><h3 id="示例-9、计算一年前或一年后的日期"><a href="#示例-9、计算一年前或一年后的日期" class="headerlink" title="示例 9、计算一年前或一年后的日期"></a>示例 9、计算一年前或一年后的日期</h3><p>继续上面的例子，上个例子中我们通过 LocalDate 的 plus() 方法增加天数、周数或月数，这个例子我们利用 minus() 方法计算一年前的日期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line">LocalDate minusDate = now.minus(<span class="number">1</span>, ChronoUnit.YEARS);</span><br><span class="line">LocalDate plusDate1 = now.plus(<span class="number">1</span>, ChronoUnit.YEARS);</span><br><span class="line">System.out.println(minusDate);</span><br><span class="line">System.out.println(plusDate1);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2017-06-20</span><br><span class="line">2019-06-20</span><br></pre></td></tr></table></figure><h3 id="示例-10、使用-Java-8-的-Clock-时钟类"><a href="#示例-10、使用-Java-8-的-Clock-时钟类" class="headerlink" title="示例 10、使用 Java 8 的 Clock 时钟类"></a>示例 10、使用 Java 8 的 Clock 时钟类</h3><p>Java 8 增加了一个 Clock 时钟类用于获取当时的时间戳，或当前时区下的日期时间信息。以前用到System.currentTimeInMillis() 和 TimeZone.getDefault() 的地方都可用 Clock 替换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Clock clock = Clock.systemUTC();</span><br><span class="line">Clock clock1 = Clock.systemDefaultZone();</span><br><span class="line">System.out.println(clock);</span><br><span class="line">System.out.println(clock1);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SystemClock[Z]</span><br><span class="line">SystemClock[Asia/Shanghai]</span><br></pre></td></tr></table></figure><h3 id="示例-11、如何用-Java-判断日期是早于还是晚于另一个日期"><a href="#示例-11、如何用-Java-判断日期是早于还是晚于另一个日期" class="headerlink" title="示例 11、如何用 Java 判断日期是早于还是晚于另一个日期"></a>示例 11、如何用 Java 判断日期是早于还是晚于另一个日期</h3><p>另一个工作中常见的操作就是如何判断给定的一个日期是大于某天还是小于某天？在 Java 8 中，LocalDate 类有两类方法 isBefore() 和 isAfter() 用于比较日期。调用 isBefore() 方法时，如果给定日期小于当前日期则返回 true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LocalDate tomorrow = LocalDate.of(<span class="number">2018</span>,<span class="number">6</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">if</span>(tomorrow.isAfter(now))&#123;</span><br><span class="line">System.out.println(<span class="string">"Tomorrow comes after today"</span>);</span><br><span class="line">&#125;</span><br><span class="line">LocalDate yesterday = now.minus(<span class="number">1</span>, ChronoUnit.DAYS);</span><br><span class="line"><span class="keyword">if</span>(yesterday.isBefore(now))&#123;</span><br><span class="line">System.out.println(<span class="string">"Yesterday is day before today"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Java 8 中比较日期非常方便，不需要使用额外的 Calendar 类来做这些基础工作了。</p><h3 id="示例-12、在-Java-8-中处理时区"><a href="#示例-12、在-Java-8-中处理时区" class="headerlink" title="示例 12、在 Java 8 中处理时区"></a>示例 12、在 Java 8 中处理时区</h3><p>Java 8 不仅分离了日期和时间，也把时区分离出来了。现在有一系列单独的类如 ZoneId 来处理特定时区，ZoneDateTime 类来表示某时区下的时间。这在 Java 8 以前都是 GregorianCalendar 类来做的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ZoneId america = ZoneId.of(<span class="string">"America/New_York"</span>);</span><br><span class="line">LocalDateTime localtDateAndTime = LocalDateTime.now();</span><br><span class="line">ZonedDateTime dateAndTimeInNewYork  = ZonedDateTime.of(localtDateAndTime, america );</span><br><span class="line">System.out.println(dateAndTimeInNewYork);</span><br></pre></td></tr></table></figure><h3 id="示例-13、如何表示信用卡到期这类固定日期，答案就在-YearMonth"><a href="#示例-13、如何表示信用卡到期这类固定日期，答案就在-YearMonth" class="headerlink" title="示例 13、如何表示信用卡到期这类固定日期，答案就在 YearMonth"></a>示例 13、如何表示信用卡到期这类固定日期，答案就在 YearMonth</h3><p>与 MonthDay 检查重复事件的例子相似，YearMonth 是另一个组合类，用于表示信用卡到期日、FD 到期日、期货期权到期日等。还可以用这个类得到 当月共有多少天，YearMonth 实例的 lengthOfMonth() 方法可以返回当月的天数，在判断 2 月有 28 天还是 29 天时非常有用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">YearMonth currentYearMonth = YearMonth.now();</span><br><span class="line">System.out.printf(<span class="string">"Days in month year %s: %d%n"</span>, currentYearMonth, currentYearMonth.lengthOfMonth());</span><br><span class="line">YearMonth creditCardExpiry = YearMonth.of(<span class="number">2018</span>, Month.FEBRUARY);</span><br><span class="line">System.out.printf(<span class="string">"Your credit card expires on %s %n"</span>, creditCardExpiry);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Days in month year 2018-06: 30</span><br><span class="line">Your credit card expires on 2018-02</span><br></pre></td></tr></table></figure><h3 id="示例-14、如何在-Java-8-中检查闰年"><a href="#示例-14、如何在-Java-8-中检查闰年" class="headerlink" title="示例 14、如何在 Java 8 中检查闰年"></a>示例 14、如何在 Java 8 中检查闰年</h3><p>LocalDate 类有一个很实用的方法 isLeapYear() 判断该实例是否是一个闰年。</p><h3 id="示例-15、计算两个日期之间的天数和月数"><a href="#示例-15、计算两个日期之间的天数和月数" class="headerlink" title="示例 15、计算两个日期之间的天数和月数"></a>示例 15、计算两个日期之间的天数和月数</h3><p>有一个常见日期操作是计算两个日期之间的天数、周数或月数。在 Java 8 中可以用 java.time.Period 类来做计算。下面这个例子中，我们计算了当天和将来某一天之间的月数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date = LocalDate.of(2019, Month.MARCH, 20);</span><br><span class="line">Period period = Period.between(now, date);</span><br><span class="line">System.out.println(&quot;离下个时间还有&quot; + period.getMonths() + &quot; 个月&quot;);</span><br></pre></td></tr></table></figure><h3 id="示例-16、包含时差信息的日期和时间"><a href="#示例-16、包含时差信息的日期和时间" class="headerlink" title="示例 16、包含时差信息的日期和时间"></a>示例 16、包含时差信息的日期和时间</h3><p>在 Java 8 中，ZoneOffset 类用来表示时区，举例来说印度与 GMT 或 UTC 标准时区相差 +05:30，可以通过ZoneOffset.of() 静态方法来获取对应的时区。一旦得到了时差就可以通过传入 LocalDateTime 和 ZoneOffset 来创建一个 OffSetDateTime 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime datetime = LocalDateTime.of(<span class="number">2014</span>, Month.JANUARY, <span class="number">14</span>,<span class="number">19</span>,<span class="number">30</span>);</span><br><span class="line">ZoneOffset offset = ZoneOffset.of(<span class="string">"+05:30"</span>);</span><br><span class="line">OffsetDateTime date = OffsetDateTime.of(datetime, offset);  </span><br><span class="line">System.out.println(<span class="string">"Date and Time with timezone offset in Java : "</span> + date);</span><br></pre></td></tr></table></figure><h3 id="示例-17、在-Java-8-中获取当前的时间戳"><a href="#示例-17、在-Java-8-中获取当前的时间戳" class="headerlink" title="示例 17、在 Java 8 中获取当前的时间戳"></a>示例 17、在 Java 8 中获取当前的时间戳</h3><p>如果你还记得 Java 8 以前是如何获得当前时间戳，那么现在你终于解脱了。Instant 类有一个静态工厂方法 now() 会返回当前的时间戳，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Instant timestamp = Instant.now();</span><br><span class="line">System.out.println(timestamp);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-06-20T06:35:24.881Z</span><br></pre></td></tr></table></figure><p>时间戳信息里同时包含了日期和时间，这和 java.util.Date 很像。实际上 Instant 类确实等同于 Java 8 之前的 Date类，你可以使用 Date 类和 Instant 类各自的转换方法互相转换，例如：Date.from(Instant) 将 Instant 转换成java.util.Date，Date.toInstant() 则是将 Date 类转换成 Instant 类。</p><h3 id="示例-18、在-Java-8-中如何使用预定义的格式化工具去解析或格式化日期"><a href="#示例-18、在-Java-8-中如何使用预定义的格式化工具去解析或格式化日期" class="headerlink" title="示例 18、在 Java 8 中如何使用预定义的格式化工具去解析或格式化日期"></a>示例 18、在 Java 8 中如何使用预定义的格式化工具去解析或格式化日期</h3><p>在 Java 8 以前的世界里，日期和时间的格式化非常诡异，唯一的帮助类 SimpleDateFormat 也是非线程安全的，而且用作局部变量解析和格式化日期时显得很笨重。幸好线程局部变量能使它在多线程环境中变得可用，不过这都是过去时了。Java 8 引入了全新的日期时间格式工具，线程安全而且使用方便。它自带了一些常用的内置格式化工具。</p><p>参见我上一篇文章： <a href="http://www.54tianzhisheng.cn/2018/06/19/SimpleDateFormat/">《SimpleDateFormat 如何安全的使用？》</a></p><h3 id="示例-19、如何在-Java-中使用自定义格式化工具解析日期"><a href="#示例-19、如何在-Java-中使用自定义格式化工具解析日期" class="headerlink" title="示例 19、如何在 Java 中使用自定义格式化工具解析日期"></a>示例 19、如何在 Java 中使用自定义格式化工具解析日期</h3><p>尽管内置格式化工具很好用，有时还是需要定义特定的日期格式。可以调用 DateTimeFormatter 的 ofPattern() 静态方法并传入任意格式返回其实例，格式中的字符和以前代表的一样，M 代表月，m 代表分。如果格式不规范会抛出 DateTimeParseException 异常，不过如果只是把 M 写成 m 这种逻辑错误是不会抛异常的。</p><p>参见我上一篇文章： <a href="http://www.54tianzhisheng.cn/2018/06/19/SimpleDateFormat/">《SimpleDateFormat 如何安全的使用？》</a></p><h3 id="示例-20、在-Java-8-中如何把日期转换成字符串"><a href="#示例-20、在-Java-8-中如何把日期转换成字符串" class="headerlink" title="示例 20、在 Java 8 中如何把日期转换成字符串"></a>示例 20、在 Java 8 中如何把日期转换成字符串</h3><p>上两个主要是从字符串解析日期。现在我们反过来，把 LocalDateTime 日期实例转换成特定格式的字符串。这是迄今为止 Java 日期转字符串最为简单的方式了。下面的例子将返回一个代表日期的格式化字符串。和前面类似，还是需要创建 DateTimeFormatter 实例并传入格式，但这回调用的是 format() 方法，而非 parse() 方法。这个方法会把传入的日期转化成指定格式的字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime arrivalDate  = LocalDateTime.now();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    DateTimeFormatter format = DateTimeFormatter.ofPattern(<span class="string">"MMMdd yyyy  hh:mm a"</span>);</span><br><span class="line">    String landing = arrivalDate.format(format);</span><br><span class="line">    System.out.printf(<span class="string">"Arriving at :  %s %n"</span>, landing);</span><br><span class="line">&#125;<span class="keyword">catch</span> (DateTimeException ex) &#123;</span><br><span class="line">    System.out.printf(<span class="string">"%s can't be formatted!%n"</span>, arrivalDate);</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java-8-日期时间-API-的重点"><a href="#Java-8-日期时间-API-的重点" class="headerlink" title="Java 8 日期时间 API 的重点"></a>Java 8 日期时间 API 的重点</h3><p>通过这些例子，你肯定已经掌握了 Java 8 日期时间 API 的新知识点。现在来回顾一下这个优雅 API 的使用要点：</p><p>1）提供了 javax.time.ZoneId 获取时区。</p><p>2）提供了 LocalDate 和 LocalTime 类。</p><p>3）Java 8 的所有日期和时间 API 都是不可变类并且线程安全，而现有的 Date 和 Calendar API 中的 java.util.Date 和SimpleDateFormat 是非线程安全的。</p><p>4）主包是 java.time, 包含了表示日期、时间、时间间隔的一些类。里面有两个子包 java.time.format 用于格式化， java.time.temporal 用于更底层的操作。</p><p>5）时区代表了地球上某个区域内普遍使用的标准时间。每个时区都有一个代号，格式通常由区域/城市构成（Asia/Tokyo），在加上与格林威治或 UTC 的时差。例如：东京的时差是 +09:00。</p><p>6）OffsetDateTime 类实际上组合了 LocalDateTime 类和 ZoneOffset 类。用来表示包含和格林威治或 UTC 时差的完整日期（年、月、日）和时间（时、分、秒、纳秒）信息。</p><p>7）DateTimeFormatter 类用来格式化和解析时间。与 SimpleDateFormat 不同，这个类不可变并且线程安全，需要时可以给静态常量赋值。 DateTimeFormatter 类提供了大量的内置格式化工具，同时也允许你自定义。在转换方面也提供了 parse() 将字符串解析成日期，如果解析出错会抛出 DateTimeParseException。DateTimeFormatter 类同时还有format() 用来格式化日期，如果出错会抛出 DateTimeException异常。</p><p>8）再补充一点，日期格式“MMM d yyyy”和“MMM dd yyyy”有一些微妙的不同，第一个格式可以解析“Jan 2 2014”和“Jan 14 2014”，而第二个在解析“Jan 2 2014”就会抛异常，因为第二个格式里要求日必须是两位的。如果想修正，你必须在日期只有个位数时在前面补零，就是说“Jan 2 2014”应该写成 “Jan 02 2014”。</p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p><a href="http://www.54tianzhisheng.cn/2018/06/19/SimpleDateFormat/">SimpleDateFormat 如何安全的使用？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcgy1fsho6kitc6j31hc0zkdr7.jpg&quot; alt=&quot;002&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.54tianzhisheng.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SimpleDateFormat 如何安全的使用？</title>
    <link href="http://www.54tianzhisheng.cn/2018/06/19/SimpleDateFormat/"/>
    <id>http://www.54tianzhisheng.cn/2018/06/19/SimpleDateFormat/</id>
    <published>2018-06-18T16:00:00.000Z</published>
    <updated>2018-06-20T07:25:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fshewu3v3yj31hc0zkwix.jpg" alt="001"></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>为什么会写这篇文章？因为这些天在看《阿里巴巴开发手册详尽版》，没看过的可以关注微信公众号：<strong>zhisheng</strong>，回复关键字：<strong>阿里巴巴开发手册详尽版</strong>  就可以获得。</p><h3 id="关注我"><a href="#关注我" class="headerlink" title="关注我"></a>关注我</h3><p><img src="http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg" alt="mark"></p><p>转载请务必注明原创地址为：<a href="http://www.54tianzhisheng.cn/2018/06/19/SimpleDateFormat/">http://www.54tianzhisheng.cn/2018/06/19/SimpleDateFormat/</a></p><p>在看的过程中有这么一条：</p><blockquote><p><strong>【强制】SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为 static，必须加锁，或者使用 DateUtils 工具类。 </strong></p></blockquote><p>看到这条我立马就想起了我实习的时候有个项目里面就犯了这个错误，记得当时是这样写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMddHHmmss"</span>);</span><br></pre></td></tr></table></figure><p>所以才认真的去研究下这个 SimpleDateFormat，所以才有了这篇文章。</p><h3 id="它是谁？"><a href="#它是谁？" class="headerlink" title="它是谁？"></a>它是谁？</h3><p>想必大家对 <code>SimpleDateFormat</code> 并不陌生。<code>SimpleDateFormat</code>  是 Java 中一个非常常用的类，他是以区域敏感的方式格式化和解析日期的具体类。 它允许格式化 (date -&gt; text)、语法分析 (text -&gt; date)和标准化。</p><p><code>SimpleDateFormat</code> 允许以任何用户指定的日期-时间格式方式启动。 但是，建议使用 <code>DateFormat</code> 中的 <code>getTimeInstance</code>、 <code>getDateInstance</code> 或 <code>getDateTimeInstance</code> 方法来创建一个日期-时间格式。 这几个方法会返回一个默认的日期／时间格式。 你可以根据需要用 <code>applyPattern</code> 方法修改格式方式。</p><h3 id="日期时间格式"><a href="#日期时间格式" class="headerlink" title="日期时间格式"></a>日期时间格式</h3><p>日期和时间格式由 <strong>日期和时间模式字符串</strong> 指定。在 <strong>日期和时间模式字符串</strong> 中，未加引号的字母 ‘A’ 到 ‘Z’ 和 ‘a’ 到 ‘z’ 被解释为模式字母，用来表示日期或时间字符串元素。文本可以使用单引号 (‘) 引起来，以免进行解释。所有其他字符均不解释，只是在格式化时将它们简单复制到输出字符串。</p><p>简单的讲：这些 A ——Z，a —— z 这些字母(不被单引号包围的)会被特殊处理替换为对应的日期时间，其他的字符串还是原样输出。</p><p>日期和时间模式(<strong>注意大小写，代表的含义是不同的</strong>)如下：</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fshewuz8vij30vm150tfw.jpg" alt="2018-06-19_11-17-43"></p><h3 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a>怎么使用？</h3><p>日期／时间格式模版样例：（给的时间是：2001-07-04 12:08:56  U.S. Pacific Time time zone）</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fshewwuu6pj30x20mqwio.jpg" alt="2018-06-19_11-27-39"></p><p>使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zhisheng_tian on 2018/6/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormatDateTime</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat myFmt = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH时mm分ss秒"</span>);</span><br><span class="line">        SimpleDateFormat myFmt1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yy/MM/dd HH:mm"</span>);</span><br><span class="line">        SimpleDateFormat myFmt2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);<span class="comment">//等价于now.toLocaleString()</span></span><br><span class="line">        SimpleDateFormat myFmt3 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH时mm分ss秒 E "</span>);</span><br><span class="line">        SimpleDateFormat myFmt4 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"一年中的第 D 天 一年中第w个星期 一月中第W个星期 在一天中k时 z时区"</span>);</span><br><span class="line">        Date now = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(myFmt.format(now));</span><br><span class="line">        System.out.println(myFmt1.format(now));</span><br><span class="line">        System.out.println(myFmt2.format(now));</span><br><span class="line">        System.out.println(myFmt3.format(now));</span><br><span class="line">        System.out.println(myFmt4.format(now));</span><br><span class="line">        System.out.println(now.toGMTString());</span><br><span class="line">        System.out.println(now.toLocaleString());</span><br><span class="line">        System.out.println(now.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2018年06月19日 23时10分05秒</span><br><span class="line">18/06/19 23:10</span><br><span class="line">2018-06-19 23:10:05</span><br><span class="line">2018年06月19日 23时10分05秒 星期二</span><br><span class="line">一年中的第 170 天 一年中第25个星期 一月中第4个星期 在一天中23时 CST时区</span><br><span class="line">19 Jun 2018 15:10:05 GMT</span><br><span class="line">2018-6-19 23:10:05</span><br><span class="line">Tue Jun 19 23:10:05 CST 2018</span><br></pre></td></tr></table></figure><p>使用方法很简单，就是先自己定义好时间／日期模版，然后调用 format 方法（传入一个时间 Date 参数）。</p><p>上面的是日期转换成自己想要的字符串格式。下面反过来，将字符串类型装换成日期类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zhisheng_tian on 2018/6/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringFormatDate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String time1 = <span class="string">"2018年06月19日 23时10分05秒"</span>;</span><br><span class="line">        String time2 = <span class="string">"18/06/19 23:10"</span>;</span><br><span class="line">        String time3 = <span class="string">"2018-06-19 23:10:05"</span>;</span><br><span class="line">        String time4 = <span class="string">"2018年06月19日 23时10分05秒 星期二"</span>;</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat myFmt = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH时mm分ss秒"</span>);</span><br><span class="line">        SimpleDateFormat myFmt1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yy/MM/dd HH:mm"</span>);</span><br><span class="line">        SimpleDateFormat myFmt2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);<span class="comment">//等价于now.toLocaleString()</span></span><br><span class="line">        SimpleDateFormat myFmt3 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH时mm分ss秒 E"</span>);</span><br><span class="line"></span><br><span class="line">        Date date1 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date1 = myFmt.parse(time1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(date1);</span><br><span class="line"></span><br><span class="line">        Date date2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date2 = myFmt1.parse(time2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(date2);</span><br><span class="line"></span><br><span class="line">        Date date3 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date3 = myFmt2.parse(time3);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(date3);</span><br><span class="line"></span><br><span class="line">        Date date4 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date4 = myFmt3.parse(time4);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(date4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Tue Jun 19 23:10:05 CST 2018</span><br><span class="line">Tue Jun 19 23:10:00 CST 2018</span><br><span class="line">Tue Jun 19 23:10:05 CST 2018</span><br><span class="line">Tue Jun 19 23:10:05 CST 2018</span><br></pre></td></tr></table></figure><p>这个转换方法也很简单。但是不要高兴的太早，主角不在这。</p><h3 id="线程不安全"><a href="#线程不安全" class="headerlink" title="线程不安全"></a>线程不安全</h3><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fsheww10htj31g40wedm3.jpg" alt="2018-06-19_23-56-29"></p><p>在 SimpleDateFormat 类的 JavaDoc 中，描述了该类不能够保证线程安全，建议为每个线程创建单独的日期／时间格式实例，如果多个线程同时访问一个日期／时间格式，它必须在外部进行同步。那么在多线程环境下调用 format() 和 parse() 方法应该使用同步代码来避免问题。下面我们通过一个具体的场景来一步步的深入学习和理解SimpleDateFormat 类。</p><p>1、每个线程创建单独的日期／时间格式实例</p><blockquote><p> 大量的创建 SimpleDateFormat 实例对象，然后再丢弃这个对象，占用大量的内存和 JVM 空间。</p></blockquote><p>2、创建一个静态的 SimpleDateFormat 实例，在使用时直接使用这个实例进行操作（我当时就是这么干的😄）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">df.format(date);</span><br></pre></td></tr></table></figure><p>当然，这个方法的确很不错，在大部分的时间里面都会工作得很好，但一旦在生产环境中一定负载情况下时，这个问题就出来了。他会出现各种不同的情况，比如转化的时间不正确，比如报错，比如线程被挂死等等。我们看下面的测试用例，拿事实说话：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zhisheng_tian on 2018/6/20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatDate</span><span class="params">(Date date)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sdf.format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parse</span><span class="params">(String strDate)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sdf.parse(strDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zhisheng_tian on 2018/6/20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtilsTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSimpleDateFormatThreadSafe</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.join(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="keyword">this</span>.getName() + <span class="string">":"</span> + DateUtils.parse(<span class="string">"2018-06-20 01:18:20"</span>));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> TestSimpleDateFormatThreadSafe().start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"Thread-0"</span> Exception in thread <span class="string">"Thread-1"</span> java.lang.NumberFormatException: For input string: <span class="string">""</span></span><br><span class="line">at java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class="number">65</span>)</span><br><span class="line">at java.lang.Long.parseLong(Long.java:<span class="number">601</span>)</span><br><span class="line">at java.lang.Long.parseLong(Long.java:<span class="number">631</span>)</span><br><span class="line">at java.text.DigitList.getLong(DigitList.java:<span class="number">195</span>)</span><br><span class="line">at java.text.DecimalFormat.parse(DecimalFormat.java:<span class="number">2051</span>)</span><br><span class="line">at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:<span class="number">1869</span>)</span><br><span class="line">at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:<span class="number">1514</span>)</span><br><span class="line">at java.text.DateFormat.parse(DateFormat.java:<span class="number">364</span>)</span><br><span class="line">at com.zhisheng.demo.date.DateUtils.parse(DateUtils.java:<span class="number">19</span>)</span><br><span class="line">at com.zhisheng.demo.date.DateUtilsTest$TestSimpleDateFormatThreadSafe.run(DateUtilsTest.java:<span class="number">19</span>)</span><br><span class="line">java.lang.NumberFormatException: For input string: <span class="string">".1818"</span></span><br><span class="line">at java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class="number">65</span>)</span><br><span class="line">at java.lang.Long.parseLong(Long.java:<span class="number">578</span>)</span><br><span class="line">at java.lang.Long.parseLong(Long.java:<span class="number">631</span>)</span><br><span class="line">at java.text.DigitList.getLong(DigitList.java:<span class="number">195</span>)</span><br><span class="line">at java.text.DecimalFormat.parse(DecimalFormat.java:<span class="number">2051</span>)</span><br><span class="line">at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:<span class="number">2162</span>)</span><br><span class="line">at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:<span class="number">1514</span>)</span><br><span class="line">at java.text.DateFormat.parse(DateFormat.java:<span class="number">364</span>)</span><br><span class="line">at com.zhisheng.demo.date.DateUtils.parse(DateUtils.java:<span class="number">19</span>)</span><br><span class="line">at com.zhisheng.demo.date.DateUtilsTest$TestSimpleDateFormatThreadSafe.run(DateUtilsTest.java:<span class="number">19</span>)</span><br><span class="line">Thread-<span class="number">2</span>:Sat Jun <span class="number">20</span> <span class="number">01</span>:<span class="number">18</span>:<span class="number">20</span> CST <span class="number">2201</span></span><br><span class="line">Thread-<span class="number">2</span>:Wed Jun <span class="number">20</span> <span class="number">01</span>:<span class="number">18</span>:<span class="number">20</span> CST <span class="number">2018</span></span><br><span class="line">Thread-<span class="number">2</span>:Wed Jun <span class="number">20</span> <span class="number">01</span>:<span class="number">18</span>:<span class="number">20</span> CST <span class="number">2018</span></span><br><span class="line">Thread-<span class="number">2</span>:Wed Jun <span class="number">20</span> <span class="number">01</span>:<span class="number">18</span>:<span class="number">20</span> CST <span class="number">2018</span></span><br></pre></td></tr></table></figure><p>说明：Thread-1和Thread-0报java.lang.NumberFormatException: multiple points错误，直接挂死，没起来；Thread-2 虽然没有挂死，但输出的时间是有错误的，比如我们输入的时间是：2018-06-20 01:18:20 ，当会输出：Sat Jun 20 01:18:20 CST 2201 这样的灵异事件。</p><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>为什么会出现线程不安全的问题呢？</p><p>下面我们通过看 JDK 源码来看看为什么 SimpleDateFormat 和 DateFormat 类不是线程安全的真正原因：</p><p>SimpleDateFormat 继承了 DateFormat，在 DateFormat 中定义了一个 protected 属性的 Calendar 类的对象：calendar。只是因为 Calendar 类的概念复杂，牵扯到时区与本地化等等，JDK 的实现中使用了成员变量来传递参数，这就造成在多线程的时候会出现错误。</p><p>在 SimpleDateFormat 中的 format 方法源码中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">format</span><span class="params">(Date date, StringBuffer toAppendTo,FieldPosition pos)</span> </span>&#123;</span><br><span class="line">  pos.beginIndex = pos.endIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> format(date, toAppendTo, pos.getFieldDelegate());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Called from Format after creating a FieldDelegate</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> StringBuffer <span class="title">format</span><span class="params">(Date date, StringBuffer toAppendTo,FieldDelegate delegate)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Convert input date to time field list</span></span><br><span class="line">  calendar.setTime(date);</span><br><span class="line">  <span class="keyword">boolean</span> useDateFormatSymbols = useDateFormatSymbols();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; compiledPattern.length; ) &#123;</span><br><span class="line">    <span class="keyword">int</span> tag = compiledPattern[i] &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">int</span> count = compiledPattern[i++] &amp; <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">255</span>) &#123;</span><br><span class="line">      count = compiledPattern[i++] &lt;&lt; <span class="number">16</span>;</span><br><span class="line">      count |= compiledPattern[i++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (tag) &#123;</span><br><span class="line">      <span class="keyword">case</span> TAG_QUOTE_ASCII_CHAR:</span><br><span class="line">        toAppendTo.append((<span class="keyword">char</span>)count);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> TAG_QUOTE_CHARS:</span><br><span class="line">        toAppendTo.append(compiledPattern, i, count);</span><br><span class="line">        i += count;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        subFormat(tag, count, delegate, toAppendTo, useDateFormatSymbols);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> toAppendTo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>calendar.setTime(date)  这条语句改变了 calendar，稍后，calendar 还会用到（在 subFormat 方法里），而这就是引发问题的根源。想象一下，在一个多线程环境下，有两个线程持有了同一个 SimpleDateFormat 的实例，分别调用format 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">线程 1 调用 format 方法，改变了 calendar 这个字段。</span><br><span class="line">线程 1 中断了。</span><br><span class="line">线程 2 开始执行，它也改变了 calendar。</span><br><span class="line">线程 2 中断了。</span><br><span class="line">线程 1 回来了</span><br></pre></td></tr></table></figure><p>此时，calendar 已然不是它所设的值，而是走上了线程 2 设计的道路。如果多个线程同时争抢 calendar 对象，则会出现各种问题，时间不对，线程挂死等等。</p><p>分析一下 format 的实现，我们不难发现，用到成员变量 calendar，唯一的好处，就是在调用 subFormat 时，少了一个参数，却带来了许多的问题。其实，只要在这里用一个局部变量，一路传递下去，所有问题都将迎刃而解。</p><p>这个问题背后隐藏着一个更为重要的问题–无状态：无状态方法的好处之一，就是它在各种环境下，都可以安全的调用。衡量一个方法是否是有状态的，就看它是否改动了其它的东西，比如全局变量，比如实例的字段。format 方法在运行过程中改动了 SimpleDateFormat 的 calendar 字段，所以，它是有状态的。</p><p>这也同时提醒我们在开发和设计系统的时候注意下一下三点:</p><p><strong>1.自己写公用类的时候，要对多线程调用情况下的后果在注释里进行明确说明</strong></p><p><strong>2.多线程环境下，对每一个共享的可变变量都要注意其线程安全性</strong></p><p><strong>3.我们的类和方法在做设计的时候，要尽量设计成无状态的</strong></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>1、<strong>需要的时候创建新实例</strong></p><p><strong>说明：</strong>在需要用到 SimpleDateFormat 的地方新建一个实例，不管什么时候，将有线程安全问题的对象由共享变为<strong>局部私有</strong>都能避免多线程问题，不过也加重了创建对象的负担。在一般情况下，这样其实对性能影响比不是很明显的。</p><p>2、<strong>使用同步：同步 SimpleDateFormat 对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateSyncUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatDate</span><span class="params">(Date date)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(sdf) &#123;</span><br><span class="line">            <span class="keyword">return</span> sdf.format(date);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parse</span><span class="params">(String strDate)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(sdf) &#123;</span><br><span class="line">            <span class="keyword">return</span> sdf.parse(strDate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong>当线程较多时，当一个线程调用该方法时，其他想要调用此方法的线程就要 block 等待，多线程并发量大的时候会对性能有一定的影响。</p><p>3、<strong>使用 ThreadLocal</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.text.DateFormat;</span><br><span class="line">import java.text.ParseException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class ConcurrentDateUtil &#123;</span><br><span class="line"></span><br><span class="line">    private static ThreadLocal&lt;DateFormat&gt; threadLocal = new ThreadLocal&lt;DateFormat&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        protected DateFormat initialValue() &#123;</span><br><span class="line">            return new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public static Date parse(String dateStr) throws ParseException &#123;</span><br><span class="line">        return threadLocal.get().parse(dateStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String format(Date date) &#123;</span><br><span class="line">        return threadLocal.get().format(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong>使用 ThreadLocal, 也是将共享变量变为独享，线程独享肯定能比方法独享在并发环境中能减少不少创建对象的开销。如果对性能要求比较高的情况下，一般推荐使用这种方法。</p><h3 id="Java-8-中的解决办法"><a href="#Java-8-中的解决办法" class="headerlink" title="Java 8 中的解决办法"></a>Java 8 中的解决办法</h3><p>Java 8 提供了新的日期时间 API，其中包括用于日期时间格式化的 DateTimeFormatter，它与 SimpleDateFormat 最大的区别在于：DateTimeFormatter 是线程安全的，而 SimpleDateFormat 并不是线程安全。</p><p><strong>DateTimeFormatter 如何使用：</strong></p><p>解析日期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String dateStr= <span class="string">"2018年06月20日"</span>;</span><br><span class="line">DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy年MM月dd日"</span>);   </span><br><span class="line">LocalDate date= LocalDate.parse(dateStr, formatter);</span><br></pre></td></tr></table></figure><p>日期转换为字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime now = LocalDateTime.now();  </span><br><span class="line">DateTimeFormatter format = DateTimeFormatter.ofPattern(<span class="string">"yyyy年MM月dd日 hh:mm a"</span>);</span><br><span class="line">String nowStr = now .format(format);</span><br></pre></td></tr></table></figure><p>由 DateTimeFormatter 的静态方法 ofPattern() 构建日期格式，LocalDateTime 和 LocalDate 等一些表示日期或时间的类使用 parse 和 format 方法把日期和字符串做转换。</p><p>使用新的 API，整个转换过程都不需要考虑线程安全的问题。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>SimpleDateFormat 是线程不安全的类，多线程环境下注意线程安全问题，如果是 Java 8 ，建议使用 DateTimeFormatter 代替 SimpleDateFormat。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="">http://www.cnblogs.com/peida/archive/2013/05/31/3070790.html</a></p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><p><a href="http://www.54tianzhisheng.cn/2018/06/20/java-8-date/">20 个案例教你在 Java 8 中如何处理日期和时间?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcgy1fshewu3v3yj31hc0zkwix.jpg&quot; alt=&quot;001&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.54tianzhisheng.cn/tags/Java/"/>
    
  </entry>
  
</feed>
